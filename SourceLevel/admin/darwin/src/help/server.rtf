{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}{\f2\fmodern\fcharset2 MS LineDraw;}{\f3\fmodern\fcharset3 Terminal;}} {\colortbl;} \fs20

#{\footnote MsiServer_Object}
${\footnote Msi Server Contents}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Microsoft Installer Server Contents
\par}\li180
\par\li0{\b\uldb Design Summary}{\v Server_DesignSummary}
\par\li0{\b\uldb Execution Flow}{\v Server_ExecutionFlow}
\par\li0{\b\uldb Script Format}{\v Server_ScriptFormat}
\par\li0{\b\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\par\li0{\b\uldb Deliverables}{\v Server_Deliverables}
\page

#{\footnote Server_ExecutionFlow}
${\footnote Execution Flow}
K{\footnote MSIEXEC; Execution; Flow}
+{\footnote Server:Execution}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Installer Execution Flow
\par}\li180
This diagram shows how the various objects interact.
 It does not indicate how the code is packaged into modules, as most of
 the code is shared between the server and client implementation. The script
 is not physically sent between processes; only its access is transferred.
\par{\f3\fs18
\line  Client operating in User Account  | Server, can operate as an OS service
\line                                    |  
\line  ÚÄÄÄÄÄÄÄÄ¿  ÚÄÄÄÄÄÄÄÄ¿  ÚÄÄÄÄÄÄ¿ RPC     ÚÄÄÄÄÄÄÄÄÄ¿   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
\line  ³Product ³  ³Product ³  ³ConfigÃÍÍÍÍÍÍÍÍ>³ Install ³   ³Configuration³
\line  ³Database³<¿³Launcher³Ú>³Proxy ³  |      ³ Server  ³ Ú>³Database     ³
\line  ÀÄÄÄÄÄÄÄÄÙ ³ÀÄÄÂÄÄÄÄÄÙ³ ÀÄÄÄÄÄÄÙ  |      ÀÄÄÄÄÄÄÂÄÄÙ ³ ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
\line             ÀÄ¿ ³  ÚÄÄÄÙ           |             ³    ³   
\line  ÚÄÄÄÄÄÄÄ¿  ÚÄÁÄÁÄÄÁÄ¿    Messages |    ÚÄÄÄÄÄÄÄ¿³ ÚÄÄÁÄÄÄÄ¿  ÚÄÄÄÄÄÄÄ¿
\line  ³UI     ³<Ä´ Install³<ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ´Script ³À>³Config.³<Ä´Install³
\line  ³Handler³  ³ Engine ³             | ÉÍ>³Execute³<Ä´ManagerÃÄ>³Engine ³
\line  ÀÂÄÄÄÄÄÄÙ  ÀÄÄÄÄÄÂÄÂÙ             | º  ÀÄÂÄÄÄÄÄÙ  ÀÄÄÄÄÄÄÂÙ  ÀÂÄÄÄÄÄÄÙ
\line   ³               ³ ³              | º    ³               ³    ³
\line   ³  ÚÄÄÄÄÄÄÄÄÄ¿  ³ ³  ÚÄÄÄÄÄÄÄÄ¿  | º    ³  ÚÄÄÄÄÄÄÄÄÄ¿  ³    ³
\line   ÀÄ>³ System  ³<ÄÙ ÀÄ>³Script  ÃÍÍÍÍ¼    ÀÄ>³ System  ³<ÄÙ    ³
\line      ³ Services³<ÄÄÄÄÄÄ´Generate³ Script     ³ Services³<ÄÄÄÄÄÄÙ
\line      ÀÄÄÄÄÄÄÄÄÄÙ       ÀÄÄÄÄÄÄÄÄÙ  |         ÀÄÄÄÄÄÄÄÄÄÙ
}\page

#{\footnote Server_Deliverables}
${\footnote Installer Deliverables}
K{\footnote Components; Deliverables; MSIEXEC}
+{\footnote Server:Deliverables}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Deliverable Components
\par}\li180
The following components will be delivered with each build of the Microsoft Installer.
 Because the Microsoft Installer is a cross platform application, separate sets
 of components are produced for each platform.
\par\li0{\b Core installer components}\par\li180
{\f1 MSISRV.DLL  } system services and DBMS, shared by all other modules, IMsiServices\line
{\f1 MSIENG.DLL  } install logic, action processing, IMsiEngine, IMsiExecute, IMsiConfigurationMangaer\line
{\f1 MSIHND.DLL  } error handling, dialog management, operates only in user security, IMsiHandler\line
{\f1 MSIEXEC.EXE } install server -- local OLE server, maintenance launcher, installable as OS service\line
{\f1 INSTALL.EXE } install launcher with product-specific resources, installer for MSI components\line
\par\li0{\b Authoring tools}\par\li180
{\f1 MSIAUTO.DLL } OLE automation for core components, ODBC driver for database services\line
{\f1 MSIGEN.DLL  } generates installation database from product root\line
{\f1 MSIDIFF.DLL } generates installation database from SYSDIFF output\line
{\f1 MSIEDIT.EXE } authoring environment, launches tools, edits tables and views\line
\page

#{\footnote Server_DesignSummary}
${\footnote Server DesignSummary}
K{\footnote Design; MSIEXEC}
+{\footnote Server:DesignSummary}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Installer Enhancements Design Summary
\par}\li180

\par\li0{\b Execution Phases}\par\li180
In order to operate in a secure environment, with the user's privileges locked down,
 the installation process is divided into two phases, acquisition where the install
 engine interacts with the installation database, the environment and the user to
 determine the set of operations required, and execution where the system update
 operations take place. The acquistion phase operates with user permissions, as it
 generally requires UI such as dialogs, progress, billboards, and error handling.
 The execution phase requires full file and registry permissions and updates the
 machine's installation configuration database. In a secure system this execution
 code is installed as a service. The communication between the two phases is handled
 by the IMsiExecute object, which generates a script file during acquisition and
 executes the script from with the execution module. Actions which formerly executed
 in a single operation, have been divided into the acquisition half which queries the
 database to determine the set of operations, and the execution half which is dispatched
 from the IMsiExecute object. Generating the script has the following advantages:
\line  1. The complete set of operations is successfully determined before any updates are done.
\line  2. The set of operations can be treated as a single transaction, allowing rollback.
\line  3. The transaction model eliminates concurrency problems by locking out intervening updates.
\line  4. The package containing the script can be certified once for all operations.
\line  5. Only a single RPC access is required to pass the set of operations.
\line  6. Testing and debugging is facilitated by independent generation and execution.
\line  7. Installation can be simulated by generation without execution.
\line  8. The script file could be used to analyze or resume execution after a crash or power loss.

\par\li0{\b Install Action Execution}\par\li180
Install actions typically execute queries against the product database and perform operations
 using the fetched data parameters. Instead of directly updating the system, which cannot be done
 from a user program in a secure system, the actions must call the Execute method of the engine
 with the necessary information packaged in a record object. This is in turn passed to the IMsiExecute
 object for streaming into the script file. The script is executed by another IMsiExecute object
 in the install server, which dispatches the regenerated records to the appropriate worker functions.
 The worker functions are generally associated with corresponding install actions, but may be
 shared by multiple actions where appropriate. Additional operations are included in the script for
 syncronization purposes, such as notifications, progress parameters, and media change information.

\par\li0{\b Module Packaging}\par\li180
The install server, which binds to the configuration manager, is built as a standalone executable
 and will be installed as a system service when possible. It creates an execute object to run a script
 and creates an engine object to install and remove shared components controlled by other databases.
 Being a service means that all UI must be dispatched by RPC to a user process.
 We are using IDispatch (OLE automation) for the UI handling and configuration manager requests,
 as OLE will marshal this interface across processes. The server must also manage the security
 attributes for the OLE RPC connection. The engine and services modules, shared by launchers,
 configuration manager, and tools, could eventually be combined into a single DLL to reduce disk space.
 We need to invoke the install server
 via the command line in a shortcut, add/remove command, or proxy, either by using a separate maintenance
 launcher or, preferably, by having an external instance of the install server call the
 service instance using the RPC mechanism.
\page

#{\footnote Server_Using}
${\footnote Using the Install Server}
K{\footnote Executable; MSIEXEC}
+{\footnote Server:Using}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Using the Install Server
\par}\li180

The install server supports the following command-line options:
\line\par\pard
\trowd\trgaph108\trleft540 \cellx2150\cellx7400
\intbl{\b Option\cell Description\cell}\row
\intbl/regserver\cell Q\cell\row
\intbl/regnoservice\cell Registers as a standard OLE server even if it is possible to register as a service.\cell\row
\intbl/unregister\cell Unregister the current registration.\cell\row
\intbl/t <caption>\cell Show test window. Displays a small window with the specified caption. This can be useful to determine when the server is running.\cell\row
\intbl/l <scriptfile>\cell List script. Display the opcodes and data contained in the given scriptfile. The output must be redirected to a file.\cell\row
\intbl/i <scriptfile>\cell Install from script. \cell\row
\intbl/a <featurelist>\cell Add features. Must be used after "/c". Separate feature names with commas.\cell\row
\intbl/x <featurelist>\cell Remove features. Must be used after "/c". Separate feature names with commas.\cell\row
\intbl/s <featurelist>\cell Q\cell\row
\intbl/c <productkey>\cell Configure product. Use in combination with "/a", "/x", or "/s" to configure a product's features.\cell\row
\intbl/? or /h\cell Display help.\cell\row
\par
\page



#{\footnote Server_ScriptFormat}
${\footnote Server ScriptFormat}
K{\footnote Script; MSIEXEC}
+{\footnote Server:ScriptFormat}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Execution Script Format
\par}\li180
The execution script is a file containing a linear sequence of install operations
 to be performed, such as file and registry updates, configuration database updates,
 UI notifications, and state information for other operations. A binary format is used
 instead of text for efficiency, to avoid the need for parsing, and to discourage
 manual editing. Each record consists of an opcode, argument count, and an array of
 arguments, essentially a serialization of the record objects used by the installer.
 Data types supported include NULL, integer, and variable length string and binary data.
 All data is stored as 16-bit integers in Intel byte ordering, with the exception of
 non-Unicode strings which are padded if necessary to a 16-bit boundary.

\par\li0{\b Record Structure}\par\li180
The first 16-bit word of a record contains the opcode in the low byte and the argument
 count in the high byte.
{\f3\fs18
\line  ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
\line  ³   Argument Count   ³    Operation Code  ³
\line  ³     (high byte)    ³      (low byte)    ³
\line  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
}
\par
Each of the arguments specified is preceded by a 16-bit word that specifies the data type
 and length of the following argument data. The exact data representation depends upon the type.
 The maximum length of an argument is 16,383 characters. If ever a longer argument is required,
 the extended type value is placed in the length field followed by a 32-bit word containing the
 type bits as the highest bits. Arguments are never null terminated.
{\f3\fs18
\line  ÚÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
\line  ³ Data ³ Length of data in characters, or ³
\line  ³ type ³ reserved codes for integer, NULL ³
\line  ÀÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
}

\par\li0{\b Script Data Types}\par\li180\tx3000
\line {\b Data type	Length encoding}
\line Null string (all types)	0
\line 32-bit signed integer	0x4000, integer value
\line Null value	0x8000
\line extended size	0xC000, 32-bit length, data array
\line Non-DBCS char string	lstrlenA(), char array
\line DBCS char string	lstrlenA() + 0x4000, char array
\line Binary stream	byte count + 0x8000, byte array
\line Unicode string	lstrlenW() + 0xC000, char array
\page

#{\footnote Server_ScriptOpcodes}
${\footnote Server ScriptOpcodes}
K{\footnote Script; Opcodes}
+{\footnote Server:ScriptOpcodes}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Execution Script Opcodes
\par}\li180\tx3000
\line{\b Special Operations}
\line{\f1 {\uldb ixoFail}{\v Operation_ixoFail}}
\line{\f1 {\uldb ixoNoop}{\v Operation_ixoNoop}}
\line{\f1 {\uldb ixoHeader}{\v Operation_ixoHeader}}
\line{\f1 {\uldb ixoEnd}{\v Operation_ixoEnd}}
\line{\f1 {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}}
\line{\f1 {\uldb ixoDialogInfo}{\v Operation_ixoDialogInfo}}
\line{\f1 {\uldb ixoRollbackInfo}{\v Operation_ixoRollbackInfo}}
\line{\f1 {\uldb ixoInfoMessage}{\v Operation_ixoInfoMessage}}
\line{\f1 {\uldb ixoActionStart}{\v Operation_ixoActionStart}}
\line{\f1 {\uldb ixoProgressTotal}{\v Operation_ixoProgressTotal}}
\line{\f1 {\uldb ixoProgressTick}{\v Operation_ixoProgressTick}}
\line{\f1 {\uldb ixoFullRecord}{\v Operation_ixoFullRecord}}
\line{\f1 {\uldb ixoDisableRollback}{\v Operation_ixoDisableRollback}}
\line{\f1 {\uldb ixoUpdateEstimatedSize}{\v Operation_ixoUpdateEstimatedSize}}
\line{\f1 {\uldb ixoInstallProtectedFiles}{\v Operation_ixoInstallProtectedFiles}}
\line{\f1 {\uldb ixoInstallSFPCatalogFile}{\v Operation_ixoInstallSFPCatalogFile}}
\line
\line{\b Configuration Manager Operations}
\line{\f1 {\uldb ixoAdvtFlagsUpdate}{\v Operation_ixoAdvtFlagsUpdate}}
\line{\f1 {\uldb ixoProductRegister}{\v Operation_ixoProductRegister}}
\line{\f1 {\uldb ixoProductUnregister}{\v Operation_ixoProductUnregister}}
\line{\f1 {\uldb ixoProductCPDisplayInfoRegister}{\v Operation_ixoProductCPDisplayInfoRegister}}
\line{\f1 {\uldb ixoProductCPDisplayInfoUnregister}{\v Operation_ixoProductCPDisplayInfoUnregister}}
\line{\f1 {\uldb ixoUserRegister}{\v Operation_ixoUserRegister}}
\line{\f1 {\uldb ixoComponentRegister}{\v Operation_ixoComponentRegister}}
\line{\f1 {\uldb ixoComponentUnregister}{\v Operation_ixoComponentUnregister}}
\line{\f1 {\uldb ixoProductPublish}{\v Operation_ixoProductPublish}}
\line{\f1 {\uldb ixoProductUnpublish}{\v Operation_ixoProductUnpublish}}
\line{\f1 {\uldb ixoProductPublishUpdate}{\v Operation_ixoProductPublishUpdate}}
\line{\f1 {\uldb ixoPackageCodePublish}{\v Operation_ixoPackageCodePublish}}
\line{\f1 {\uldb ixoUpgradeCodePublish}{\v Operation_ixoUpgradeCodePublish}}
\line{\f1 {\uldb ixoUpgradeCodeUnpublish}{\v Operation_ixoUpgradeCodeUnpublish}}
\line{\f1 {\uldb ixoProductPublishClient}{\v Operation_ixoProductPublishClient}}
\line{\f1 {\uldb ixoProductUnpublishClient}{\v Operation_ixoProductUnpublishClient}}
\line{\f1 {\uldb ixoSourceListPublish}{\v Operation_ixoSourceListPublish}}
\line{\f1 {\uldb ixoSourceListAppend}{\v Operation_ixoSourceListAppend}}
\line{\f1 {\uldb ixoSourceListUnpublish}{\v Operation_ixoSourceListUnpublish}}
\line{\f1 {\uldb ixoFeaturePublish}{\v Operation_ixoFeaturePublish}}
\line{\f1 {\uldb ixoFeatureUnpublish}{\v Operation_ixoFeatureUnpublish}}
\line{\f1 {\uldb ixoComponentPublish}{\v Operation_ixoComponentPublish}}
\line{\f1 {\uldb ixoComponentUnpublish}{\v Operation_ixoComponentUnpublish}}
\line
\line{\b File and Folder Operations}
\line{\f1 {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder}}
\line{\f1 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}}
\line{\f1 {\uldb ixoChangeMedia}{\v Operation_ixoChangeMedia}}
\line{\f1 {\uldb ixoSetCompanionParent}{\v Operation_ixoSetCompanionParent}}
\line{\f1 {\uldb ixoFileCopy}{\v Operation_ixoFileCopy}}
\line{\f1 {\uldb ixoFileRemove}{\v Operation_ixoFileRemove}}
\line{\f1 {\uldb ixoFolderCreate}{\v Operation_ixoFolderCreate}}
\line{\f1 {\uldb ixoFolderRemove}{\v Operation_ixoFolderRemove}}
\line{\f1 {\uldb ixoFileBindImage}{\v Operation_ixoFileBindImage}}
\line{\f1 {\uldb ixoIconCreate}{\v Operation_ixoIconCreate}}
\line{\f1 {\uldb ixoIconRemove}{\v Operation_ixoIconRemove}}
\line{\f1 {\uldb ixoTypeLibraryRegister}{\v Operation_ixoTypeLibraryRegister}}
\line{\f1 {\uldb ixoTypeLibraryUnregister}{\v Operation_ixoTypeLibraryUnregister}}
\line{\f1 {\uldb ixoRegisterBackupFile}{\v Operation_ixoTypeLibraryUnregister}}
\line
\line{\b Registry Operations}
\line{\f1 {\uldb ixoRegAllocateSpace}{\v Operation_ixoRegAllocateSpace}}
\line{\f1 {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}}
\line{\f1 {\uldb ixoRegAddValue}{\v Operation_ixoRegAddValue}}
\line{\f1 {\uldb ixoRegRemoveValue}{\v Operation_ixoRegRemoveValue}}
\line{\f1 {\uldb ixoRegCreateKey}{\v Operation_ixoRegCreateKey}}
\line{\f1 {\uldb ixoRegRemoveKey}{\v Operation_ixoRegRemoveKey}}
\line{\f1 {\uldb ixoRegSelfReg}{\v Operation_ixoRegSelfReg}}
\line{\f1 {\uldb ixoRegSelfUnreg}{\v Operation_ixoRegSelfUnreg}}
\line{\f1 {\uldb ixoRegAppIdInfoRegister}{\v Operation_ixoRegAppIdInfoRegister}}
\line{\f1 {\uldb ixoRegAppIdInfoUnregister}{\v Operation_ixoRegAppIdInfoUnregister}}
\line{\f1 {\uldb ixoRegAppIdInfoRegister64}{\v Operation_ixoRegAppIdInfoRegister64}}
\line{\f1 {\uldb ixoRegAppIdInfoUnregister64}{\v Operation_ixoRegAppIdInfoUnregister64}}
\line{\f1 {\uldb ixoRegClassInfoRegister}{\v Operation_ixoRegClassInfoRegister}}
\line{\f1 {\uldb ixoRegClassInfoUnregister}{\v Operation_ixoRegClassInfoUnregister}}
\line{\f1 {\uldb ixoRegClassInfoRegister64}{\v Operation_ixoRegClassInfoRegister}}
\line{\f1 {\uldb ixoRegClassInfoUnregister64}{\v Operation_ixoRegClassInfoUnregister}}
\line{\f1 {\uldb ixoRegExtensionInfoRegister}{\v Operation_ixoRegExtensionInfoRegister}}
\line{\f1 {\uldb ixoRegExtensionInfoUnregister}{\v Operation_ixoRegExtensionInfoUnregister}}
\line{\f1 {\uldb ixoRegExtensionInfoRegister64}{\v Operation_ixoRegExtensionInfoRegister}}
\line{\f1 {\uldb ixoRegExtensionInfoUnregister64}{\v Operation_ixoRegExtensionInfoUnregister}}
\line{\f1 {\uldb ixoRegMIMEInfoRegister}{\v Operation_ixoRegMIMEInfoRegister}}
\line{\f1 {\uldb ixoRegMIMEInfoUnregister}{\v Operation_ixoRegMIMEInfoUnregister}}
\line{\f1 {\uldb ixoRegMIMEInfoRegister64}{\v Operation_ixoRegMIMEInfoRegister}}
\line{\f1 {\uldb ixoRegMIMEInfoUnregister64}{\v Operation_ixoRegMIMEInfoUnregister}}
\line{\f1 {\uldb ixoRegProgIdInfoRegister}{\v Operation_ixoRegProgIdInfoRegister}}
\line{\f1 {\uldb ixoRegProgIdInfoUnregister}{\v Operation_ixoRegProgIdInfoUnregister}}
\line{\f1 {\uldb ixoRegProgIdInfoRegister64}{\v Operation_ixoRegProgIdInfoRegister}}
\line{\f1 {\uldb ixoRegProgIdInfoUnregister64}{\v Operation_ixoRegProgIdInfoUnregister}}
\line{\f1 {\uldb ixoRegAddRunOnceEntry}{\v Operation_ixoRegAddRunOnceEntry}}

\line
\line{\b Shortcut Operations}
\line{\f1 {\uldb ixoShortcutCreate}{\v Operation_ixoShortcutCreate}}
\line{\f1 {\uldb ixoShortcutRemove}{\v Operation_ixoShortcutRemove}}
\line
\line{\b Ini Operations}
\line{\f1 {\uldb ixoIniWriteRemoveValue}{\v Operation_ixoIniWriteRemoveValue}}
\line{\f1 {\uldb ixoIniFilePath}{\v Operation_ixoIniFilePath}}
\line
\line{\b Patch Operations}
\line{\f1 {\uldb ixoPatchApply}{\v Operation_ixoPatchApply}}
\line{\f1 {\uldb ixoPatchRegister}{\v Operation_ixoPatchRegister}}
\line{\f1 {\uldb ixoPatchUnregister}{\v Operation_ixoPatchUnregister}}
\line{\f1 {\uldb ixoPatchCache}{\v Operation_ixoPatchCache}}
\line
\line{\b Font Operations}
\line{\f1 {\uldb ixoFontRegister}{\v Operation_ixoFontRegister}}
\line{\f1 {\uldb ixoFontUnregister}{\v Operation_ixoFontUnregister}}
\line
\line{\b Resource Operations}
\line{\f1 {\uldb ixoResourceUpdate}{\v Operation_ixoResourceUpdate}}
\line
\line{\b Database Operations}
\line{\f1 {\uldb ixoSummaryInfoUpdate}{\v Operation_ixoSummaryInfoUpdate}}
\line{\f1 {\uldb ixoStreamsRemove}{\v Operation_ixoStreamsRemove}}
\line{\f1 {\uldb ixoStreamAdd}{\v Operation_ixoStreamAdd}}

\line{\f1 {\uldb ixoDatabaseCopy}{\v Operation_ixoDatabaseCopy}}
\line{\f1 {\uldb ixoDatabasePatch}{\v Operation_ixoDatabasePatch}}
\line
\line{\b CustomAction Operations}
\line{\f1 {\uldb ixoCustomActionSchedule}{\v Operation_ixoCustomActionSchedule}}
\line{\f1 {\uldb ixoCustomActionRollback}{\v Operation_ixoCustomActionRollback}}
\line{\f1 {\uldb ixoCustomActionCommit}{\v Operation_ixoCustomActionCommit}}
\line
\line{\b System Service Operations}
\line{\f1 {\uldb ixoServiceControl}{\v Operation_ixoServiceControl}}
\line{\f1 {\uldb ixoServiceInstall}{\v Operation_ixoServiceInstall}}
\line
\line{\b ODBC Operations}
\line{\f1 {\uldb ixoODBCInstallDriver}{\v Operation_ixoODBCInstallDriver}}
\line{\f1 {\uldb ixoODBCRemoveDriver}{\v Operation_ixoODBCRemoveDriver}}
\line{\f1 {\uldb ixoODBCDataSource}{\v Operation_ixoODBCDataSource}}
\line{\f1 {\uldb ixoODBCInstallTranslator}{\v Operation_ixoODBCInstallTranslator}}
\line{\f1 {\uldb ixoODBCRemoveTranslator}{\v Operation_ixoODBCRemoveTranslator}}
\line{\f1 {\uldb ixoODBCDriverManager}{\v Operation_ixoODBCDriverManager}}
\line
\line{\b Environmental Variables Operations}
\line{\f1 {\uldb ixoUpdateEnvironmentStrings}{\v Operation_ixoUpdateEnvironmentStrings}}
\line
\line{\b ComPlus Operations}
\line{\f1 {\uldb ixoComPlusRegister}{\v Operation_ixoComPlusRegister}}
\line{\f1 {\uldb ixoComPlusUnregister}{\v Operation_ixoComPlusUnregister}}
\line
\line{\b Miscellaneous Operations}
\line{\f1 {\uldb ixoSecureTransformCache}{\v Operation_ixoSecureTransformCache}}
\page

#{\footnote Operation_ixoSample}
${\footnote ixoSample Operation}
+{\footnote Operation:ixoSample}
K{\footnote ixoSample}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSample Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
!!Description!! 
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } !!Some kind of data!!\line
{\f1 Field 2: } !!Some kind of data!!
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
!!What operations must be executed before this one??!! 
\par\li0\fi0{\b Progress Notifications}\par\li180
!!Are any ActionData or Progress messages sent? What is sent in the ActionData messages??!! 
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgError1      MB_ABORTRETRYIGNORE }\line\line
{\f1 imsgFatalError  MB_RETRYCANCEL }
\par\li0\fi0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote Operation_ixoFail}
${\footnote ixoFail Operation}
+{\footnote Operation:ixoFail}
K{\footnote ixoFail}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFail Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
ixoFail is a special opcode used to catch null data in the script. This opcode is never
 explicitly used.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoNoop}
${\footnote ixoNoop Operation}
+{\footnote Operation:ixoNoop}
K{\footnote ixoNoop}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoNoop Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This is a special opcode used for commenting out operations.
\par\li0\fi0{\b Parameters:}\par\li180
None.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFullRecord}
${\footnote ixoFullRecord Operation}
+{\footnote Operation:ixoFullRecord}
K{\footnote ixoFullRecord}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFullRecord Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This is a special opcode used by the script serializer to indicate the record contains
 data in field 0.
\par\li0\fi0{\b Parameters:}\par\li180
None.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoHeader}
${\footnote ixoHeader Operation}
+{\footnote Operation:ixoHeader}
K{\footnote ixoHeader}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoHeader Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
The opcode marks the start of a script.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Script signature (integer)\line
{\f1 Field 2: } Msi version (integer)\line
{\f1 Field 3: } Timestamp (integer)\line
{\f1 Field 4: } Language id (integer)\line
{\f1 Field 5: } Platform (not currently used)\line
{\f1 Field 6: } Script type. One of the following values:\line
 {\f1 1 :} Install\line
 {\f1 2 :} Rollback\line
 {\f1 3 :} Advertise\line
{\f1 Field 7 & 8: } Script version. Used to identify incompatible script files.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed before all other operations for a script.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None, although the ommission of this operation from a script will cause an error.
\par\li0\fi0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote Operation_ixoEnd}
${\footnote ixoEnd Operation}
+{\footnote Operation:ixoEnd}
K{\footnote ixoEnd}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoEnd Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This opcode marks the end of a script.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Script checksum (integer).\line
{\f1 Field 2: } Progress total (integer).  This value represents the total number
 of progress ticks to be attributed to the script execution progress bar.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after all other operations for a script.
\par\li0\fi0{\b Progress Notifications}\par\li180
Dispatches an ActionDone message.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None. 
\page

#{\footnote Operation_ixoInfoMessage}
${\footnote ixoInfoMessage Operation}
+{\footnote Operation:ixoInfoMessage}
K{\footnote ixoInfoMessage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoInfoMessage Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation dispatches an {\uldb imtInfo}{\v MsiMessage_Message}
 message with the parameters passed to it.
\par\li0\fi0{\b Parameters:}\par\li180
Parameters to dispatch in imtInfo message
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
Dispatches an Info message.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoActionStart}
${\footnote ixoActionStart Operation}
+{\footnote Operation:ixoActionStart}
K{\footnote ixoActionStart}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoActionStart Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation designates the start of a new action. It sets the action name used in
 progress
 messages dispatched by subsequent operations. It also resets any state data set
 by previous operations.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Action name (non-localized text)\line
{\f1 Field 2: } Action description (localized text)\line
{\f1 Field 3: } Action data template (localized text)
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be called before the {\uldb ixoProgressTotal}{\v Operation_ixoProgressTotal}
 operation for the new action.
\par\li0\fi0{\b Progress Notifications}\par\li180
Dispatches an ActionStart message with the following fields:\par\li360
{\f1 Field 1: } Action name (non-localized text)\line
{\f1 Field 2: } Action description (localized text)\line
{\f1 Field 3: } Action data template (localized text)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProductRegister}
${\footnote ixoProductRegister Operation}
+{\footnote Operation:ixoProductRegister}
K{\footnote ixoProductRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers a product with the
 {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}. The parameters required
 to register the product that are not included in the parameters below are obtained from
 the {\uldb ixoProductInfo}{\v Operation_ixoProductInfo} operation. Most of the information
 in this opcode is registered for the use of the Add/Remove control Panel (ARP)
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } UpgradeCode (UpgradeCode property)\line
{\f1 Field 2: } Product version string (ProductVersion property)\line
{\f1 Field 3: } Help Link (ARPHELPLINK property)\line
{\f1 Field 4: } Help Telephone (ARPHELPTELEPHONE property)\line
{\f1 Field 5: } Install location (ARPINSTALLLOCATION property)\line
{\f1 Field 6: } Install source (SOURCEDIR property)\line
{\f1 Field 7: } Publisher (Manufacturer property)\line
{\f1 Field 8: } URL for product information(ARPURLINFOABOUT property)\line
{\f1 Field 9: } URL for update information (ARPURLUPDATEINFO property)\line
{\f1 Field 10: } Prevent app removal from ARP (ARPNOREMOVE property)\line
{\f1 Field 11: } Prevent app removal from ARP (ARPNOMODIFY property)\line
{\f1 Field 12: } Prevent app repair from ARP (ARPNOREPAIR property)\line
{\f1 Field 13: } Authorized CDF prefix (ARPAUTHORIZEDCDFPREFIX property)\line
{\f1 Field 14: } Comments (ARPCOMMENTS property)\line
{\f1 Field 15: } Contact (ARPCONTACT property)\line
{\f1 Field 16: } Readme (ARPREADME property)\line
{\f1 Field 17: } Size (ARPSIZE property)\line
{\f1 Field 18: } SystemComponent (ARPSYSTEMCOMPONENT property)\line

\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key (non-localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpProdRegister, MB_ABORTRETRYIGNORE }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoSourceListRegisterLastUsed}
${\footnote ixoSourceListRegisterLastUsed Operation}
+{\footnote Operation:ixoSourceListRegisterLastUsed}
K{\footnote ixoSourceListRegisterLastUsed}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSourceListRegisterLastUsed Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Sets the last used source for a product.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } SourceProduct - the product code for the product for which the last used source should be set\line
{\f1 Field 2: } LastUsedSource - the path to the last used source\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
!!What operations must be executed before this one??!! 
\par\li0\fi0{\b Progress Notifications}\par\li180
None.\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
This op calls {\uldb Conman.RegisterLastUsedSource}{\v MsiConfigurationManager_SetLastUsedSource} source. 
\page

#{\footnote Operation_ixoSourceListPublish}
${\footnote ixoSourceListPublish Operation}
+{\footnote Operation:ixoSourceListPublish}
K{\footnote ixoSourceListPublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSourceListPublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Publishes sources for a product.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } PatchCode - optional. used if we're publishing to a patch source list\line
{\f1 Field 2: } PatchPackageName - optional. used if we're publishing a patch\line
{\f1 Field 3: } DiskPromptTemplate - we stick the media table's disk prompt in this template to get our media prompt\line
{\f1 Field 4: } PackagePath - relative path to package on media (e.g. "Office\\", if the MSI is in the Office folder on the CD)\line
{\f1 Field 5: } NumberOfDisks - how many disks we have\line
{\f1 Field 6..N} For each disk there should be an arg with the label and an arg with the media table prompt. Following
 this, for each non-media source there should be an arg with the path to the source.\line
par\li0\fi0{\b Sequencing Restrictions}\par\li180
!!What operations must be executed before this one??!! 
\par\li0\fi0{\b Progress Notifications}\par\li180
None.\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoSourceListAppend}
${\footnote ixoSourceListAppend Operation}
+{\footnote Operation:ixoSourceListAppend}
K{\footnote ixoSourceListAppend}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSourceListAppend Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Continues publishing sources for a product.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } PatchCode - optional. used if we're publishing to a patch source list\line
{\f1 Field 2: } NumberOfMedia - how many disks we have in this record\line
{\f1 Field 3..N} For each disk there should be an arg with the label and an arg with the media table prompt. Following
 this, for each non-media source there should be an arg with the path to the source.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be called after the {\uldb ixoSourceListPublish}{\v Operation_ixoSourceListPublish} opcode, as this opcode will not remove 
existing source registration.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
This opcode is a no-op when un-advertising, as ixoSourceListPublsh removes the entire sourcelist key.
\page

#{\footnote Operation_ixoSourceListUnpublish}
${\footnote ixoSourceListUnpublish Operation}
+{\footnote Operation:ixoSourceListUnpublish}
K{\footnote ixoSourceListUnpublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSourceListUnpublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unpublishes sources for a product..
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } PatchCode - optional. used if we're unpublishing a patch source list\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
!!What operations must be executed before this one??!! 
\par\li0\fi0{\b Progress Notifications}\par\li180
None.\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProductUnregister}
${\footnote ixoProductUnregister Operation}
+{\footnote Operation:ixoProductUnregister}
K{\footnote ixoProductUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters a product with the
 {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key (non-localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpProdUnegister, MB_ABORTRETRYIGNORE }
\par\li0\fi0{\b Remarks}\par\li180
\page



#{\footnote Operation_ixoProductCPDisplayInfoRegister}
${\footnote ixoProductCPDisplayInfoRegister Operation}
+{\footnote Operation:ixoProductCPDisplayInfoRegister}
K{\footnote ixoProductCPDisplayInfoRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductCPDisplayInfoRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
registers the product to be included in the add/remove control panel list of products. This operation is used only for parent installs.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key (non-localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpProdUnegister, MB_ABORTRETRYIGNORE }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProductCPDisplayInfoUnregister}
${\footnote ixoProductCPDisplayInfoUnregister Operation}
+{\footnote Operation:ixoProductCPDisplayInfoUnregister}
K{\footnote ixoProductCPDisplayInfoUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductCPDisplayInfoUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
unregisters the product from the add/remove control panel list of products. This operation is used only for parent installs.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key (non-localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpProdUnegister, MB_ABORTRETRYIGNORE }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProductInfo}
${\footnote ixoProductInfo Operation}
+{\footnote Operation:ixoProductInfo}
K{\footnote ixoProductInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductInfo Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Contains information about the product to which the script file is related.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Product key (non-localized string)\line
{\f1 Field 2: } Product name (localized string)\line
{\f1 Field 3: } Product's package filename.\line
{\f1 Field 4: } Language (integer)\line
{\f1 Field 5: } Version (integer)\line
{\f1 Field 6: } Assignment (integer). 1 == machine, 0 == user\line
{\f1 Field 7: } AdminAssigned (integer). always 0 -- used by the executor\line

\par\li0\fi0{\b Sequencing Restrictions}\par\li180
This operation must immediately follow the
 {\uldb ixoHeader}{\v Operation_ixoHeader} operation in the script file.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
The version given in field 5 should be generated in the following way from a X.X.X.X version:
 The most significant 8 bits of the integer version should equal the integer value of the first field,
 the next 8 bits should equal
 the next field and the last 16 bits should equal the third field.  The fourth field, if it exists,
 should be ignored.
\page

#{\footnote Operation_ixoUserRegister}
${\footnote ixoUserRegister Operation}
+{\footnote Operation:ixoUserRegister}
K{\footnote ixoUserRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoUserRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers a user with the
 {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Owner (localized string?)\line
{\f1 Field 2: } Company (localized string?)\line
{\f1 Field 3: } ProductId (non-localized string)
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key (non-localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpUserRegister, MB_ABORTRETRYIGNORE }
\par\li0\fi0{\b Remarks}\par\li180
\page


#{\footnote Operation_ixoComponentRegister}
${\footnote ixoComponentRegister Operation}
+{\footnote Operation:ixoComponentRegister}
K{\footnote ixoComponentRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComponentRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers a component with the
 {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } ComponentId - the GUID representing the component \line
{\f1 Field 2: } KeyPath - the key file or folder representing the component\line
{\f1 Field 3: } Component State - the components INSTALLSTATE\line
{\f1 Field 4: } ProductKey - the client of this component; if Null then the product key set by ixoProductInfo is used\line
{\f1 Field 5: } Disk - the disk number for the component if the component is installed run from source from a removable media\line
{\f1 Field 6: } SharedDllRefCount - boolean flag that denotes whether the component's key file is refcounted in the Shared Dll registry.\line
{\f1 Fields 7 to N:} Redirected ComponentIds - the IDs for components that should now be redirected to the one being registered\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
!!What operations must be executed before this one??!! 
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData message with the following fields:\line
{\f1 Field 1: } Product key (non-localized string)\line
{\f1 Field 2: } ComponentId\line
{\f1 Field 3: } KeyPath \line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComponentUnregister}
${\footnote ixoComponentUnregister Operation}
+{\footnote Operation:ixoComponentUnregister}
K{\footnote ixoComponentUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComponentUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters a component with the
 {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } ComponentId - the GUID representing the component \line
{\f1 Field 2: } ProductKey - the client of this component; if Null then the product key set by ixoProductInfo is used\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
!!What operations must be executed before this one??!! 
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData message with the following fields:\line
{\f1 Field 1: } Product key (non-localized string)\line
{\f1 Field 2: } ComponentId \line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote Operation_ixoProgressTotal}
${\footnote ixoProgressTotal Operation}
+{\footnote Operation:ixoProgressTotal}
K{\footnote ixoProgressTotal}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProgressTotal Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation sets the total count for progress messages dispatched by subsequent
 operations for the current action.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Total tick count (integer)\line
{\f1 Field 2: } Progress type. One of two values:\line
 {\f1 0:  } Separate progress and action data messages.\line
 {\f1 1:  } Use ActionData messages as progress (i.e. increment the progress bar on each ActionData message).\line
{\f1 Field 3: } Byte Equivalent.  For each action type, the approximate number of bytes the InstallFiles action
 would copy in the time it takes for this action to perform one operation.  When using ActionData messages for
 progress, the progress bar is incremented by the Byte Equivalent value each time an ActionData message is received.
 Note: the Byte Equivalent value is related to the InstallFiles byte transfer rate so that the Installer can use
 this relationship to approximate the anticipated total time required for the entire install.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be called after the {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation
 for the current action.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProgressTick}
${\footnote ixoProgressTick Operation}
+{\footnote Operation:ixoProgressTick}
K{\footnote ixoProgressTick}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProgressTick Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation performs 1 progress message operation on behalf of the current action.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoSetSourceFolder}
${\footnote ixoSetSourceFolder Operation}
+{\footnote Operation:ixoSetSourceFolder}
K{\footnote ixoSetSourceFolder}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSetSourceFolder Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation sets the source folder used by subsequent operations. The value set by
 operation is valid until the next ixoSetSourceFolder or
 {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Full path of folder (localized text)\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed before any operations using the source folder since the last
 {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!! what errors can be dispatched?? !!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoSetTargetFolder}
${\footnote ixoSetTargetFolder Operation}
+{\footnote Operation:ixoSetTargetFolder}
K{\footnote ixoSetTargetFolder}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSetTargetFolder Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation sets the target folder used by subsequent operations. The value set by
 operation is valid until the next ixoSetTargetFolder or
 {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } String or integer. If a string, the full path of the folder (localized text).
 If an integer, the CSIDL_* value corresponding to a shell folder. These values are defined in
 the shlobj.h file in the Win32 headers. (integer).\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed before any operations using the target folder since the last
 {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!! what errors can be dispatched?? !!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoChangeMedia}
${\footnote ixoChangeMedia Operation}
+{\footnote Operation:ixoChangeMedia}
K{\footnote ixoChangeMedia}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoChangeMedia Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Sets the media and cabinet files to use in subsequent
 {\uldb ixoFileCopy}{\v Operation_ixoFileCopy} operations.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Media volume label.  This is the label associated with the volume (as returned by the GetVolumeInformation API),
 and is used to ensure that the proper volume is in the drive.\line
{\f1 Field 2: } Media prompt (localized text).  This field should represent the source disk name, as visible to the user
 on the printed disk label. If the source volume is a removable drive (i.e. floppy or CD), and the
 current disk's volume label does not match the value given in field 1, a dialog incorporating the string given in this field
 will be displayed, prompting the user to enter the proper disk.\line
{\f1 Field 3: } Media cabinet. If this cabinet is located in a stream of the module, this value is the stream name.
 If the cabinet is a seperate file, this value is the full path to the file.\line
{\f1 Field 4: } Bytes per tick of progress messages (integer)\line
{\f1 Field 5: } Copier type. One of the following values:\line
 {\f1 ictFileCopier          = 0 :} copy an uncompressed file.\line
 {\f1 ictCabinetCopier       = 1 :} copy a compressed file from a cabinet.\line
 {\f1 ictStreamCabinetCopier = 2 :} copy a compressed file from a cabinet stored as a stream within the install database.\line
{\f1 Field 6: } Full path to the install database file containing cabinet file in a stream.
 Not required if cabinet file isn't located in a stream, or if copying only uncompressed files. (non-localized text)
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
See the description of field 2 (above).
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoSetCompanionParent}
${\footnote ixoSetCompanionParent Operation}
+{\footnote Operation:ixoCompanionParent}
K{\footnote ixoSetCompanionParent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSetCompanionParent Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Signifies that the next ixoFileCopy operation involves a "companion" file,
 i.e. a file whose installation status is dependent on the version and language
 of a "parent" file.  The ixoSetCompanionParent operation specifies the full path,
 version, and language of the parent.  Thus, when the subsequent ixoFileCopy
 operation is executed, the path, version, and language of the parent file will
 be checked to determine whether the companion file should be installed or not.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Parent Path: absolute path to the parent file.\line
{\f1 Field 2: } Parent Name: filename of the parent file.\line
{\f1 Field 3: } Parent Version: version string of the parent file, as found in the {\b Version} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line
{\f1 Field 4: } Parent language: language string of the parent file, as found in the {\b Language} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\page

#{\footnote Operation_ixoInstallSFPCatalogFile}
${\footnote ixoInstallSFPCatalogFile Operation}
+{\footnote Operation:ixoInstallSFPCatalogFile}
K{\footnote ixoInstallSFPCatalogFile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoInstallSFPCatalogFile Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Install a system file protection catalog file
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Catalog file name. \line
{\f1 Field 2: } Binary blob containing catalog.\line
{\f1 Field 3: } Comma delimited list of catalogs this one depends on.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed before {\uldb ixoFileCopy}{\v Operation_ixoFileCopy}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Catalog file name
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
If the catalog binary blob is empty, the specified catalog name will be deleted.
 This is used for rollback, and future features for uninstalling catalogs.
\page

#{\footnote Operation_ixoFileCopy}
${\footnote ixoFileCopy Operation}
+{\footnote Operation:ixoFileCopy}
K{\footnote ixoFileCopy}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFileCopy Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Copies a compressed file from a cabinet, or an uncompressed file from a source directory.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Source file identifier. Name of file located in the folder set by the
 {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder} operation when copying
 uncompressed files, or cabinet identifier when copying compressed files (localizable). \line
{\f1 Field 2: } Destination file name. File will be copied to the folder set by the
 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation (localizable). \line
{\f1 Field 3: } Copy attributes (integer) - bit flags, defined as follows:\line
  {\f1 0: iffReadOnly :} Set the ReadOnly bit in the destination file.\line
  {\f1 1: iffHidden   :} Set the Hidden bit in the destination file.\line
  {\f1 2: iffSystem   :} Set the System bit in the destination file.\line
  {\f1 3: iffReserved :} must be zero.\line
  {\f1 4: iffVital    :} Vital file.  If any error occurs at copy time (i.e. source file cannot
   be located), the 'Ignore' button on the resulting dialog will be suppressed.\line
{\f1 Field 4: } File size (integer)\line
{\f1 Field 5: } Version string, as found in the {\b Version} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line
{\f1 Field 6: } Language string, as found in the {\b Language} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line
{\f1 Field 7: } Install mode (integer) - bit flags, defined as follows:\line
  {\f1  0: icmRunFromSource              :} File should be run from source image (i.e. don't copy even if icmInstallEnabled bit is on) -\line 
  {\f1                                    } this bit allows the ixoFileCopy operation to log files that are RunFromSource, even though\line
  {\f1                                    } it won't copy them.\line
  {\f1  1: Reserved                      :} Must be zero.\line
  {\f1  2: icmRemoveSource               :} delete the source file after copying (or simply move the file if possible).\line
  {\f1  2-15: Reserved                   :} must be zero.\line
  {\f1 16: icmInstallEnabled             :} Enables install/overwrite.  No file copy will occur if this bit is clear, regardless of\line
  {\f1                                    } any other bit setting.\line
  {\f1 17: icmOverwriteNone              :} Install only if no existing file is present (never overwrite).\line
  {\f1 18: icmOverwriteOlderVersions     :} Overwrite older file versions.\line
  {\f1 19: icmOverwriteEqualVersions     :} Overwrite equal file versions.\line
  {\f1 20: icmOverwriteDifferingVersions :} Overwrite any file with a differing version.\line
  {\f1 21: icmOverwriteCorruptedFiles    :} Overwrite corrupt files (i.e. checksum failure).\line
  {\f1 22: icmOverwriteAllFiles          :} Overwrite all files, regardless of version.\line
{\f1 Field 8: } Bytes per tick - the number of bytes to be copied between each progress message tick.\line
{\f1 Field 9: } IsCompressed (Boolean): True if the file is compressed in a cabinet.\line
{\f1 Field 10: } IMsiData object containing "self-relative" Win32 security descriptor.  Empty provides no security.\line
{\f1 Field 11: } VerifyMedia: If true, and if the source file resides on removable media, verify that the source volume is present
 before attempting the file copy.  If source volume is not present, a dialog will prompt the user to insert the appropriate disk.\line
{\f1 Field 12: } Vital patches: count of patches for this file that are considered "vital."\line
{\f1 Field 12: } Total patches: total count of patches for this file.\line
{\f1 Field 13: } Patch headers: a variable number of patch headers, one for each patch to be applied to this file. These are retrieved from
 the Header column of the Patch table, and used to test if a patch will be successful or not.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.
 When copying uncompressed files, must be executed after
 {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder}.
 When copying compressed files, must be executed after
 {\uldb ixoChangeMedia}{\v Operation_ixoChangeMedia}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Source file name\line 
{\f1 Field 6: } File size\line
{\f1 Field 9: } Target folder
\par\li180
Progress message every time a number of bytes equal to the 8th parameter is copied.
 The progress record contains the following fields:\par\li360
{\f1 Field 1: } Total number of units for progress. This value is set by the
 {\uldb ixoProgressTotal}{\v Operation_ixoProgressTotal} operation.\line
{\f1 Field 2: } Number of units (bytes) copied so far. This value is for all files copied
 since the last {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
An error message box will be presented if the source file cannot be located in the folder set by the last 
 {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder} operation, or if no disk is found in the
 drive associated with the source volume (assuming removable media).
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFileRemove}
${\footnote ixoFileRemove Operation}
+{\footnote Operation:ixoFileRemove}
K{\footnote ixoFileRemove}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFileRemove Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Remove a file.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 2: } File name. File is assumed to exist in the folder set by the
 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?)
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } File name\line
{\f1 Field 9: } Folder
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
If the removal of the file leaves the folder empty, and the folder is registered
 with the Configuration Manager, the folder is deleted as well.
\page

#{\footnote Operation_ixoStreamsRemove}
${\footnote ixoStreamsRemove Operation}
+{\footnote Operation:ixoStreamsRemove}
K{\footnote ixoStreamsRemove}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoStreamsRemove Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } \line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: }
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoStreamAdd}
${\footnote ixoStreamAdd Operation}
+{\footnote Operation:ixoStreamAdd}
K{\footnote ixoStreamAdd}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoStreamAdd Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Full path to the storage file\line
{\f1 Field 2: } Stream name to create/replace\line
{\f1 Field 3: } Stream data to place.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: }
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page



#{\footnote Operation_ixoDatabaseCopy}
${\footnote ixoDatabaseCopy Operation}
+{\footnote Operation:ixoDatabaseCopy}
K{\footnote ixoDatabaseCopy}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoDatabaseCopy Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Caches the product database in %WINDOWS%\MSI
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Full path to the database\line
{\f1 Field 2: } Product code\line
{\f1 Field 3: } Cabinet streams. This is a semicolon-delimited list of streams
 that should be dropped from the database when it is cached\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: }
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoDatabasePatch}
${\footnote ixoDatabasePatch Operation}
+{\footnote Operation:ixoDatabasePatch}
K{\footnote ixoDatabasePatch}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoDatabasePatch Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Patchs the product database in %WINDOWS%\MSI
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Full path to the database\line
{\f1 Field 2-n: } Transform to be applied and persisted to database package. The transform is stored as binary data.
 The transforms are applied in the order they are listed in the parameter list.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFileUndoRebootReplace}
${\footnote ixoFileUndoRebootReplace Operation}
+{\footnote Operation:ixoFileUndoRebootReplace}
K{\footnote ixoFileUndoRebootReplace}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFileUndoRebootReplace Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation "un-schedules" a file for deletion or rename on reboot. When a file is in use and an attempt
 is made to delete or copy over that file, the operation is scheduled to occur on reboot. This operation is
 written to the rollback script so that if the installation is rolled back before a reboot occurs, the operation
 will not take place.  This operation should only exist in a rollback script.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Full path of file to be deleted or renamed.\line
{\f1 Field 2: } Null if file is to be deleted, or full path of file to rename original file to.\line
{\f1 Field 3: } Type of operation. 0 for Win9X, 1 for WinNT. On Win9X, reboot operation are written to %windows%\\wininit.ini.
 On WinNT, they are written to the registry value HKLM\\SYSTEM\\Control\\CurrentControlSet\\Session Manager\\[PendingFileRenameOperations].
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFolderCreate}
${\footnote ixoFolderCreate Operation}
+{\footnote Operation:ixoFolderCreate}
K{\footnote ixoFolderCreate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFolderCreate Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Creates a folder. If the folder does not already exist, it is registered with the
 {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object} using the
 {\uldb RegisterFolder}{\v MsiConfigurationManager_RegisterFolder} method.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Folder. Full path of the folder to be created. (localized text)\line
{\f1 Field 2: } Foreign. True if this is a foreign (i.e. explicitly authored) folder, false otherwise.\line
{\f1 Field 3: } IMsiData object containing "self-relative" Win32 security descriptor.  Empty provides no security.
 \par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Folder \line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFolderRemove}
${\footnote ixoFolderRemove Operation}
+{\footnote Operation:ixoFolderRemove}
K{\footnote ixoFolderRemove}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFolderRemove Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Removes a folder if it is empty. If the folder is removed, it is unregistered with the
 {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object} using the
 {\uldb UnregisterFolder}{\v MsiConfigurationManager_UnregisterFolder} method.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Folder. Full path of the folder to be created. (localized text)\line
{\f1 Field 2: } Foreign. True if this is a foreign (i.e. explicitly authored) folder, false otherwise.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Folder
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!! to be documented !!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegAllocateSpace}
${\footnote ixoRegAllocateSpace Operation}
+{\footnote Operation:ixoRegAllocateSpace}
K{\footnote ixoRegAllocateSpace}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegAllocateSpace Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation sets the free space available in the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Space: (integer) the required free registry space in KB \par\li360
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
This operation is a noop on Win9X.
\page

#{\footnote Operation_ixoRegOpenKey}
${\footnote ixoRegOpenKey Operation}
+{\footnote Operation:ixoRegOpenKey}
K{\footnote ixoRegOpenKey}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegOpenKey Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation sets the registry key to use in subsequent operations using registry
 keys.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Root key: (integer)\par\li360
{\f1 0, rrkClassesRoot:  HKEY_CLASSES_ROOT}\line
{\f1 1, rrkCurrentUser:  HKEY_CURRENT_USER}\line
{\f1 2, rrkLocalMachine: HKEY_LOCAL_MACHINE}\line
{\f1 3, rrkUsers:        HKEY_USERS}\par\li180
{\f1 Field 2: } Registry key (non-localized text?)\line
{\f1 Field 3: } IMsiData object containing "self-relative" Win32 security descriptor.  Empty provides no security.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
This operation only sets the value to use in future operations. It doesn't attempt
 to open or read the specified registry key.
\page

#{\footnote Operation_ixoRegAddValue}
${\footnote ixoRegAddValue Operation}
+{\footnote Operation:ixoRegAddValue}
K{\footnote ixoRegAddValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegAddValue Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Write a value to the registry key opened with
 {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Value name (non-localized text?)\line
{\f1 Field 2: } Value data (localized text?)\line
The value data is a string. The following registry types are supported - \line
{\f1 REG_DWORD: } The string represents a decimal number and is prefixed by {\b # }. \line
{\f1 REG_BINARY: } The string represents a binary sequence and is prefixed by {\b #x }. \line
{\f1 REG_EXPAND_SZ: } The string represents an expandable string and is prefixed by {\b #% }. \line
{\f1 REG__SZ: } The string represents the string to be written. If the string value begins with # then it is prefixed by another {\b # }. \line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Registry key (non-localized text?)\line
{\f1 Field 2: } Value name (non-localized text?)\line
{\f1 Field 3: } Value data (localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 idbgOpOutOfSequence, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegRemoveValue}
${\footnote ixoRegRemoveValue Operation}
+{\footnote Operation:ixoRegRemoveValue}
K{\footnote ixoRegRemoveValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegRemoveValue Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Deletes a value from the registry key opened with
 {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Value name (non-localized text?)\line
{\f1 Field 2: } Optional value data (localized text?)\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Registry key (non-localized text?)\line
{\f1 Field 2: } Value name (non-localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegRemoveKey}
${\footnote ixoRegRemoveKey Operation}
+{\footnote Operation:ixoRegRemoveKey}
K{\footnote ixoRegRemoveKey}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegRemoveKey Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Deletes an key and all its values/ subkeys from the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Registry key (non-localized text?)
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Registry key (non-localized text?)\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 idbgOpOutOfSequence, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegCreateKey}
${\footnote ixoRegCreateKey Operation}
+{\footnote Operation:ixoRegCreateKey}
K{\footnote ixoRegCreateKey}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegCreateKey Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Creates a key, if absent.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Registry key (non-localized text?)\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 idbgOpOutOfSequence, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegSelfReg}
${\footnote ixoRegSelfReg Operation}
+{\footnote Operation:ixoRegSelfReg}
K{\footnote ixoRegSelfReg}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegSelfReg Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Calls the self registration function of a module.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Module file name. File is assumed to exist in the folder set by the
 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?)\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Module name (localized text?)\line
{\f1 Field 2: } Folder containing module (localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 idbgOpOutOfSequence,  MB_OK  }\line
{\f1 imsgSelfRegModulesFailed, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegSelfUnreg}
${\footnote ixoRegSelfUnreg Operation}
+{\footnote Operation:ixoRegSelfUnreg}
K{\footnote ixoRegSelfUnreg}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegSelfUnreg Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Calls the self unregistration function of a module.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Module file name. File is assumed to exist in the folder set by the
 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?)\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Module name (localized text?)\line
{\f1 Field 2: } Folder containing module (localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 idbgOpOutOfSequence,  MB_OK  }\line
{\f1 imsgSelfUnregModulesFailed, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoIniWriteRemoveValue}
${\footnote ixoIniWriteRemoveValue Operation}
+{\footnote Operation:ixoIniWriteRemoveValue}
K{\footnote ixoIniWriteRemoveValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoIniWriteRemoveValue Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Writes or removes a value from a .INI file.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } .INI section to modify (non-localized text)\line
{\f1 Field 2: } .INI key to modify (non-localized text)\line
{\f1 Field 3: } Value to write. This value is ignored when the Action
 parameter is iifIniRemoveLine.\line
{\f1 Field 4: } Action to take. One of the following values:
\line{\f1  iifIniAddLine    =0 }- Creates/Updates .INI entry
\line{\f1  iifIniCreateLine =1 }- Creates .INI entry only if absent
\line{\f1  iifIniRemoveLine =2 }- Deletes .INI entry
\line{\f1  iifIniAddTag     =3 }- Creates/ Appends a new comma separated tag(value) to a .INI entry
\line{\f1  iifIniRemoveTag  =4 }- Deletes a tag from a .INI entry
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after the {\uldb ixoIniFilePath}{\v Operation_ixoIniFilePath}
 operation.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } .INI file name\line
{\f1 Field 2: } .INI section\line
{\f1 Field 3: } .INI key\line
{\f1 Field 4: } Value
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoIniFilePath}
${\footnote ixoIniFilePath Operation}
+{\footnote Operation:ixoIniFilePath}
K{\footnote ixoIniFilePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoIniFilePath Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Specifies the .INI file to modify in subsequent
 {\uldb ixoIniWriteRemoveValue}{\v Operation_ixoIniWriteRemoveValue} operations.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } .INI file name.\line
{\f1 Field 2: } Folder containing .INI file.  This value may be left NULL to use the
 Windows directory.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!!To be documented!!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoPatchApply}
${\footnote ixoPatchApply Operation}
+{\footnote Operation:ixoPatchApply}
K{\footnote ixoPatchApply}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoPatchApply Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Applies a patch to an existing file.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Identifier for patch in the cabinet file set by
 {\uldb ixoChangeMedia}{\v Operation_ixoChangeMedia}.\line
{\f1 Field 2: } Name of target file to patch. Either a full path or the name of a file in the folder set by
 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.\line
{\f1 Field 3: } Size of patch file.\line
{\f1 Field 4: } Size of target file.\line
{\f1 Field 5: } Bytes per tick of progress messages.\line
{\f1 Field 6: } Boolean, always set to 1.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be after the {\uldb ixoFileCopy}{\v Operation_ixoFileCopy} operation for the target file.
\par\li0\fi0{\b Progress Notifications}\par\li180
Same as {\uldb ixoFileCopy}{\v Operation_ixoFileCopy}.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoPatchRegister}
${\footnote ixoPatchRegister Operation}
+{\footnote Operation:ixoPatchRegister}
K{\footnote ixoPatchRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoPatchRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers a patch package with a product.  This registration is used during subsequent configurations
 of the product to find the patch package.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } GUID representing this particular patch package.\line
{\f1 Field 2: } Name of patch package.\line
{\f1 Field 3: } Source list for patch package.  Same format as the SOURCELIST property.\line
{\f1 Field 4: } List of transforms from the patch package that are actually used for this product.
 Same format as the TRANSFORMS property.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoPatchUnregister}
${\footnote ixoPatchUnregister Operation}
+{\footnote Operation:ixoPatchUnregister}
K{\footnote ixoPatchUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoPatchUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters a patch package.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } GUID representing this particular patch package.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoPatchCache}
${\footnote ixoPatchCache Operation}
+{\footnote Operation:ixoPatchCache}
K{\footnote ixoPatchCache}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoPatchCache Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Copies a patch package to the %windows%\installer directory for future use during maintenance mode installs
 of the patched product.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } GUID representing this particular patch package.\line
{\f1 Field 2: } Path to the patch package to cache.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoDialogInfo}
${\footnote ixoDialogInfo Operation}
+{\footnote Operation:ixoDialogInfo}
K{\footnote ixoDialogInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoDialogInfo Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation dispatches an {\uldb imtCommonData}{\v MsiMessage_Message}
 message with the parameters passed to it.
\par\li0\fi0{\b Parameters:}\par\li180
Parameters to dispatch in imtCommonData message
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
This operation should be executed before any operations sending messages to the UI.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRollbackInfo}
${\footnote ixoRollbackInfo Operation}
+{\footnote Operation:ixoRollbackInfo}
K{\footnote ixoRollbackInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRollbackInfo Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Passes rollback information to the script executor.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Reserved\line
{\f1 Field 2: } Rollback action title. Passed in field 1 of ActionStart message
 when performing rollback.\line
{\f1 Field 3: } Rollback action description. Passed in field 2 of ActionStart message
 when performing rollback.\line
{\f1 Field 4: } Rollback action data template. Passed in field 3 of ActionStart message
 when performing rollback.\line
{\f1 Field 5: } Rollback cleanup action title. Passed in field 1 of ActionStart message
 when removing backup files.\line
{\f1 Field 6: } Rollback cleanup action description. Passed in field 2 of ActionStart message
 when removing backup files.\line
{\f1 Field 7: } Rollback cleanup action data template. Passed in field 3 of ActionStart message
 when removing backup files.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoDisableRollback}
${\footnote ixoDisableRollback Operation}
+{\footnote Operation:ixoDisableRollback}
K{\footnote ixoDisableRollback}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoDisableRollback Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation disables rollback by stopping rollback processing for the script
 and marking the current rollback script to not run.
\par\li0\fi0{\b Parameters:}\par\li180
None.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoUpdateEstimatedSize}
${\footnote ixoUpdateEstimatedSize Operation}
+{\footnote Operation:ixoUpdateEstimatedSize}
K{\footnote ixoUpdateEstimatedSize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
UpdateEstimatedSize Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation updates the EstimatedSize value under the Product's Uninstall key.  This value
 represents the estimate amount of disk space, in KB, that the application is currently
 consuming on the user's system.
\par\li0\fi0{\b Parameters:}\par\li180
None.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoInstallProtectedFiles}
${\footnote ixoInstallProtectedFiles Operation}
+{\footnote Operation:ixoInstallProtectedFiles}
K{\footnote ixoInstallProtectedFiles}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
InstallProtectedFiles Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation scans the internal "file status" cache for any files that were scheduled for installation by InstallFiles, MoveFiles, etc.
 yet couldn't be installed because they are on the Win2000 System File Protection list.  InstallProtectedFiles then calls
 the Win2000 API SfcInstallProtectedFiles to actually install these files.
\par\li0\fi0{\b Parameters:}\par\li180
None.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegAddRunOnceEntry}
${\footnote ixoRegAddRunOnceEntry Operation}
+{\footnote Operation:ixoRegAddRunOnceEntry}
K{\footnote ixoRegAddRunOnceEntry}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegAddRunOnceEntry Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation writes a command to the per-machine RunOnce registry key.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Name of the RunOnce value.\line
{\f1 Field 1: } Command-line to be run at next logon.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFontRegister}
${\footnote ixoFontRegister Operation}
+{\footnote Operation:ixoFontRegister}
K{\footnote ixoFontRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFontRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers a font with the system.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Font title (localized text?)\line
{\f1 Field 2: } Font file name. File is assumed to exist in the folder set by the
 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation, or in the default
 font folder if ixoSetTargetFolder has not been executed since the last
 {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation. (localized text?)
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following field:\par\li360
{\f1 Field 1: } Font title (localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpRegFont, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFontUnregister}
${\footnote ixoFontUnregister Operation}
+{\footnote Operation:ixoFontUnregister}
K{\footnote ixoFontUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFontUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters a font with the system.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Font title (localized text?)\line
{\f1 Field 2: } Font file name. Not used by this operation.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Font title (localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 idbgOpOutOfSequence,  MB_OK  }\line
{\f1 imsgOpUnregFont, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoResourceUpdate}
${\footnote ixoResourceUpdate Operation}
+{\footnote Operation:ixoResourceUpdate}
K{\footnote ixoResourceUpdate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoResourceUpdate Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Obsolete.  No longer supported.
\page

#{\footnote Operation_ixoFileBindImage}
${\footnote ixoFileBindImage Operation}
+{\footnote Operation:ixoFileBindImage}
K{\footnote ixoFileBindImage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFileBindImage Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Binds and executable image.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } File name. File is assumed to exist in the folder set by the
 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?)\line
{\f1 Field 2: } Paths. A list of ; delimited paths that represent
 the paths to be searched for the import DLLS.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } File name (localized text?)\line
{\f1 Field 2: } Folder containing file (localized text?)
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 idbgOpOutOfSequence,  MB_OK  }\line
!! Others to be documented !!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComponentConfigure}
${\footnote ixoComponentConfigure Operation}
+{\footnote Operation:ixoComponentConfigure}
K{\footnote ixoComponentConfigure}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComponentConfigure Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
{\b Not yet implemented. }
\par\li0\fi0{\b Parameters:}\par\li180
!!To be documented!!
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
!!What operations must be executed before this one??!! 
\par\li0\fi0{\b Progress Notifications}\par\li180
!!Are any ActionData or Progress messages sent? What is sent in the ActionData messages??!! 
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!! to be documented !!
\par\li0\fi0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote Operation_ixoSummaryInfoUpdate}
${\footnote ixoSummaryInfoUpdate Operation}
+{\footnote Operation:ixoSummaryInfoUpdate}
K{\footnote ixoSummaryInfoUpdate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSummaryInfoUpdate Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation updates the {\uldb Summary Information Stream}{\v _msi_Summary_Information_Stream@msi.hlp}
 of the Msi package. This operation is normally used
 during a network install.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Package. Full path to the .msi package.\line
{\f1 Field 2: } Last update. This value is used to update the
 {\uldb Last Saved Time/Date Summary Property}{\v _msi_Last_Saved_Time_Date_Summary_Property@msi.hlp}.
 Not currently set.\line
{\f1 Field 3: } Last author. UserName of user performing install. Used to update the
 {\uldb Last Saved By Summary Property}{\v _msi_Last_Saved_By_Summary_Property@msi.hlp}.\line
{\f1 Field 4: } Install date. The time the network image was created, usually the current date and time.
 This is an integer in MsiDate format. This value is used to update the
 {\uldb Last Printed Summary Property}{\v _msi_Last_Printed_Property@msi.hlp}.\line
{\f1 Field 5: } Source type. Integer value specifying the source type of the image. Used to update the
 {\uldb MSI Source Type Summary Property}{\v _msi_MSI_Source_Type_Summary_Property@msi.hlp}.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after the Msi package has been copied to the network image.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
!! to be documented !!
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoReserved6}
${\footnote ixoReserved6 Operation}
+{\footnote Operation:ixoReserved6}
K{\footnote ixoReserved6}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoReserved6 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Reserved for future use.
\page

#{\footnote Operation_ixoPackageCodePublish}
${\footnote ixoPackageCodePublish Operation}
+{\footnote Operation:ixoPackageCodePublish}
K{\footnote ixoPackageCodePublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoPackageCodePublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Publishes the package code. Used by patching/upgrades to republish the package code
 when the package changes.
\par\li0\fi0{\b Parameters:}\par\li180
This operation takes 1 argument.\line
{\f1 Field 1: } Package key. The package GUID.\line
...\line
...\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProductPublishUpdate}
${\footnote ixoProductPublishUpdate Operation}
+{\footnote Operation:ixoProductPublishUpdate}
K{\footnote ixoProductPublishUpdate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductPublishUpdate Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Re-publishes the product name and version.  Used during QFE-style patches and upgrades.
\par\li0\fi0{\b Parameters:}\par\li180
This operation takes 1 argument.\line
None.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoUpgradeCodePublish}
${\footnote ixoUpgradeCodePublish Operation}
+{\footnote Operation:ixoUpgradeCodePublish}
K{\footnote ixoUpgradeCodePublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoUpgradeCodePublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Publishes the product code under the appropriate Upgrade Code key.
\par\li0\fi0{\b Parameters:}\par\li180
This operation takes 1 argument.\line
{\f1 Field 1: } Upgrade code. The upgrade code GUID.\line
...\line
...\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoUpgradeCodeUnpublish}
${\footnote ixoUpgradeCodeUnpublish Operation}
+{\footnote Operation:ixoUpgradeCodeUnpublish}
K{\footnote ixoUpgradeCodeUnpublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoUpgradeCodeUnpublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unpublishes the product code under the appropriate Upgrade Code key.
\par\li0\fi0{\b Parameters:}\par\li180
This operation takes 1 argument.\line
{\f1 Field 1: } Upgrade code. The upgrade code GUID.\line
...\line
...\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProductPublish}
${\footnote ixoProductPublish Operation}
+{\footnote Operation:ixoProductPublish}
K{\footnote ixoProductPublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductPublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Publishes the product information with the configuration manager.
\par\li0\fi0{\b Parameters:}\par\li180
This operation takes 1 or more variable number of arguments.\line
{\f1 Field 1: } Package key. The package GUID.\line
{\f1 Field 2: } Transform name 1. The transform name.\line
{\f1 Field 3: } Transform data 1. The transform stream.\line
{\f1 Field 4: } Transform name 2. The transform name.\line
{\f1 Field 5: } Transform data 2. The transform stream.\line
...\line
...\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
The transforms are cached in the %USERPROFILE%\MSI folder.
\page

#{\footnote Operation_ixoProductUnpublish}
${\footnote ixoProductUnpublish Operation}
+{\footnote Operation:ixoProductUnpublish}
K{\footnote ixoProductUnpublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductUnpublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Removes the published product information from the configuration manager.
\par\li0\fi0{\b Parameters:}\par\li180
This operation takes 1 or more variable number of arguments.\line
{\f1 Field 1: } Package key. The package GUID.\line
{\f1 Field 2: } Transform name 1. The transform name.\line
{\f1 Field 3: } Transform data 1. The transform stream.\line
{\f1 Field 4: } Transform name 2. The transform name.\line
{\f1 Field 5: } Transform data 2. The transform stream.\line
...\line
...\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
The transforms cached in the %USERPROFILE%\MSI folder are removed.
\page

#{\footnote Operation_ixoProductPublishClient}
${\footnote ixoProductPublishClient Operation}
+{\footnote Operation:ixoProductPublishClient}
K{\footnote ixoProductPublishClient}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductPublishClient Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
registers the client for the product.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Parent product key.\line
{\f1 Field 2: } Relative child package path.\line
{\f1 Field 3: } The child disk id.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoProductUnpublishClient}
${\footnote ixoProductUnpublishClient Operation}
+{\footnote Operation:ixoProductUnpublishclient}
K{\footnote ixoProductUnpublishClient}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoProductUnpublishClient Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
unregisters the client for the product..
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Parent product key.\line
{\f1 Field 2: } Relative child package path.\line
{\f1 Field 3: } The child disk id.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page


#{\footnote Operation_ixoAdvtFlagsUpdate}
${\footnote ixoAdvtFlagsUpdate Operation}
+{\footnote Operation:ixoAdvtFlagsUpdate}
K{\footnote ixoAdvtFlagsUpdate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoAdvtFlagsUpdate Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Publishes the Advertisement flags for the product under the appropriate Product Code key.
\par\li0\fi0{\b Parameters:}\par\li180
This operation takes 1 argument.\line
{\f1 Field 1: } Flags. The advertisement flags - records whether the OLE data, Qualified Components data and the Shortcuts have been created.\line
...\line
...\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoFeaturePublish}
${\footnote ixoFeaturePublish Operation}
+{\footnote Operation:ixoFeaturePublish}
K{\footnote ixoFeaturePublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFeaturePublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Publishes the Feature composition (the constituent components) with the configuration manager.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } FeatureID. The feature key.\line
{ \f1 Field 2: } FeatureID (parent). Optional parent of the feature.\line
{ \f1 Field 3: } Absent. Set to 1 if the feature, being published, has been set to the Absent state.\line
{\f1 Field 4: } ComponenID. The component ID of the first component of the feature.\line
{\f1 Field 5: } ComponenID. The component ID of the second component of the feature.\line
...\line
...\line
...\line
NOTE: This is a variable length record operation, the size depending on the number of components 
of the feature.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
{\f1 Field 2: } Feature key\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
For features that are selected to be absent, the component list begins with the special character 
'~' as Field 3. This is a Beta1 implementation that is up for revision in Beta2.
\page

#{\footnote Operation_ixoFeatureUnpublish}
${\footnote ixoFeatureUnpublish Operation}
+{\footnote Operation:ixoFeatureUnpublish}
K{\footnote ixoFeatureUnpublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoFeatureUnpublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Removes the published Feature composition (the constituent components) from the configuration manager.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } FeatureID. The feature key.\line
{ \f1 Field 2: } FeatureID (parent). Optional parent of the feature.\line
{ \f1 Field 3: } Absent. Set to 1 if the feature, being published, has been set to the Absent state.\line
{\f1 Field 4: } ComponenID. The component ID of the first component of the feature.\line
{\f1 Field 5: } ComponenID. The component ID of the second component of the feature.\line
...\line
...\line
...\line
NOTE: This is a variable length record operation, the size depending on the number of components 
of the feature.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
{\f1 Field 2: } Feature key\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComponentPublish}
${\footnote ixoComponentPublish Operation}
+{\footnote Operation:ixoComponentPublish}
K{\footnote ixoComponentPublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComponentPublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Publishes the component factory information (the darwin descriptor that provides the component) with the configuration manager. 
This is typically used for cross-product component usage.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The feature to which the component to be published belongs to.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component.\line
{\f1 Field 3: } ComponentId. The component id GUID (from the PublishComponent Table) under which the component is published.\line
{\f1 Field 4: } Qualifier. Optional. The Qualifier string that further defines the component (in addition to 
the ComponentId).\line
{\f1 Field 5: } AppData. Additional localizable data to be associated with the component.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
{\f1 Field 2: } Component ID\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComponentUnpublish}
${\footnote ixoComponentUnpublish Operation}
+{\footnote Operation:ixoComponentUnpublish}
K{\footnote ixoComponentUnpublish}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComponentUnpublish Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Removes the published component information from the configuration manager.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The feature to which the component to be published belongs to.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component.\line
{\f1 Field 3: } ComponentId. The component id GUID (from the PublishComponent Table) under which the component is published.\line
{\f1 Field 4: } Qualifier. Optional. The Qualifier string that further defines the component (in addition to 
the ComponentId).\line
{\f1 Field 5: } AppData. Additional localizable data to be associated with the component.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Product key\line
{\f1 Field 2: } Component ID\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoIconCreate}
${\footnote ixoIconCreate Operation}
+{\footnote Operation:ixoIconCreate}
K{\footnote ixoIconCreate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoIconCreate Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Creates an icon file on the system to be used for advertised extensions and shortcuts. The default location of 
the icon is <CSIDL_APPDATA Shell Folder>\\Microsoft\\Installer for user assigned apps on Win NT and <Windows Directory>\\Installer on Win95 or for 
machine assigned apps on Win NT. This may however be overridden by the MsiProcessAdvertiseScript API.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Icon Name. The name of the icon file to be created including the extension.\line
{\f1 Field 2: } Icon Data. The stream for the data for the icon file.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Icon name\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoIconRemove}
${\footnote ixoIconCreate Operation}
+{\footnote Operation:ixoIconRemove}
K{\footnote ixoIconRemove}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoIconRemove Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Removes an icon file on the system that was used for advertised extensions and shortcuts. The default location of 
the icon is <CSIDL_APPDATA Shell Folder>\\Microsoft\\Installer for user assigned apps on Win NT and <Windows Directory>\\Installer on Win95 or for 
machine assigned apps on Win NT. This may however be overridden by the MsiProcessAdvertiseScript API.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Icon Name. The name of the icon file created including the extension.\line
{\f1 Field 2: } Icon Data. The stream for the data for the icon file. This field is unused.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Icon name\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoShortcutCreate}
${\footnote ixoShortcutCreate Operation}
+{\footnote Operation:ixoShortcutCreate}
K{\footnote ixoShortcutCreate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoShortcutCreate Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Creates a shortcut.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Name. The shortcut name. \line
{\f1 Field 2: } Feature. The feature to which the shortcut belongs to. Is null for non-advertisable shortcuts. \line
{\f1 Field 3: } Component. The component id (from the Component Table) of the component whose key file is the shortcut target. 
Is null for non-advertisable shortcuts. \line
{\f1 Field 4: } FileName. The (key) file of the component for advertisable shortcuts. The target for non-advertisable shortcuts. \line
{\f1 Field 5: } Arguments. The shortcut arguments. \line
{\f1 Field 6: } WorkingDir. The working directory. \line
{\f1 Field 7: } Icon. Icon file. For non-advertised shortcuts this is optionally a full file path. For 
advertised shortcuts this has to be the name of the file created using the 
{\uldb ixoIconCreate}{\v Operation_ixoIconCreate} operation.\line
{\f1 Field 8: } IconIndex. The icon index (integer)\line
{\f1 Field 9: } Hotkey. See help on Shortcut table for more details.\line
{\f1 Field 10: } Show command. See help on Shortcut table for more details\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be exectued after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. 
In the advertise mode must be executed after the {\uldb ixoIconCreate}{\v Operation_ixoIconCreate} 
operation.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Shortcut name\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpShortcutCreate, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoShortcutRemove}
${\footnote ixoShortcutRemove Operation}
+{\footnote Operation:ixoShortcutRemove}
K{\footnote ixoShortcutRemove}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoShortcutRemove Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Removes a shortcut
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Shortcut name\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must be exectued after the {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}
 operation.
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Shortcut name\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
{\f1 imsgOpShortcutRemove, MB_OK  }
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoRegAppIdInfoRegister}
${\footnote ixoRegAppIdInfoRegister Operation}
+{\footnote Operation:ixoRegAppIdInfoRegister}
K{\footnote ixoRegAppIdInfoRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegAppIdInfoRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers class info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } UNFINISHED
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } UNFINISHED\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegAppIdInfoRegister64}
${\footnote ixoRegAppIdInfoRegister64 Operation}
+{\footnote Operation:ixoRegAppIdInfoRegister64}
K{\footnote ixoRegAppIdInfoRegister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegAppIdInfoRegister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers class info with the registry for 64-bit components.  Behaviour is identic with ixoRegAppIdInfoRegister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegAppIdInfoUnregister}
${\footnote ixoRegClassAppIdUnregister Operation}
+{\footnote Operation:ixoRegAppIdInfoUnregister}
K{\footnote ixoRegAppIdInfoUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegAppIdInfoUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters class info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } UNFINISHED
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } UNFINISHED\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegAppIdInfoUnregister64}
${\footnote ixoRegAppIdInfoUnregister64 Operation}
+{\footnote Operation:ixoRegAppIdInfoUnregister64}
K{\footnote ixoRegAppIdInfoUnregister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegAppIdInfoUnregister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters class info with the registry for 64-bit components.  Behaviour is identic with ixoRegAppIdInfoUnregister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 64-bit OLE/COM hive.
\page




#{\footnote Operation_ixoRegClassInfoRegister}
${\footnote ixoRegClassInfoRegister Operation}
+{\footnote Operation:ixoRegClassInfoRegister}
K{\footnote ixoRegClassInfoRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegClassInfoRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers class info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The class server feature.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the class server.\line
{\f1 Field 3: } FileName. The (key) file of the component.\line
{\f1 Field 4: } ClsId. The GUID string of the class.\line
{\f1 Field 5: } ProgId. The ProgID string of the class.\line
{\f1 Field 6: } VIProgId. The version independant ProgID string of the class.optional.\line
{\f1 Field 7: } Description. The Description string. \line
{\f1 Field 8: } Context. The class context. One of \line
LocalServer\line
LocalServer32\line
InprocServer\line
InprocServer32\line
InprocHandler\line
InprocHandler32\line
{\f1 Field 9: } Insertable. Whether the class supports the Insertable key.\line
{\f1 Field 10: } AppID. <TBD>\line
{\f1 Field 11: } FileTypeMask. semicolon delimited file type masks for the class server.\line
{\f1 Field 12: } Icon. The name of the icon file created using the 
{\uldb ixoIconCreate}{\v Operation_ixoIconCreate} operation.\line
{\f1 Field 13: } IconIndex.The index of the icon within the icon file.\line
{\f1 Field 14: } DefInprocHandler. The default InprocHandler.Relevant only if the class context is LocalServer or LocalServer32. 
It is either a number or is the name of a "system" file. If it is a number is is interpreted as - \line
{\b 1 } - Use the system default for the 16 bit InprocHandler (ole2.dll used for InprocHandler).\line
{\b 2 } - Use the system default for the 32 bit InprocHandler (ole32.dll used for InprocHandler32).\line
{\b 3 } - Use the system default for both the 16 bit and 32 bit InprocHandler (ole2.dll used for InprocHandler, ole32.dll used for InprocHandler32).\line
If it is a name it is interpreted as the file to be used as the 32 bit InprocHandler (used for InprocHandler32).\line
{\f1 Field 15: } Argument. The argument to be used with the class server. Relevant only only if the class context is LocalServer or LocalServer32.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } CLSID\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegClassInfoRegister64}
${\footnote ixoRegClassInfoRegister64 Operation}
+{\footnote Operation:ixoRegClassInfoRegister64}
K{\footnote ixoRegClassInfoRegister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegClassInfoRegister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers class info with the registry.  Behaviour is identic with ixoRegClassInfoRegister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegClassInfoUnregister}
${\footnote ixoRegClassInfoUnregister Operation}
+{\footnote Operation:ixoRegClassInfoUnregister}
K{\footnote ixoRegClassInfoUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegClassInfoUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters class info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The class server feature.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the class server.\line
{\f1 Field 3: } FileName. The (key) file of the component.\line
{\f1 Field 4: } ClsId. The GUID string of the class.\line
{\f1 Field 5: } ProgId. The ProgID string of the class.\line
{\f1 Field 6: } VIProgId. The version independant ProgID string of the class.optional.\line
{\f1 Field 7: } Description. The Description string. \line
{\f1 Field 8: } Context. the class context. One of \line
LocalServer\line
LocalServer32\line
InprocServer\line
InprocServer32\line
InprocHandler\line
InprocHandler32\line
{\f1 Field 9: } Insertable. Whether the class supports the Insertable key.\line
{\f1 Field 10: } AppID. <TBD>\line
{\f1 Field 11: } FileTypeMask. semicolon delimited file type masks for the class server.\line
{\f1 Field 12: } Icon. The name of the icon file created using the 
{\uldb ixoIconCreate}{\v Operation_ixoIconCreate} operation.\line
{\f1 Field 13: } IconIndex.The index of the icon within the icon file.\line
{\f1 Field 14: } DefInprocHandler. The default InprocHandler.Relevant only if the class context is LocalServer or LocalServer32. 
It is either a number or is the name of a "system" file. If it is a number is is interpreted as - \line
{\b 1 } - Use the system default for the 16 bit InprocHandler (ole2.dll used for InprocHandler).\line
{\b 2 } - Use the system default for the 32 bit InprocHandler (ole32.dll used for InprocHandler32).\line
{\b 3 } - Use the system default for both the 16 bit and 32 bit InprocHandler (ole2.dll used for InprocHandler, ole32.dll used for InprocHandler32).\line
If it is a name it is interpreted as the file to be used as the 32 bit InprocHandler (used for InprocHandler32).\line
{\f1 Field 15: } Argument. The argument to be used with the class server. Relevant only only if the class context is LocalServer or LocalServer32.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } CLSID\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegClassInfoUnregister64}
${\footnote ixoRegClassInfoUnregister64 Operation}
+{\footnote Operation:ixoRegClassInfoUnregister64}
K{\footnote ixoRegClassInfoUnregister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegClassInfoUnregister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters class info with the registry.  Behaviour is identic with ixoRegClassInfoUnregister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegMIMEInfoRegister}
${\footnote ixoRegMIMEInfoRegister Operation}
+{\footnote Operation:ixoRegMIMEInfoRegister}
K{\footnote ixoRegMIMEInfoRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegMIMEInfoRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers the MIME info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } ContentType. The Content type string.\line
{\f1 Field 2: } Extension. The extension string (w/o the '.').\line
{\f1 Field 3: } CLSID. The optional GUID string of the class.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } ContentType\line
{\f1 Field 2: } Extension\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegMIMEInfoRegister64}
${\footnote ixoRegMIMEInfoRegister64 Operation}
+{\footnote Operation:ixoRegMIMEInfoRegister64}
K{\footnote ixoRegMIMEInfoRegister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegMIMEInfoRegister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers the MIME info with the registry.  Behaviour is identic with ixoRegMIMEInfoRegister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegMIMEInfoUnregister}
${\footnote ixoRegMIMEInfoUnregister Operation}
+{\footnote Operation:ixoRegMIMEInfoUnregister}
K{\footnote ixoRegMIMEInfoUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegMIMEInfoUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters the MIME info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } ContentType. The Content type string.\line
{\f1 Field 2: } Extension. The extension string (w/o the '.').\line
{\f1 Field 3: } CLSID. The optional GUID string of the class.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } ContentType\line
{\f1 Field 2: } Extension\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 32-bit OLE/COM hive.
\page


#{\footnote Operation_ixoRegMIMEInfoUnregister64}
${\footnote ixoRegMIMEInfoUnregister64 Operation}
+{\footnote Operation:ixoRegMIMEInfoUnregister64}
K{\footnote ixoRegMIMEInfoUnregister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegMIMEInfoUnregister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters the MIME info with the registry.  Behaviour is identic with ixoRegMIMEInfoUnregister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegProgIdInfoRegister}
${\footnote ixoRegProgIdInfoRegister Operation}
+{\footnote Operation:ixoRegProgIdInfoRegister}
K{\footnote ixoRegProgIdInfoRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegProgIdInfoRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers the ProgId info with the registry.

\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } ProgId. The Program Identifier string.\line
{\f1 Field 2: } ClsId. The optional GUID string of the class.\line
{\f1 Field 3: } Extension. The extension associated with the progid.\line
{\f1 Field 4: } Description. The ProgId Description.\line
{\f1 Field 5: } Icon. The icon associated with the ProgId.\line
{\f1 Field 6: } IconIndex. The icon index.\line
{\f1 Field 7: } VIProgId. The optional version independant prog id.\line
{\f1 Field 8: } VIProgIdDescription. The description for the version independant prog id.\line
{\f1 Field 9: } Insertable. Set to 1 if the corr. object is insertable.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } ProgId\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegProgIdInfoRegister64}
${\footnote ixoRegProgIdInfoRegister64 Operation}
+{\footnote Operation:ixoRegProgIdInfoRegister64}
K{\footnote ixoRegProgIdInfoRegister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegProgIdInfoRegister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers the ProgId info with the registry.  Behaviour is identic with ixoRegProgIdInfoRegister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegProgIdInfoUnregister}
${\footnote ixoRegProgIdInfoUnregister Operation}
+{\footnote Operation:ixoRegProgIdInfoUnregister}
K{\footnote ixoRegProgIdInfoUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegProgIdInfoUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters the ProgId info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } ProgId. The Program Identifier string.\line
{\f1 Field 2: } ClsId. The optional GUID string of the class.\line
{\f1 Field 3: } Extension. The extension associated with the progid.\line
{\f1 Field 4: } Description. The ProgId Description.\line
{\f1 Field 5: } Icon. The icon associated with the ProgId.\line
{\f1 Field 6: } IconIndex. The icon index.\line
{\f1 Field 7: } VIProgId. The optional version independant prog id.\line
{\f1 Field 8: } VIProgIdDescription. The description for the version independant prog id.\line
{\f1 Field 9: } Insertable. Set to 1 if the corr. object is insertable.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } ProgId\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegProgIdInfoUnregister64}
${\footnote ixoRegProgIdInfoUnregister64 Operation}
+{\footnote Operation:ixoRegProgIdInfoUnregister64}
K{\footnote ixoRegProgIdInfoUnregister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegProgIdInfoUnregister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters the ProgId info with the registry.  Behaviour is identic with ixoRegProgIdInfoUnregister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 64-bit OLE/COM hive.
\page


#{\footnote Operation_ixoRegExtensionInfoRegister}
${\footnote ixoRegExtensionInfoRegister Operation}
+{\footnote Operation:ixoRegExtensionInfoRegister}
K{\footnote ixoRegExtensionInfoRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegExtensionInfoRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers the Extension info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The extension server feature.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the extension server.\line
{\f1 Field 3: } FileName. The (key) file of the component.\line
{\f1 Field 4: } Extension. The extension.\line
{\f1 Field 5: } ProgId. The optional progID.\line
{\f1 Field 6: } ShellNew. The value name under the ShellNew key.\line
{\f1 Field 7: } ShellNewValue. The value.\line
{\f1 Field 8: } ContentType. The MIME Content Type to be associated with the extension.\line
{\f1 Field 9: } Order. The number of verbs associated with the extension that need to be in the order specified (they are at the end of the sequence of verbs).\line
{\f1 Field 10: } Verb1. The first verb.\line
{\f1 Field 11: } Command1. The command associated with the first verb.\line
{\f1 Field 12: } Arguments1. The arguments to be passed to the server when invoking the first verb.\line
{\f1 Field 13: } Verb2. The second verb.\line
{\f1 Field 14: } Command2.  The command associated with the second verb.\line
{\f1 Field 15: } Arguments2.  The arguments to be passed to the server when invoking the second verb.\line
...\line
...\line
...\line
NOTE: This is a variable length record operation, the size depending on the number of verbs (may be 0 or more) 
supported by the extension server.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Extension\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegExtensionInfoRegister64}
${\footnote ixoRegExtensionInfoRegister64 Operation}
+{\footnote Operation:ixoRegExtensionInfoRegister64}
K{\footnote ixoRegExtensionInfoRegister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegExtensionInfoRegister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers the Extension info with the registry.  Behaviour is identic with ixoRegExtensionInfoRegister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will write info into the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegExtensionInfoUnregister}
${\footnote ixoRegExtensionInfoUnregister Operation}
+{\footnote Operation:ixoRegExtensionInfoUnregister}
K{\footnote ixoRegExtensionInfoUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegExtensionInfoUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters the Extension info with the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The extension server feature.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the extension server.\line
{\f1 Field 3: } FileName. The (key) file of the component.\line
{\f1 Field 4: } Extension. The extension.\line
{\f1 Field 5: } ProgId. The optional progID.\line
{\f1 Field 6: } ShellNew. The value name under the ShellNew key.\line
{\f1 Field 7: } ShellNewValue. The value.\line
{\f1 Field 8: } ContentType. The MIME Content Type to be associated with the extension.\line
{\f1 Field 9: } Order. The number of verbs associated with the extension that need to be in the order specified (they are at the end of the sequence of verbs).\line
{\f1 Field 10: } Verb1. The first verb.\line
{\f1 Field 11: } Command1. The command associated with the first verb.\line
{\f1 Field 12: } Arguments1. The arguments to be passed to the server when invoking the first verb.\line
{\f1 Field 13: } Verb2. The second verb.\line
{\f1 Field 14: } Command2.  The command associated with the second verb.\line
{\f1 Field 15: } Arguments2.  The arguments to be passed to the server when invoking the second verb.\line
...\line
...\line
...\line
NOTE: This is a variable length record operation, the size depending on the number of verbs (may be 0 or more) 
supported by the extension server.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Extension\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 32-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegExtensionInfoUnregister64}
${\footnote ixoRegExtensionInfoUnregister64 Operation}
+{\footnote Operation:ixoRegExtensionInfoUnregister64}
K{\footnote ixoRegExtensionInfoUnregister64}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegExtensionInfoUnregister64 Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters the Extension info with the registry.  Behaviour is identic with ixoRegExtensionInfoUnregister.
\par\li0\fi0{\b Remarks}\par\li180
On 64-bit operating systems will remove info from the 64-bit OLE/COM hive.
\page

#{\footnote Operation_ixoRegisterBackupFile}
${\footnote ixoRegisterBackupFile Operation}
+{\footnote Operation:ixoRegisterBackupFile}
K{\footnote ixoRegisterBackupFile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoRegisterBackupFile Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Marks a file as a backup file that may be removed with the rollback script. No execution is performed
 with this operation. This operation is used when removing rollback scripts and backup files.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Full path of file.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
None.
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
This operation is only relevant in a rollback script.
\page

#{\footnote Operation_ixoTypeLibraryRegister}
${\footnote ixoTypeLibraryRegister Operation}
+{\footnote Operation:ixoTypeLibraryRegister}
K{\footnote ixoTypeLibraryRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoTypeLibraryRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers/ advertises a type library.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The type library server feature.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the type library.\line
{\f1 Field 3: } FileName. The (key) file of the component.\line
{\f1 Field 4: } LibID. The UUID for the type library.\line
{\f1 Field 5: } Version. the short integer version number.\line
{\f1 Field 6: } Description. The description of the type library.\line
{\f1 Field 7: } Language. The language of the type library.\line
{\f1 Field 8: } Help Path. This the path of the help file for the type library.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } LibID\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoTypeLibraryUnregister}
${\footnote ixoTypeLibraryUnregister Operation}
+{\footnote Operation:ixoTypeLibraryUnregister}
K{\footnote ixoTypeLibraryUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoTypeLibraryUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters/ unadvertises a type library.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } Feature. The type library server feature.\line
{\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the type library.\line
{\f1 Field 3: } FileName. The (key) file of the component.\line
{\f1 Field 4: } LibID. The UUID for the type library.\line
{\f1 Field 5: } Version. the short integer version number.\line
{\f1 Field 6: } Description. The description of the type library.\line
{\f1 Field 7: } Language. The language of the type library.\line
{\f1 Field 8: } Help Path. This the path of the help file for the type library.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } LibID\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoCustomActionSchedule}
${\footnote ixoCustomActionSchedule Operation}
+{\footnote Operation:ixoCustomActionSchedule}
K{\footnote ixoCustomActionSchedule}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoCustomActionSchedule Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Executes a scheduled custom action using information stored in the
 script record, except passes the record to the rollback script if
 it is a rollback or commit custom action.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }Action, name of action.\line
{\f1 Field 2: }ActionType, combination of icaXXX flags.\line
{\f1 Field 3: }Source. Information from Source column of CustomAction table.\line
{\f1 Field 4: }Target. Information from Target column of CustomAction table.\line
{\f1 Field 5: }CustomActionData. A string containing context information, set from property.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
The Source field will contain the action binary data if the custom action was
 stored within a database stream. The CustomActionData field is set with the value of the
 property named the same as the primary key in the CustomAction table entry.
\page

#{\footnote Operation_ixoCustomActionRollback}
${\footnote ixoCustomActionRollback Operation}
+{\footnote Operation:ixoCustomActionRollback}
K{\footnote ixoCustomActionRollback}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoCustomActionRollback Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Executes a rollback custom action upon failure of script execution,
 using information stored in the script record, passed over from the install script.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }Action, name of action.\line
{\f1 Field 2: }ActionType, combination of icaXXX flags.\line
{\f1 Field 3: }Source. Information from Source column of CustomAction table.\line
{\f1 Field 4: }Target. Information from Target column of CustomAction table.\line
{\f1 Field 5: }CustomActionData. A string containing context information, set from property.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
The Source field will contain the action binary data if the custom action was
 stored within a database stream. The CustomActionData field is set with the value of the
 property named the same as the primary key in the CustomAction table entry.
\page

#{\footnote Operation_ixoCustomActionCommit}
${\footnote ixoCustomActionCommit Operation}
+{\footnote Operation:ixoCustomActionCommit}
K{\footnote ixoCustomActionCommit}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoCustomActionCommit Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Executes a commit custom action upon successful completion of script execution,
 using information stored in the script record, passed over from the install script.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }Action, name of action.\line
{\f1 Field 2: }ActionType, combination of icaXXX flags.\line
{\f1 Field 3: }Source. Information from Source column of CustomAction table.\line
{\f1 Field 4: }Target. Information from Target column of CustomAction table.\line
{\f1 Field 5: }CustomActionData. A string containing context information, set from property.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
The Source field will contain the action binary data if the custom action was
 stored within a database stream. The CustomActionData field is set with the value of the
 property named the same as the primary key in the CustomAction table entry.
\page

#{\footnote Operation_ixoODBCDriverManager}
${\footnote ixoODBCInstallDriverManager Operation}
+{\footnote Operation:ixoODBCInstallDriverManager}
K{\footnote ixoODBCInstallDriverManager}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoODBCInstallDriverManager Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers the driver manager for the first MSI product to become a
 client of the ODBC driver manager component, or
 unregisters the driver manager of the current product is removing
 the last client of the ODBC driver manager component.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: } State: 1 to register, 2 to unregister.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must come after ixoFileCopy for manager files and before other ODBC ops on register.\line
Must come before ixoFileRemove on manager files and after other ODBC ops on unregister.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoODBCInstallDriver}
${\footnote ixoODBCInstallDriver Operation}
+{\footnote Operation:ixoODBCInstallDriver}
K{\footnote ixoODBCInstallDriver}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoODBCInstallDriver Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers an ODBC driver, configured with its set of attributes.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }DriverKey,  registered name of driver, ODBC term: description.\line
{\f1 Field 2: }Component,  component ID, used to check for existing clients.\line
{\f1 Field 3: }Folder,     location of driver.\line
{\f1 Field 4: }Attribute_, name of driver attribute, repeating pairs with value.\line
{\f1 Field 5: }Value_,     associated value for attribute in repeating pair.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must come after ixoFileCopy for driver files and after ixoODBCDriverManager register.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoODBCRemoveDriver}
${\footnote ixoODBCRemoveDriver Operation}
+{\footnote Operation:ixoODBCRemoveDriver}
K{\footnote ixoODBCRemoveDriver}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoODBCRemoveDriver Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Removes the registration for a driver.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }DriverKey,  registered name of driver, ODBC term: description.\line
{\f1 Field 2: }Component,  component ID, used to check for remaining clients.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must come before ixoFileRemove for driver files and before ixoODBCDriverManager unregister.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoODBCDataSource}
${\footnote ixoODBCDataSource Operation}
+{\footnote Operation:ixoODBCDataSource}
K{\footnote ixoODBCDataSource}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoODBCDataSource Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers an ODBC data source, associated with a particular driver,
 or unregisters an ODBC data source.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }DriverKey,    registered name of driver, ODBC term: description.\line
{\f1 Field 2: }Component,    component ID.\line
{\f1 Field 3: }Registration, SQL_ADD_DSN, SQL_ADD_SYS_DSN, SQL_REMOVE_DSN, SQL_REMOVE_SYS_DSN.\line
{\f1 Field 4: }Attribute_,   name of data source attribute, repeating pairs with value.\line
{\f1 Field 5: }Value_,       associated value for attribute in repeating pair.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must come after ixoODBCInstallDriver for associated driver on ADD.\line
Must come before ixoODBCRemoveDriver for associated driver on REMOVE.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoODBCInstallTranslator}
${\footnote ixoODBCInstallTranslator Operation}
+{\footnote Operation:ixoODBCInstallTranslator}
K{\footnote ixoODBCInstallTranslator}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoODBCInstallTranslator Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Registers an ODBC data translator.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }TranslatorKey,  registered name of translator, ODBC term: description.\line
{\f1 Field 2: }Component,  component ID, used to check for existing clients.\line
{\f1 Field 3: }Folder,     location of translator.\line
{\f1 Field 4: }Attribute_, name of translator attribute, repeating pairs with value.\line
{\f1 Field 5: }Value_,     associated value for attribute in repeating pair.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must come after ixoFileCopy for translator files and after ixoODBCDriverManager register.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoODBCRemoveTranslator}
${\footnote ixoODBCRemoveTranslator Operation}
+{\footnote Operation:ixoODBCRemoveTranslator}
K{\footnote ixoODBCRemoveTranslator}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoODBCRemoveTranslator Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Unregisters an ODBC data translator.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }TranslatorKey,  registered name of translator, ODBC term: description.\line
{\f1 Field 2: }Component,  component ID, used to check for remaining clients.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
Must come before ixoFileRemove for translator files and before ixoODBCDriverManager unregister.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoServiceControl}
${\footnote ixoServiceControl Operation}
+{\footnote Operation:ixoServiceControl}
K{\footnote ixoServiceControl}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoServiceControl Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Starts a service currently installed on the machine.   
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }MachineName. MachineName property to start the service on.\line
{\f1 Field 2: }Name.  Internal name of the service.  Does not includes slashes or spaces.\line
{\f1 Field 3: }Action. Bitfield.  1 = Start, 2 = Stop, 4 = <reserved>, 8 = Delete\line
{\f1 Field 3: }Wait.  Boolean for whether to wait for the service control event to complete.\line
{\f1 Field 4: }StartupArguments.  List of arguments, separated by nulls, with a double null at the end.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
ActionData record with the following fields:\par\li360
{\f1 Field 1: } Display name of the service.\line
{\f1 Field 2: } Internal name of the service.\line
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoServiceInstall}
${\footnote ixoServiceInstall Operation}
+{\footnote Operation:ixoServiceInstall}
K{\footnote ixoServiceInstall}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoServiceInstall Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Starts a service currently installed on the machine.   
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }Name.  Internal name of the service.  Does not includes slashes or spaces.\line
{\f1 Field 2: }DisplayName.  Display name of the service.\line
{\f1 Field 3: }ImagePath.  Full command line for invoking the service.\line
{\f1 Field 4: }ServiceType.  Type of service.\line
{\f1 Field 6: }StartType.  When to start service.\line
{\f1 Field 7: }ErrorControl.  severity if service fails to start.\line
{\f1 Field 8: }LoadOrderGroup.  Name of load ordering group.\line
{\f1 Field 9: }Dependencies.  Null delimited list of services on which this service depends.\line
{\f1 Field 10:}TagId.  Used only for rollback.  Tag for service start order.\line
{\f1 Field 11:}StartName.  User for the service to run as.\line
{\f1 Field 12:}Password.  Clear-text password for user specified in StartName.\line
{\f1 Field 13:}Description.  A description of the service. Displayed by the Services MMC snap-in. Win2K only\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoUpdateEnvironmentStrings}
${\footnote ixoUpdateEnvironmentStrings}
+{\footnote Operation:ixoUpdateEnvironmentStrings}
K{\footnote ixoUpdateEnvironmentStrings}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoUpdateEnvironmentStrings Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
This operation performs an update on the system environmental variables.  On Windows '95 these
occur in AutoExec.bat, on Windows NT they occur in the registry.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }Name.  Name of the variable to set.\line
{\f1 Field 2: }Value.  Value to set in the variable.\line
{\f1 Field 3: }Delimiter.  Separator between values, if the value is one of several.\line
{\f1 Field 4: }Action.  Bitfield specifying type of operation to perform:\line
\tab 2   Set a value\line
\tab 4   Set a value only if the variable is absent.\line
\tab 8   Remove the value from the variable.\line
\tab 16  Append the specified value to the named variable.\line
\tab 32  Prepend the specified value to named variable.\line
{\f1 Field 5: }AutoExec Path.  95 Only, ignored on NT.  Contains either the Windows Volume path, or
 content of the WIN95_ENVIRONMENT_TEST property.  This allows you to modify a file in a test
 directory rather than working on your primary file.
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Progress Notifications}\par\li180
None.
\par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180
None.
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComPlusRegister}
${\footnote ixoComPlusRegister Operation}
+{\footnote Operation:ixoComPlusRegister}
K{\footnote ixoComPlusRegister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComPlusRegister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Installs the COM+ application.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }AppID: The Application id guid.\line
{\f1 Field 2: }AplFileName: The name of the file that contains application configuration information.\line
{\f1 Field 3: }AppDir: The directory the application is installed to.\line
{\f1 Field 4: }AppType: Information from the ExpType column of the Complus table.\line
{\f1 Field 5: }InstallUsers: Whether to install the users of the application.\line
{\f1 Field 6: }RSN: Remote server name for proxy applications.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComPlusUnregister}
${\footnote ixoComPlusUnregister Operation}
+{\footnote Operation:ixoComPlusUnregister}
K{\footnote ixoComPlusUnregister}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComPlusUnregister Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Uninstalls the COM+ application.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }AppID: The Application id guid.\line
{\f1 Field 2: }AplFileName: The name of the file that contains application configuration information.\line
{\f1 Field 3: }AppDir: The directory the application is installed to.\line
{\f1 Field 4: }AppType: Information from the ExpType column of the Complus table.\line
{\f1 Field 5: }InstallUsers: Whether to install the users of the application.\line
{\f1 Field 6: }RSN: Remote server name for proxy applications.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComPlusRegisterMetaOnly}
${\footnote ixoComPlusRegisterMetaOnly Operation}
+{\footnote Operation:ixoComPlusRegisterMetaOnly}
K{\footnote ixoComPlusRegisterMetaOnly}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComPlusRegisterMetaOnly Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Not used - only a placeholder.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComPlusUnregisterMetaOnly}
${\footnote ixoComPlusUnregisterMetaOnly Operation}
+{\footnote Operation:ixoComPlusUnregisterMetaOnly}
K{\footnote ixoComPlusUnregisterMetaOnly}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComPlusUnregisterMetaOnly Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Not used - only a placeholder.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComPlusCommit}
${\footnote ixoComPlusCommit Operation}
+{\footnote Operation:ixoComPlusCommit}
K{\footnote ixoComPlusCommit}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComPlusCommit Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Not used - only a placeholder.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote Operation_ixoComPlusRollback}
${\footnote ixoComPlusRollback Operation}
+{\footnote Operation:ixoComPlusRollback}
K{\footnote ixoComPlusRollback}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoComPlusRollback Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Not used - only a placeholder.
\par\li0\fi0{\b Parameters:}\par\li180
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page



#{\footnote Operation_ixoSecureTransformCache}
${\footnote ixoSecureTransformCache Operation}
+{\footnote Operation:ixoSecureTransformCache}
K{\footnote ixoSecureTransformCache}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ixoSecureTransformCache Operation
\line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes}
\tx3000\tab{\uldb Error Codes}{\v Msi_Errors}
\par}\li180
Caches the specified transform into the secure transforms directory for the
 product.
\par\li0\fi0{\b Parameters:}\par\li180
{\f1 Field 1: }Transform.  Full path to the transform to cache.\line
\par\li0\fi0{\b Sequencing Restrictions}\par\li180
\par\li0\fi0{\b Remarks}\par\li180
\page

#{\footnote MsiExecute_Object}
${\footnote MsiExecute Object}
K{\footnote MsiExecute}
+{\footnote Class:MsiExecute}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiExecute Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
The MsiExecute object is used to execute script operations either individually or as
 part of a script file. This object can also enumerate a script file. Finally, the
 MsiExecute object can be used to roll back one or more installations and clean up
 back-up files and rollback scripts when they are not needed anymore. The MsiExecute object
 is created by the {\uldb CreateExecutor}{\v MsiAuto_CreateExecutor} method.
\par\li0{\b Properties}\par\li180
\par\li0{\b Methods}\par\li180
{\uldb EnumerateScript}{\v MsiExecute_EnumerateScript}\line
{\uldb ExecuteRecord}{\v MsiExecute_ExecuteRecord}\line
{\uldb RemoveRollbackFiles}{\v MsiExecute_RemoveRollbackFiles}\line
{\uldb Rollback}{\v MsiExecute_Rollback}\line
{\uldb RollbackFinalize}{\v MsiExecute_RollbackFinalize}\line
{\uldb RunScript}{\v MsiExecute_RunScript}\line
{\uldb CreateScript}{\v MsiExecute_CreateScript}\line
{\uldb WriteScriptRecord}{\v MsiExecute_WriteScriptRecord}\line
{\uldb CloseScript}{\v MsiExecute_CloseScript}\line
\page

#{\footnote MsiExecute_ExecuteRecord}
${\footnote MsiExecute.ExecuteRecord}
+{\footnote MsiExecute:ExecuteRecord}
K{\footnote ExecuteRecord}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ExecuteRecord Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
Executes a single script operation. The operation is defined by the given
 {\uldb opcode}{\v Server_ScriptOpcodes}, and the operation parameters are passed in
 an {\uldb MsiRecord}{\v MsiRecord_Object} object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ExecuteRecord({\i opcode, params})}
\par{\i object}\line
Required. The MsiExecute object.
\par{\i\b opcode}\line
Required. The opcode of the operation to be executed.
\par{\i\b params}\line
Required. An MsiRecord object containing the operation parameters. Note that this argument
 is required even if the operation does not accept any parameters. In this case, the record
 would be 0-length.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiExecute_RunScript}
${\footnote MsiExecute.RunScript}
+{\footnote MsiExecute:RunScript}
K{\footnote RunScript}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RunScript Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
Runs a script. The script may be an installation, advertisement or rollback script.
 The type of the script is defined in the {\uldb ixoHeader}{\v Operation_ixoHeader}
 record. Each type of script is executed in a slightly different way. !! Explanation !!
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RunScript({\i scriptFile})}
\par{\i object}\line
Required. The MsiExecute object.
\par{\i\b scriptfile}\line
Required. The full path (string) to an installation script file.
\par\fi0\li0{\b Remarks}\par\li180
{\uldb Scriptfile format}{\v Server_ScriptFormat}
\par\fi0\li0{\b Return Values}\par\li180
{\f1 iesNoAction       = 0  } action not invoked, most-likely does not exist.\line
{\f1 iesSuccess        = 1  } IDOK, completed actions successfully.\line
{\f1 iesUserExit       = 2  } IDCANCEL, user terminated prematurely.\line
{\f1 iesFailure        = 3  } IDABORT, unrecoverable error occurred.\line
{\f1 iesSuspend        = 4  } IDRETRY, sequence suspended, to be resumed later.\line
{\f1 iesFinished       = 5  } IDIGNORE, skip remainin actions, not an error\line
{\f1 iesWrongState     = 6  } calling sequence error, not in initialized state.\line
{\f1 iesBadActionData  = 7  } from Sequence(), invalid Action table record data.
\line\line!! Rollback explanation!!
\page

#{\footnote MsiExecute_CreateScript}
${\footnote MsiExecute.CreateScript}
+{\footnote MsiExecute:CreateScript}
K{\footnote CreateScript}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateScript Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
Creates a script file that can be written to with
 {\uldb WriteScriptRecord}{\v MsiExecute_WriteScriptRecord} and closed with
 {\uldb CloseScript}{\v MsiExecute_CloseScript}.
 Once the script is closed, it may be run with
 {\uldb RunScript}{\v MsiExecute_RunScript}.  This method returns TRUE if the script
 could be created, FALSE if it could not.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateScript({\i scriptFile})}
\par{\i object}\line
Required. The MsiExecute object.
\par{\i\b scriptfile}\line
Required. The full path (string) to an installation script file to create.
\page

#{\footnote MsiExecute_WriteScriptRecord}
${\footnote MsiExecute.WriteScriptRecord}
+{\footnote MsiExecute:WriteScriptRecord}
K{\footnote WriteScriptRecord}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
WriteScriptRecord Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
Writes an operation to the script opened by
 {\uldb CreateScript}{\v MsiExecute_CreateScript}. The operation is defined by the given
 {\uldb opcode}{\v Server_ScriptOpcodes}, and the operation parameters are passed in
 an {\uldb MsiRecord}{\v MsiRecord_Object} object.  This method returns TRUE if the script
 record could be written, FALSE if it could not.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .WriteScriptRecord({\i opcode, params})}
\par{\i object}\line
Required. The MsiExecute object.
\par{\i\b opcode}\line
Required. The opcode of the operation to be written.
\par{\i\b params}\line
Required. An MsiRecord object containing the operation parameters. Note that this argument
 is required even if the operation does not accept any parameters. In this case, the record
 would be 0-length.
\page

#{\footnote MsiExecute_CloseScript}
${\footnote MsiExecute.CloseScript}
+{\footnote MsiExecute:CloseScript}
K{\footnote CloseScript}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CloseScript Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
Closes the script created by {\uldb CreateScript}{\v MsiExecute_CreateScript}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CloseScript}
\par{\i object}\line
Required. The MsiExecute object.
\page

#{\footnote MsiExecute_EnumerateScript}
${\footnote MsiExecute.EnumerateScript}
+{\footnote MsiExecute:EnumerateScript}
K{\footnote EnumerateScript}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
EnumerateScript Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
Returns a collection of {\uldb MsiRecords}{\v MsiRecord_Object}, each
 containing a script record. See the remarks for the record format.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .EnumerateScript({\i scriptFile})}
\par{\i object}\line
Required. The MsiExecute object.
\par{\i\b scriptfile}\line
Required. The full path (string) to an installation script file.
\par\fi0\li0{\b Remarks}\par\li180
The record contains the {\uldb opcode}{\v Server_ScriptOpcodes} in field 0 and
 the parameters in the following fields.
\page

#{\footnote MsiExecute_RemoveRollbackFiles}
${\footnote MsiExecute.RemoveRollbackFiles}
+{\footnote MsiExecute:RemoveRollbackFiles}
K{\footnote RemoveRollbackFiles}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveRollbackFiles Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
This method removes all rollback scripts and backup files on the local machine created before
 the specified date, or all rollback scripts if the given date is 0.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveRollbackFiles({\i date})}
\par{\i object}\line
Required. The MsiExecute object.
\par{\i\b date}\line
Required. All rollback scripts and files created before this date are removed. If this value is 0, all
 rollback scripts and files ever created are removed.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiExecute_Rollback}
${\footnote MsiExecute.Rollback}
+{\footnote MsiExecute:Rollback}
K{\footnote Rollback}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Rollback Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
Rolls back changes made to the system since the specified date.  This is accomplished by running
 all rollback scripts registered since the specified date. Rollback scripts are registered
 with the {\uldb RegisterRollbackScript}{\v MsiConfigurationManager_RegisterRollbackScript} method.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Rollback({\i date})}
\par{\i object}\line
Required. The MsiExecute object.
\par{\b\i date}\line
Required, The date to roll back to.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiExecute_RollbackFinalize}
${\footnote MsiExecute.RollbackFinalize}
+{\footnote MsiExecute:RollbackFinalize}
K{\footnote RollbackFinalize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RollbackFinalize Method
\line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes}
\par}\li180
{\b Not yet implemented.}
Calls either {\uldb Rollback}{\v MsiExecute_Rollback} or
 {\uldb RemoveRollbackFiles}{\v MsiExecute_RemoveRollbackFiles}
 depending on the return state of the install and the current rollback policy for the local machine.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RollbackFinalize}
\par{\i object}\line
Required. The MsiExecute object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page



#{\footnote MsiApi_MsiDecomposeDescriptor}
${\footnote MsiApi.MsiDecomposeDescriptor}
K{\footnote MsiDecomposeDescriptor}
+{\footnote MsiApi::MsiDecomposeDescriptor}
MsiDecomposeDescriptor\fs18\tab\cf1\fs16\cf1\fs18\par
\pard\li120\sa120\sl240\tx360\tx600\tx840\uldb\b0\f1\fs20 
\cf1\ul0\v \cf1\v0  \par
Returns constituent parts of a descriptor.\par
{\b UINT MsiDecomposeDescriptor(}\line
 {\b LPCTSTR} szDescriptor,\tab\line
 {\b LPCSTR} szProductCode,\tab// returned product\line
 {\b LPCSTR} szFeatureId,\tab// returned feature\line
 {\b LPCSTR} szComponentCode,\tab// returned component code\line
 {\b DWORD} *pcchArgsOffset\tab// returned offset of args in descriptor\line
 {\b);}\par
{\b Parameters}\par
\li300\fi-120
{\i szDescriptor}\line
The component descriptor.\par
{\i szProductCode}\line
Points to a variable that receives the product code. The buffer
 should be large enough to hold 39 characters. This parameter can be NULL.\par
{\i szFeatureId}\line
Points to a variable that receives the component code. The buffer
 should be large enough to hold (MAX_FEATURE_CHARS + 1) characters.
 This parameter can be NULL.\par
{\i szComponentCode}\line
Points to a variable that receives the component code. The buffer
 should be large enough to hold 39 characters. This parameter can be NULL.\par
{\i pcchArgsOffset}\line
Points to a variable that will be filled with the offset to the arguments.
 This is to handle the case when the descriptor is followed by arguments.
 If, for example, the descriptor
 is 70 characters long we will pass back 71 to indicate that the arguments
 start at the 71st character. This parameter can be NULL.
\line
{\b Return Values}\par
If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is ERROR_INVALID_PARAMETER\par
\page

#{\footnote MsiApi_MsiGetProductCodeFromPackageCode}
${\footnote MsiApi.MsiGetProductCodeFromPackageCode}
K{\footnote MsiGetProductCodeFromPackageCode}
+{\footnote MsiApi::MsiGetProductCodeFromPackageCode}
MsiGetProductCodeFromPackageCode\fs18\tab\cf1\fs16\cf1\fs18\par
\pard\li120\sa120\sl240\tx360\tx600\tx840\uldb\b0\f1\fs20 
\cf1\ul0\cf1\v0  \par
Enumerates products on the machine, returning the first product
 that has the given package code.\par
{\b UINT MsiGetProductCodeFromPackageCode(}\line
 {\b LPCTSTR} szPackageCode,\tab\line
 {\b LPCSTR} szProductCode,\tab// returned product\line
 {\b);}\par
{\b Parameters}\par
\li300\fi-120
{\i szPackageCode}\line
The package code to find.\par
{\i szProductCode}\line
Points to a variable that receives the product code. The buffer
 should be large enough to hold 39 characters.\par
\line
{\b Return Values}\par
If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is ERROR_UNKNOWN_PRODUCT\par
\page

#{\footnote MsiApi_MsiProvideComponentFromDescriptor}
${\footnote MsiApi.MsiProvideComponentFromDescriptor}
+{\footnote MsiApi:MsiProvideComponentFromDescriptor}
K{\footnote MsiProvideComponentFromDescriptor}
MsiProvideComponentFromDescriptor\fs18\tab\cf1\fs16\cf1\fs18\par
\pard\li120\sa120\sl240\tx360\tx600\tx840\uldb\b0\f1\fs20 Group
\cf1\ul0\v _msi_Service_Functions@msi.hlp\cf1\v0  \par
Return full component path, performing any necessary installation. Prompts for source if necessary. Increments usage count for the feature.\par
\pard\li120\sl240\b\f1\fs16 UINT MsiProvideComponentFromDescriptor(\b0\par
 \b LPCTSTR\b0  \i szDescriptor\i0 ,    // product,feature,component info\par
 \b LPTSTR\b0  \i lpPathBuf\i0 ,        // returned path to component's keyfile\par
 \b DWORD\b0  *\i pcchPathBuf\i0\tab\b ,\b0      // in/out buffer character count\par
 \b DWORD\b0  *\i pcchArgsOffset\i0\tab    // returned offset of args in descriptor\par
 \b );\par
 \b0\par
\pard\sb140\sl280\b\f1\fs24 Parameters\par
\pard\li120\sl240\tx360\tx600\tx840\b0\i\f1\fs20 szDescriptor\par
\pard\li360\sl240\tx360\tx600\tx840\i0 The component descriptor for the component to be provided.\par
\pard\li120\sl240\tx360\tx600\tx840\i lpPathBuf\par
\pard\li360\sl240\tx360\tx600\tx840\i0 Points to a variable that receives the path to the component. This parameter can be NULL.\par
\pard\li120\sl240\tx360\tx600\tx840\i pcchPathBuf\par
\pard\li360\sl240\tx360\tx600\tx840\i0 Points to a variable that specifies the size, in characters, of the buffer pointed to by the \i lpPathBuf\i0  parameter. Upon success of this function, the parameter will contain the length of the string in \i lpPathBuf\i0 .\par
\pard\li360\sl240\tqr\tx280\tqr\tx360\tqr\tx600\tqr\tx840 If \i lpPathBuf\i0  is NULL, \i pcchBuf\i0  can be NULL.  \par
\pard\li120\sl240\tx360\tx600\tx840\i pcchArgsOffset\par
\pard\li360\sl240\tx360\tx600\tx840\i0 Points to a variable that will be filled with the offset to the arguments. This is to handle the case when the descriptor is followed by arguments, as it may be when passed to us by OLE. The offset will be the length of the descriptor. This parameter can be NULL.\par
\pard\li120\sl160\tx360\tx600\tx840\fs12\par
\pard\sb140\sl280\b\f1\fs24 Return Values\par
\pard\li120\sa120\sl240\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is one of the following error codes:\par
\pard\tx3300\tx6959\b Error Code\tab Meaning\tab\b0\f4\par
\pard\tx6960\par
\pard\tx3300\tx6959\f1 ERROR_INSTALL_SERVICE_FAILURE\tab Failure accessing the install service\tab\f4\par
\f1 ERROR_INSTALL_USEREXIT\tab The user cancelled the installation\tab\f4\par
\f1 ERROR_INSTALL_FAILURE\tab Fatal error during installation\tab\f4\par
\f1 ERROR_INSTALL_SUSPEND\tab The installation was suspended and is incomplete\tab\f4\par
\f1 ERROR_UNKNOWN_PRODUCT\tab The product code does not identify a know product\tab\f4\par
\f1 ERROR_UNKNOWN_FEATURE\tab The feature Id does not identify a know feature\tab\f4\par
\f1 ERROR_INSTALL_INVALIDARG\tab An invalid argument was passed to the function\tab\f4\par
\f1 ERROR_BAD_CONFIGURATION\tab The configuration data is corrupt\tab\f4\par
\pard\li120\sl160\tx360\tx600\tx840\f1\fs12\par
\pard\sb140\sl280\b\f1\fs24 Remarks\b0\par
\pard\f1\fs20 The function is a wrapper around MsiProvideComponent\f0\fs22\par
\par
\page

#{\footnote MsiApi_MsiConfigureFeatureFromDescriptor}
${\footnote MsiApi.MsiConfigureFeatureFromDescriptor}
+{\footnote MsiApi:MsiConfigureFeatureFromDescriptor}
K{\footnote MsiConfigureFeatureFromDescriptor}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiConfigureFeatureFromDescriptor\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi.hlp\cf0\v0  \par
The \b MsiConfigureFeatureFromDescriptor\b0  configures the installed state for a productfeature.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiConfigureFeatureFromDescriptor(\b0\par
 \b LPCTSTR\b0  \i szDescriptor\i0 ,\tab         // descriptor\par
 \b INSTALLSTATE\b0  \i eInstallState\i0    // install state\par
 \b );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szDescriptor\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A descriptor that identifies the feature to be configured.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i eInstallState\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The install state desired for the feature. One of the following:\par
\pard\tx3242\tx6959\b State\tab Meaning\tab\b0\f1\par
\pard\tx6960\par
\pard\tx3242\tx6959\f1 INSTALLSTATE_LOCAL\tab The feature should be installed locally\tab\f1\par
\f1 INSTALLSTATE_ABSENT\tab The feature should be uninstalled\tab\f1\par
\f1 INSTALLSTATE_SOURCE\tab The feature should be installed to run from source\tab\f1\par
\f1 INSTALLSTATE_DEFAULT\tab The feature should be installed to its default location\tab\f1\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is one of the following:\par
Any {\uldb Action Error} {\v _msi_Action_Errors@msi.hlp} or {\uldb Initialization Error}{\v _msi_Initialization_Errors@msi.hlp}  \par
Any error code relating to accessing a file.\par
ERROR_INVALID_PARAMETER\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Remarks\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 This function is a wrapper around \uldb MsiConfigureFeature\cf2\ul0\v _msi_MsiConfigureFeature@msi.hlp\cf0\v0  \par
\pard\f0\fs22\par
\page

#{\footnote MsiApi_MsiQueryFeatureStateFromDescriptor}
${\footnote MsiApi.MsiQueryFeatureStateFromDescriptor}
+{\footnote MsiApi:MsiQueryFeatureStateFromDescriptor}
K{\footnote MsiQueryFeatureStateFromDescriptor}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiQueryFeatureStateFromDescriptor\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi.hlp\cf0\v0  \par
The \b MsiQueryFeatureStateFromDescriptor\b0  is a wrapper around MsiQueryFeatureState.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 INSTALLSTATE MsiQueryFeatureStateFromDescriptor(\b0\par
 \b LPCTSTR\b0  \i szDescriptor\i0 \tab         // descriptor\par
 \b );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szDescriptor\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A descriptor that identifies the feature to be queried.\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 The return values are the same as MsiQueryFeatureState\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Remarks\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 This function is a wrapper around \uldb MsiQueryFeatureState\cf2\ul0\v _msi_MsiQueryFeatureState@msi.hlp\cf0\v0  \par
\pard\f0\fs22\par
\page

#{\footnote MsiApi_MsiGetProductInfoFromScript}
${\footnote MsiApi.MsiGetProductInfoFromScript}
K{\footnote MsiGetProductInfoFromScript}
+{\footnote MsiApi:MsiGetProductInfoFromScript}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiGetProductInfoFromScript\fs18\tab\tab\tab\tab\tab\tab{\uldb Group}{\v _msi_Service_Functions@msi.hlp}
\par}\li180
The {\b MsiGetProductInfoFromScript} returns the product info for an installer
 script file.\par
{\b UINT __stdcall MsiGetProductInfoFromScript}(\line
 {\b LPCDSTR} szScriptFile,{\tab\tab}// path to installer script file\line
 {\b LPDSTR} lpProductBuf39,{\tab\tab}// buffer for product code string GUID, 39 chars\line
 {\b LANGID} *plgidLanguage,{\tab\tab}// return language Id\line
 {\b DWORD} *pdwVersion,{\tab\tab}// return version: Maj:Min:Build <8:8:16>\line
 {\b LPDSTR} lpNameBuf,{\tab\tab\tab}// buffer to return readable product name\line
 {\b DWORD} *pcchNameBuf,{\tab\tab}// in/out name buffer character count\line
 {\b LPDSTR} lpPackageName,{\tab\tab}// buffer for package name\line
 {\b DWORD} *pcchPackageNameBuf{\tab\tab}// in/out path buffer character count\line
 {\b);}\par
{\b Parameters}\par
\li300\fi-120
{\i szScriptFile}\line
The full path to the script file.
\par
{\i lpProductBuf39}\line
Points to a buffer that receives the product code.
\par
{\i plgidLanguage}\line
Points to a buffer that receives the product language.
\par
{\i pdwVersion}\line
Points to a buffer that receives the product version.
\par
{\i lpNameBuf}\line
Points to a buffer that receives the product name.
\par
{\i pcchNameBuf}\line
Points to a variable that specifies the size, in characters, of the buffer pointed
 to by the {\i lpNameBuf} parameter. This size should include the terminating
 null character. When the function returns, this variable contains the
 length of the class string stored in the buffer. The count returned does
 not include the terminating null character. If the buffer is not big enough,
 the function returns ERROR_MORE_DATA, and the variable contains the size
 of the string, in characters, without counting the null character.
\par
{\i lpPackageNameBuf}\line
Points to a buffer that receives the package name.
\par
{\i pcchPackageNameBuf}\line
Points to a variable that specifies the size, in characters, of the buffer pointed
 to by the {\i lpPackageNameBuf} parameter. This size should include the terminating
 null character. When the function returns, this variable contains the
 length of the class string stored in the buffer. The count returned does
 not include the terminating null character. If the buffer is not big enough,
 the function returns ERROR_MORE_DATA, and the variable contains the size
 of the string, in characters, without counting the null character.
\par
{\b Return Values}\par
If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is one of the following:\line
\trowd\trgaph108\trleft0 \cellx3550\cellx8400
\intbl{\b Error Code\cell Meaning\cell}\row
\intbl ERROR_INVALID_PARAMETER\cell An invalid argument was passed to the function\cell\row
\intbl ERROR_MORE_DATA\cell A buffer was too small to hold the entire value\cell\row
\intbl ERROR_INSTALL_FAILURE\cell Could not get script info\cell\row
\page


#{\footnote MsiApi_MsiAdvertiseProduct}
${\footnote MsiApi.MsiAdvertiseProduct}
+{\footnote MsiApi:MsiAdvertiseProduct}
K{\footnote MsiAdvertiseProduct}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiAdvertiseProduct\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par
The \b MsiAdvertiseProduct\b0  function advertises a product.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiAdvertiseProduct(\b0\par
 \b LPCTSTR\b0  \i szPackagePath\i0 ,    // location of package\par
 \b LPCTSTR\b0  \i szScriptfilePath\i0 , // if NULL, product is locally advertised\par
 \b LPCTSTR\b0  \i szTransforms\i0 ,     // list of transforms to be applied\par
 \b LANGID\b0  \i lgidLanguage\i0        // install language\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szLauncherPath\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to the launcher of the product being advertised.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szScriptfilePath\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to scriptfile that will be created with the advertise information. If this parameter is NULL then the product is advertised locally.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szTransforms\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A semi-colon delimited list of transforms to be applied.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lgidLanguage\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The language to choose if the install source supports multiple languages. If \i lgidLanguage\i0  is LANG_NEUTRAL then we do a "best match" ??? \par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is one of the following:\par
Any \uldb Action Error\cf2\ul0\v _msi_Action_Errors@msi.hlp\cf0\v0  or \uldb Initialization Error\cf2\ul0\v _msi_Initialization_Errors@msi.hlp\cf0\v0  \par
Any error code relating to accessing a file.\par
ERROR_INVALID_PARAMETER\par
\page

#{\footnote MsiApi_MsiProcessAdvertiseScript}
${\footnote MsiApi.MsiProcessAdvertiseScript}
+{\footnote MsiApi:MsiProcessAdvertiseScript}
K{\footnote MsiProcessAdvertiseScript}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiProcessAdvertiseScript\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par
The \b MsiProcessAdvertiseScript\b0  function processes an advertise script file into the supplied locations.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiProcessAdvertiseScript(\b0\par
 \b LPCTSTR\b0  \i szScriptFile\i0 ,\tab  // path to script from MsiAdvertiseProduct\par
 \b LPCTSTR\b0  \i szIconFolder\i0 ,\tab  // optional path to folder for icon files and transforms\par
 \b HKEY\b0  \i hRegData\i0 ,        // optional parent registry key\par
 \b BOOL\b0  \i fShortcuts\i0 ,      // TRUE if shortcuts output\par
 \b BOOL\b0  \i fRemoveItems\i0      // TRUE if specified items are to be removed\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szScriptFile\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to a scriptfile generated by \uldb MsiAdvertiseProduct\ul0  \v MsiApi_MsiAdvertiseProduct\v0 .\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szIconFolder\i0\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840 An optional path to a folder in which advertised icon files and transform files should be placed.If this parameter is 
 NULL, no icon or transform files are written\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i hRegData\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A registry key under which registry data will be mapped. If this parameter is NULL, the registry data
 will be placed under the appropriate key, based on whether the advertisement is per-user or per-machine.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i fShortcuts\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 TRUE if shortcuts should be created. If a special folder is returned by SHGetSpecialFolderLocation(?) it will hold the shortcuts.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i fRemoveItems\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 TRUE if specified items are to be removed instead of being created.\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is one of the following error codes:\par
\pard\tx3200\tx6959\b Error Code\f1\tab\f1 Meaning\tab\b0\f1\par
\pard\tx6960\f1\par
\pard\tx3200\tx6959 ERROR_INSTALL_FAILURE\tab Processing failed\tab\f1\par
\f1 ERROR_INVALID_PARAMETER\tab An invalid argument was passed to the function\tab\f1\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par
\pard\cf3\f1\fs28\par
\cf0\fs17\par
\f0\fs22\par
\pard\fi-1800\li1800\tx1800\cf1\fs20\par
\page

#{\footnote MsiApi_MsiAdvertiseScript}
${\footnote MsiApi.MsiAdvertiseScript}
+{\footnote MsiApi:MsiAdvertiseScript}
K{\footnote MsiAdvertiseScript}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiAdvertiseScript\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par
The \b MsiAdvertiseScript\b0  function processes an advertise script file into the supplied locations.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiAdvertiseScript(\b0\par
\b LPCTSTR\b0 \i szScriptFile\i0 ,\tab  // path to script from MsiAdvertiseProduct\par
\b DWORD\b0   \i dwFlags\i0 ,\tab      // the bit flags from SCRIPTFLAGS\par
\b PHKEY\b0   \i phRegData\i0 , // optional parent registry key if reg data to be populated in a user specified location\par
\b BOOL\b0    \i fRemoveItems\i0 // TRUE if specified items are to be removed\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szScriptFile\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to a scriptfile generated by \uldb MsiAdvertiseProduct\ul0 \par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i dwFlags\i0\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The flags that control the advertisement. Can be a combination of the following \line
\i0 SCRIPTFLAGS_CACHEINFO = \t 0x00000001L,   // set if the icons need to be created/ removed\line
\i0 SCRIPTFLAGS_SHORTCUTS = \t 0x00000004L,   // set if the shortcuts needs to be created/ deleted\line
\i0 SCRIPTFLAGS_MACHINEASSIGN = \t 0x00000008L,   // set if product to be assigned to machine\line
\i0 SCRIPTFLAGS_REGDATA_APPINFO = \t 0x00000010L,  // set if the app advt registry data needs to be written/ removed\line
\i0 SCRIPTFLAGS_REGDATA_CNFGINFO = \t 0x00000020L,  // set if the product cnfg mgmt. registry data needs to be written/ removed\line
\i0 SCRIPTFLAGS_REGDATA = \t SCRIPTFLAGS_REGDATA_APPINFO | SCRIPTFLAGS_REGDATA_CNFGINFO \par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i phRegData\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A registry key under which registry data will be mapped. If this parameter is NULL, the registry data
 will be placed under the appropriate key, based on whether the advertisement is per-user or per-machine.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i fRemoveItems\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 TRUE if specified items are to be removed instead of being created.\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the return value is one of the following error codes:\par
\pard\tx3200\tx6959\b Error Code\f1\tab\f1 Meaning\tab\b0\f1\par
\pard\tx6960\f1\par
\pard\tx3200\tx6959 ERROR_INSTALL_FAILURE\tab Processing failed\tab\f1\par
\f1 ERROR_INVALID_PARAMETER\tab An invalid argument was passed to the function\tab\f1\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par
\pard\cf3\f1\fs28\par
\cf0\fs17\par
\f0\fs22\par
\pard\fi-1800\li1800\tx1800\cf1\fs20\par
\page

#{\footnote MsiApi_MsiGetPatchInfo}
${\footnote MsiApi.MsiGetPatchInfo}
+{\footnote MsiApi:MsiGetPatchInfo}
K{\footnote MsiGetPatchInfo}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiGetPatchInfo\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par
The \b MsiGetPatchInfo\b0  function returns information about installed patches.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiGetPatchInfo(\b0\par
 \b LPCTSTR\b0  \i szPatch\i0 ,    // patch code\par
 \b LPCTSTR\b0  \i szProperty\i0 , // attribute name, case-sensitive\par
 \b LPTSTR\b0  \i lpValueBuf\i0 ,     // returned value, NULL if not desired\par
 \b DWORD\b0  \i *pcchValueBuf\i0        // in/out buffer character count\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szPatch\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the patch code for the patch. A GUID.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szProperty\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the property to be retrieved. INSTALLPROPERTY_LOCALPACKAGE is the only currently supported property.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpValueBuf\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the property value. This parameter can be NULL.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i pcchValueBuf\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the lpValueBuf parameter. This size should include the terminating NULL character. If lpValueBuf is NULL, pcchValueBuf can be NULL.\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return values are the same as those returned from {\uldb MsiGetProductInfo}{\v _msi_MsiGetProductInfo@msi.hlp}\par
\page

#{\footnote MsiApi_MsiEnumPatches}
${\footnote MsiApi.MsiEnumPatches}
+{\footnote MsiApi:MsiEnumPatches}
K{\footnote MsiEnumPatches}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiEnumPatches\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par
The \b MsiEnumPatches\b0  function enumerates all patches applied to a single product, in the order the patches were applied.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiEnumPatches(\b0\par
 \b LPCTSTR\b0  \i szProduct\i0 ,    // product code\par
 \b DWORD\b0  \i iPatchIndex\i0 , // 0-based index into installed patches\par
 \b LPTSTR\b0  \i lpPatchBuf\i0 ,     // patch code buffer,  size=39\par
 \b LPTSTR\b0  \i lpTransformsBuf\i0 ,     // transforms buffer\par
 \b DWORD\b0  \i *pcchTransformsBuf\i0        // in/out transforms buffer character count\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szProduct\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the product whose patches are to be enumerated.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i iPatchIndex\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the MsiEnumPatches function and then incremented for subsequent calls.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpPatchBuf\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the patch code.  This buffer must be of size 39.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpTransformsBuf\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the list of transforms from the patch that are to be applied to the product package.  This list has the same format as the TRANSFORMS property.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i pcchTransformsBuf\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the lpTransformsBuf parameter. This size should include the terminating NULL character.\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par
If the function fails, the possible return values are identical to the return values of MsiEnumFeatures.
\page

#{\footnote MsiApi_MsiLoadString}
${\footnote MsiApi.MsiLoadString}
+{\footnote MsiApi:MsiLoadString}
K{\footnote MsiLoadString}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiLoadString\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par
The \b MsiLoadString\b0  function is an extension to the LoadString Windows API to permit specification of a string of a particular language(* This API is not automated)\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiLoadString(\b0\par
 \b HINSTANCE\b0  \i hInstance\i0 ,    // handle to instance containing resource\par
 \b UINT\b0  \i uID\i0 , // resource ID of string\par
 \b LPDSTR\b0  \i lpBuffer\i0 ,     // buffer to hold string\par
 \b int\b0  \i nBufferMax\i0 ,     // buffer length\par
 \b WORD\b0  \i wLanguage\i0        // language\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 hInstance\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the instance containing the resource with the string.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i uID\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the resource ID of the string.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpBuffer\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the string.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i nBufferMax\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Lenght of buffer.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i wLanguage\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Value of particular language to be loaded\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is the codepage of the found string.\par
If the function fails, it returns 0.  The function fails if the resource could not be found.\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Remarks\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 MsiLoadString could be considered a LoadStringEx (in similar manner as FindResourceEx is to FindResource)\par
 MsiLoadString attempts to find a matching string in the following order\par
 \i (1)\i0 Language requested (wLanguage parameter)\par
 \i (2)\i0 User-Interface language or User Locale language \par
 \i (3)\i0 System Default language \par
 \i (4)\i0 English (base English, not US English)\par
 \i (5)\i0 Language Neutral
\page

#{\footnote MsiApi_MsiMessageBox}
${\footnote MsiApi.MsiMessageBox}
+{\footnote MsiApi:MsiMessageBox}
K{\footnote MsiMessageBox}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiMessageBox\cf2\fs16\'a6@\'a6\cf0\fs40\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par
The \b MsiMessageBox\b0  function is a wrapper around the Windows MessageBox API that supports non-system codepages.
It ignores the MB_APPMODAL, MB_TASKMODAL, and MB_SYSTEMMODAL flags.(* This API is not automated)\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 int MsiMessageBox(\b0\par
 \b HWND\b0  \i hWnd\i0 ,    // handle to window\par
 \b LPCDSTR\b0  \i szText\i0 ,     // text for message box\par
 \b LPCDSTR\b0  \i szCaption\i0 ,     // text for caption for message box\par
 \b UINT\b0  \i uiType\i0        // attributes for buttons to appear on message box\par
 \b UINT\b0  \i uiCodepage\i0        // codepage to use\par
 \b WORD\b0  \i iLangId\i0        // language to use\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 hWnd\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the handle to the window\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szText\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the text to appear in the message box\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szCaption\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the caption for the message box\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i uiType\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the attributes for the message box (which buttons, icons, etc).  Same as Windows API MessageBox documentation\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i uiCodepage\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the codepage to use\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i iLangId\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the language to use\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 It returns the return value from the Windows DialogboxParam API.
\page

#{\footnote MsiApi_MsiIsProductElevated}
${\footnote MsiApi.MsiIsProductElevated}
+{\footnote MsiApi:MsiIsProductElevated}
K{\footnote MsiIsProductElevated}
\pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiIsProductElevated\par
\pard
\fs20\b0The \b MsiIsProductElevated\b0  function checks the elevation state of a product.\par
\pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiIsProductElevated(\b0\par
\b LPCTSTR\b0 \i  szProductCode\i0 ,\tab  // Product code to check.\par
\b BOOL*\b0   \i  pfElevated\i0 ,\tab    // pointer to BOOL for result\par
\b  );\par
 \b0\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szProductCode\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full product code GUID of the product. This may not be NULL or empty.\par
\pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i pfElevated\i0\par
\pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A pointer to a BOOL for the result. This may not be NULL.\par
\pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par
\pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS, and
the pfElevated is set to TRUE if the product is considered managed. This does not take into account policies such as 
AlwaysInstallElevated, but does verify that LOCALSYSTEM owns the product's registry data. The function will always fail on Win9X.\par
If the function fails, the return value is one of the following error codes:\par
\pard\tx3200\tx6959\b Error Code\f1\tab\f1 Meaning\tab\b0\f1\par
\pard\tx6960\f1\par
\pard\tx3200\tx6959 ERROR_UNKNOWN_PRODUCT\tab The product is not currently known on this machine.\tab\f1\par
\f1 ERROR_INVALID_PARAMETER\tab An invalid argument was passed to the function\tab\f1\par
\f1 ERROR_BAD_CONFIGURATION\tab The configuration information for the product is corrup.\tab\f1\par
\f1 ERROR_FUNCTION_FAILED\tab The call failed.\tab\f1\par
\pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par
\pard\cf3\f1\fs28\par
\cf0\fs17\par
\f0\fs22\par
\pard\fi-1800\li1800\tx1800\cf1\fs20\par
\page

}


