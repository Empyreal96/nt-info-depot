{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20

#{\footnote InstallerDevTools}
${\footnote Installer Tools}
K{\footnote Tools}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Installer Development Tools
\par}\li180
THESE TOOLS AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
\par
{\uldb MsiDb}{\v MsiDb_Tool} - database import, export, merge, transform\line
{\uldb MsiMsp}{\v MsiMsp_Tool} - patch package creation\line
{\uldb MsiInfo}{\v MsiInfo_Tool} - summary information property manager, string pool validation\line
{\uldb MsiMerg}{\v MsiMerge_Tool} - merges one database into another\line
{\uldb MsiTran}{\v MsiTran_Tool} - generates and applies transforms\line
{\uldb Orca}{\v Orca_Tool} - package editing/creation tool\line
{\uldb MsiVal2}{\v MsiVal2_Tool} - command line ICE validation tool.\line
{\uldb Msispy}{\v Msispy_Tool}  - installer registration browser\line
{\uldb MsiZap}{\v MsiZap_Tool}  - failure cleanup utility\line
{\uldb Makefile}{\v MsiTool_Mak} - makefile used to build custom actions and tools\line
\page

#{\footnote MsiDb_Tool}
${\footnote MsiDb Tool}
K{\footnote MsiDb}
+{\footnote Tool:MsiDb}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MSIDB.EXE Tool To Modify A Database
\par}\li180
The MSIDB.EXE tool uses the MSI database external API to import and export database tables and streams,
 merge databases and apply transforms to databases.  It is essentially a UI and/or command line
 processing layer on top of the MsiDatabaseImport and MsiDatabaseExport Windows Installer APIs.  If all required
 parameters (mode, folder, database and table list) are specified on the command line,
 the tool will not bring up any UI and will operate as silent command line-driven utility,
 suitable for a build script. If the folder
 containing the text archive files is not specified it will be prompted for; likewise the database will 
 be prompted for if not specified. Tables can be exported from a read only database.
\par\fi-180\li180{\b Command Line Syntax}
{\line\f1 MsiDb \{option\}...\{option\}... \{table\}...\{table\}}
\line The following case-insensitive command line options are supported (slash delimiter may also be used).
{\line\f1\b  -i   } Import text archive files from folder into specified database
{\line\f1\b  -e   } Export selected tables into text archive files in specified folder
{\line\f1\b  -c   } Creates a new database file (overwrites existing) and imports tables
{\line\f1\b  -f   } Specifies the folder containing the text archive files for tables and streams
{\line\f1\b  -d   } Fully-qualified path to the database
{\line\f1\b  -m   } Fully-qualified path to the database to merge in
{\line\f1\b  -t   } Fully-qualified path to the transform to apply
{\line\f1\b  -j   } Name of storage to remove from the database.
{\line\f1\b  -k   } Name of stream to remove from the database.
{\line\f1\b  -x   } Name of stream to save to a disk file in the current directory.
{\line\f1\b  -w   } Name of storage to save to a disk file in the current directory.
{\line\f1\b  -a   } Name of file to add to the database (becomes a child stream).
{\line\f1\b  -r   } Name of storage to add to the database (becomes a substorage).
{\line\f1\b  -s   } Truncate table names to 8 chars on idt export.
{\line\f1\b  -?   } Displays command line help dialog
\line Table names for import are file names. Standard wild card specifications may be used.
\line Table names for export are table names. Only the wildcard specification, "*", may be used.
\line Multiple -m's, -a's, -r's, -t's, -j's, -k's, -w's, and -x's may be used (maximum of 10 each).
\line The -m, -a, -r, -t, -j, -k, -w, and -x options are only available in silent command line mode.
\par{\b Archive Table Naming}
\line Only archive text files with the ".idt" extension may be imported.
\line The table name is truncated to 8 characters if -s is used, and the extension ".idt" added.
\line Tables names supplied by command for import are likewise converted.
\line The name used for database table creation is maintained in the .idt file.
\line Binary data streams are stored as separate files with extension ".ibd".
\line Binary filename used is primary key data for the row containing the stream.

\line\line
Note:  When using long filenames with spaces, use quotes around them.  For example, for a
 database that is in the 'My Documents' folder, specify it as "c:\\my documents".
\page


#{\footnote MsiMsp_Tool}
${\footnote MsiMsp Tool}
K{\footnote MsiMsp}
+{\footnote Tool:MsiMsp}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MSIMSP.EXE Tool To Create Patch Packages
\par}\li180
The MSIMSP.EXE tool is a wrapper for PatchWiz.dll.  The tool may be used to create a patch package by passing
 in the path to a "Patch Creation Properties" file or PCP file, and the path to the patch package to create.
 Additional options include creating a log file, and specifying a non-default temporary folder in which
 the transforms, cabinets and assorted files used to create the patch package are left behind.  See msi.chm for
 more info on setting up a Patch Creation Properties file, as well as meanings of error codes from PatchWiz.dll
 and MSIMSP.EXE.
\par\fi-180\li180{\b Command Line Syntax}
{\line\f1 MsiMsp \{option\}...\{option\}...}
\line The following case-insensitive command line options are supported (slash delimiter may also be used).
{\line\f1\b  -s   } Required.  Followed by path to Patch Creation Properties file.
{\line\f1\b  -p   } Required.  Followed by path to patch package to create.
{\line\f1\b  -f   } Optional.  Followed by path to temporary folder.
{\line\f1\b  -k   } Optional.  Fail if temporary folder already exists.
{\line\f1\b  -l   } Optional.  Followed by path to log file describing patch creation process and errors.
{\line\f1\b  -d   } Optional.  Will display dialog if and when patch creation has completed successfully.
{\line\f1\b  -?   } Displays command line help dialog
\line\line
Note:  When using long filenames with spaces, use quotes around them.  For example, for a
 Patch Creation Project that is in the 'My Documents' folder, specify it as "c:\\My Documents".
\page

#{\footnote MsiInfo_Tool}
${\footnote MsiInfo Tool}
K{\footnote MsiInfo}
+{\footnote Tool:MsiInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MSIINFO.EXE Tool To Modify A Database's Summary Properties
\par}\li180
The MSIINFO.EXE tool uses the MSI database external API to edit or display the summary information of a
 database. It is a command line tool.
\par\fi-180\li180{\b Command Line Syntax}
{\line\f1 MsiInfo \{database\} [[/B] /D]}\line
Displays the Summary information of the database to the console\line
\line The following case-insensitive command line options are supported (slash delimiter may also be used).
{\line\f1\b  -B   }  Display information about every string in the string pool.
{\line\f1\b  -D   }  Display information about the string pool.
\line
\par
{\b Remarks}\line
The -D option will examine the string pool for corruption and provide information about the codepage of the database.  
Note that the codepage of the database is different from the codepage of the Summary Information stream (PID_CODEPAGE). 
It will also check every string for characters that are invalid in the codepage of the database. The -B option is only 
valid if -D is also used, and it must come before the -D option.
\line
{\line\f1 MsiInfo \{database\} \{option\} \{data\}.....}\line
Sets the corresponding summary information property\line
\line The following case-insensitive command line options are supported (slash delimiter may also be used).
{\line\f1\b  -I   }  PID_DICTIONARY
{\line\f1\b  -C   }  PID_CODEPAGE
{\line\f1\b  -T   }  PID_TITLE
{\line\f1\b  -J   }  PID_SUBJECT
{\line\f1\b  -A   }  PID_AUTHOR
{\line\f1\b  -K   }  PID_KEYWORDS
{\line\f1\b  -O   }  PID_COMMENTS
{\line\f1\b  -P   }  PID_TEMPLATE
{\line\f1\b  -L   }  PID_LASTAUTHOR
{\line\f1\b  -V   }  PID_REVNUMBER
{\line\f1\b  -E   }  PID_EDITTIME
{\line\f1\b  -S   }  PID_LASTPRINTED
{\line\f1\b  -R   }  PID_CREATE_DTM
{\line\f1\b  -Q   }  PID_LASTSAVE_DTM
{\line\f1\b  -G   }  PID_PAGECOUNT
{\line\f1\b  -W   }  PID_WORDCOUNT
{\line\f1\b  -H   }  PID_CHARCOUNT
{\line\f1\b       }  PID_THUMBNAIL     !! NOT SUPPORTED !!
{\line\f1\b  -N   }  PID_APPNAME
{\line\f1\b  -U   }  PID_SECURITY
\line
\par
The data following the option is optional. If there is no data following the option, then the property is
 removed. The database must not be a readOnly database.  The same properties can be specified again on the
 command line, but only 20 switches can be used.  If the data for a particular option contains a space,
 encapsulate it in quotes, such as /T "MY TITLE".  The quotation marks notify the command line parser to
 ignore the space.  For the file time  properties, those being PID_EDITTIME, PID_LASTPRINTED, PID_CREATE_DTM,
 and PID_LASTSAVE_DTM, use the following format "year/month/day hour:minute:second" which is required to
 be "yyyy/mm/dd hh:mm:ss" (i.e. "1997/06/20 03:25:59).
\page

#{\footnote MsiTran_Tool}
${\footnote MsiTran Tool}
K{\footnote MsiTran}
+{\footnote Tool:MsiTran}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MSITRAN.EXE Tool to Generate or Apply a Transform file
\par}\li180
The {\i\b MSITRAN.EXE} tool can generate or apply a transform file.  It is a command line tool layered on the
 MsiDatabaseGenerateTransform, MsiCreateTransformSummaryInfo, and MsiDatabaseApplyTransform Windows Installer API.\par
{\b Command Line Syntax:} \line
{\line\f1 Transform Generation: msitran -g \{base db\} \{ref db\} \{transform file name\} [\{error conditions / validation conditions\}]} 
{\line\f1 Transform Application: msitran -a \{transform\} \{database\} [\{error conditions\}]}
\line\line

{\b Error Conditions:}\line
The following errors may be suppressed when applying a transform.
 To suppress an error, include the appropriate character in
 the \{error conditions\} argument. Conditions specified with -g are placed in
 the summary information of the transform, but are not used when
 applying a transform with -a.\line
\line
{\f1 'a': }Add existing row.\line
{\f1 'b': }Delete non-existing row.\line
{\f1 'c': }Add existing table.\line
{\f1 'd': }Delete non-existing table.\line
{\f1 'e': }Modify existing row.\line
{\f1 'f': }Change codepage.\line
\line\line

{\b Validation Conditions:}\line
The following validation conditions may be used to indicate when a transform may be applied to a package.
 These conditions may be specified with -g, but not -a.\line
\line
{\f1 'g': }Check upgrade code.\line
{\f1 'l': }Check language.\line
{\f1 'p': }Check platform.\line
{\f1 'r': }Check product.\line
{\f1 's': }Check major version only.\line
{\f1 't': }Check major and minor versions only.\line
{\f1 'u': }Check major, minor, and upgrade versions.\line
{\f1 'v': }Applied database version < Base database version.\line
{\f1 'w': }Applied database version <= Base database version.\line
{\f1 'x': }Applied database version = Base database version.\line
{\f1 'y': }Applied database version >= Base database version.\line
{\f1 'z': }Applied database version > Base database version.\line
\line\line

{\b Generate transform without Summary Information Stream:}\line
The conditions are ignored.\line
{\f1 '@': }Suppress summary information stream generation.\line
\page

#{\footnote Orca_Tool}
${\footnote Orca Tool}
K{\footnote Orca}
+{\footnote Tool:Orca}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ORCA.EXE Tool for package editing and creation
\par}\li180
The {\i\b ORCA.EXE} tool can be used for creating and editing MSI packages and merge modules. The tool
 also provides a graphical interface for validation, highlighting the particular entries where validation errors
 and/or warnings occur.
 \par
{\b Command Line Syntax:} \line
{\line\f1 orca [<options>] [<source file>]}
\line
\line The following are general command line options supported by ORCA
{\line\f1\b -q} Quiet mode 
{\line\f1\b -s <database>} Schema database ["orca.dat" - default]
{\line\f1\b -?} Help dialog
\line
\line The following are Merge Module command line options
{\line\f1\b -c} Commit merge to database if no errors.
{\line\f1\b -m <module>} Merge Module to merge into database
{\line\f1\b -f Feature[:Feature2]} Feature(s) to connect to Merge Module
{\line\f1\b -r <directory id>} Directory entry for module root redirection
{\line\f1\b -x <directory>} Extract files to source image under directory
{\line\f1\b -g <language>} Language used to open module
{\line\f1\b -l <log file>} File to use as log, append if already exists
\par
{\b Remarks:}\line
If merging, -f, -m and <sourcefile> are all required.
\par

\line\line
\page

#{\footnote MsiVal2_Tool}
${\footnote MsiVal2 Tool}
K{\footnote MsiVal2}
+{\footnote Tool:MsiVal2}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MSIVAL2.EXE Command line tool to run ICE validation.
\par}\li180
The {\i\b MSIVAL2.EXE} tool can run a suite of ICE validators or an individual ICE.\par
{\b Command Line Syntax:}
{\line\f1 msival2 \{database\} \{CUB file\} [-f] [-l \{logfile\}] [-i \{ICE Id\}[:\{ICE Id\}...]]}
\line
\line The following case-insensitive command line options are supported (slash delimiter may also be used).
{\line\f1\b  -F   }  Filter out informational messages from the displayed results.
{\line\f1\b  -I   }  Run only the selected ICE(s). 
{\line\f1\b  -L   }  Write results to the specified file. 

\par
{\b Remarks:}\line
If the {\b -I(i)} option is used, the tool will run only the listed ICE validators, in the order specified. 
Each ICE should be specified as it is listed in the CustomAction table of the CUB file. If the {\b -I(i)} option
 is omitted, the tool runs the default set of ICEs defined by the author of the CUB file.
\par
The {\b -F} option will not display or log any ICE INFO messages. All other types of messages will be displayed.
\par
The file specified with the {\b -L} must not exist. If it does, it will not be overwritten. The {\b -F} option
 will filter messages sent to the log as well. The results will still be visible on the screen.
\page

#{\footnote MsiMerge_Tool}
${\footnote MsiMerg Tool}
K{\footnote MsiMerge; MsiMerg}
+{\footnote Tool:MsiMerge}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MSIMERG.EXE Tool to Merge a database into another
\par}\li180
The {\i\b MSIMERG.EXE} tool can merge a database into another.  If MergeConflicts are reported, information
 is placed in the _MergeErrors table.  Note, the _MergeErrors table may not always be created depending
 on the error that occured (an error not related to the actual merge of the data).  It utilizes the external API,
 in particular, MsiDatabaseMerge.  \par
{\b Command Line Syntax} \line
{\f1 msimerg \{base db\} \{ref db\}}\line
\page

#{\footnote MsiZap_Tool}
${\footnote MsiZap Tool}
K{\footnote MsiZap}
+{\footnote Tool:MsiZap}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MSIZAP.EXE Tool to clean up Windows Installer information if a failure has occurred.
\par}\li180
The {\i\b MSIZAP.EXE} tool can clean up Windows Installer information for a product or all products installed
 on a machine  \par
{\b Command Line Syntax} \line
{\f1 msizap T[A!] \{product code\} }\line
{\f1 msizap T[A!] <msi package>} \line
{\f1 msizap *[A!] ALLPRODUCTS} \line
{\f1 msizap PSA?!} \line
\line
{\b Option explanations} \line
{\f1\b *} remove all Windows Installer folders and regkeys; adjust shared DLL counts; stop Windows Installer service \line
{\f1\b T} remove all info for given product code \line
{\f1\b P} remove In-Progress key \line
{\f1\b S} remove Rollback Information \line
{\f1\b A} for any specified removal, just change ACLs to Admin Full Control \line
{\f1\b ?} verbose help \line
{\f1\b !} force 'yes' response to any prompt \line
\par
{\b Remarks:}\line
When using the T option with the Product Code, include the curly braces around the Product Code.\line \line
{\b CAUTION: Products installed by the Windows Installer may fail to function after using MsiZap.}
\page

#{\footnote MsiTool_Mak}
${\footnote MsiTool Mak}
K{\footnote makefile}
+{\footnote Tool:Makefile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Makefile for Building Tools and Custom Actions
\par}\li180
MSITOOL.MAK is a makefile that can be used to make tools and custom actions, using VC4.x or VC5.
 See header of that file for documentation. It requires a set of values to be defined before
 including this file. Typically we put those at the start of the CPP, ifdef'd to be skipped by the
 C compiler. Likewise resources are added to the end of the CPP file. See samples for details.\line
\par
VCBIN may be defined to the directory where the VC tools are found, else the makefile uses MSVCDIR and MSDEVDIR,
 and if those aren't defined, it does not specify a location, assuming the tools to be on the PATH.
 A problem with the environment variables in VC5 is that if both are NOT on you path, the linker
 can't find MSDIS100.DLL. If you copy that from MSDEVDIR to MSVCDIR, it works OK.
 The other thing that you can do is to copy MSDIS100.DLL and RC.EXE and RCDLL.DLL to MSVCDIR, and set VCBIN to that.
\page

#{\footnote Msispy_Tool}
${\footnote Msispy User Interface}
K{\footnote Msispy: }
+{\footnote Tool:Msispy}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiSpy: A Tool to Display Component-Level View of A System
\par}\li180
\line
{\i\b MsiSpy} provides a component level view of the products and features installed on a system,
 using either an MSI Package, or the registry information. Msispy also displays the status of
 each, and allows you to partially or completely re-install missing or damaged items. You  can also
 re-configure any product or feature, selecting the install level, and specifying whether to install
 it locally or run it from a network server.
\par
Please select a topic you would like more information on:\par
{\uldb Menu Options}{\v Msispy_MenuOptions}\par
{\uldb Context Menus}{\v Msispy_ContextMenus}\par
{\uldb Command Line Options}{\v Msispy_CommandLine}\par
{\uldb Setting Preferences}{\v Msispy_Preferences}\par
{\uldb Msispy Automation Interface}{\v MsispyAutoOverview}\line
\page
 

#{\footnote Msispy_MenuOptions}
${\footnote Msispy_MenuOptions}
K{\footnote Msispy: Menu Options}
+{\footnote Msispy_MenuOptions}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Menu Options
\par}\li180
\par\li0{\b The File Menu}\par\li500\fi-320
{\b Open MSI Package} allows you to open an MSI package.\par
{\b Open Local Database} uses the registry information to display information about all the
 products installed on the computer.\par
{\b Load Saved State} allows you to load a profile of the system previously saved by Msispy.\par
{\b Save Current State} allows you to save a complete profile of the system onto a file. The
 information is stored in an easy to read text format. This information should not be modified
 directly.\par
{\b Restore Saved State} (enabled only when a saved state is loaded) attempts to restore the system
 to the configuration in the saved state. If more components have been added since the profile was
 saved, they are left untouched. If some products or components have been damaged since the profile was
 saved, Msispy attempts to restore them by attempting to re-install them from the original
 source. If the source is not available, you are given the option to abort, retry or ignore.\par
{\b Check Differences} (enabled only when a saved state is loaded) checks the differences between the
 configuration in the saved state and the current system configuration. These differences are written
 to a log file in a tab-separated table in simple text format.

\par\li0\line{\b The View Menu}\par\li500\fi-320
{\b Refresh} refreshes the display by getting the displayed information again and redrawing it.\par
{\b Prefences} allows you to change the Msispy mode and language. For more information, refer to
 {\uldb Setting Preferences}{\v Msispy_Preferences}.

\par\li0\line{\b The Help Menu}\par\li500\fi-320
{\b Overview} brings up the Msispy help file\par
{\b About} brings up the product information box, with information about the registered user and the
 version and product ID of the installed copy of Msispy.
\line
\par\li0\line
{\uldb Context Menus}{\v Msispy_ContextMenus}\line
{\uldb Command Line Options}{\v Msispy_CommandLine}\line
\page

#{\footnote Msispy_ContextMenus}
${\footnote Msispy ContextMenus}
K{\footnote Msispy: Context Menus}
+{\footnote Msispy_ContextMenus}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Context Menus
\par}\li180
\line
When a product, feature or component is selected, clicking on the right mouse-button brings up the 
 context menus that allow you to perform operations on the selected item.

\par\li0\line{\b Properties}\par\li500\fi-320
All context menus have a {\i\b Properties} option, that brings up a property sheet containing information
 about the selected item. In addition to the {\b General} tab that contains the information, the property
 sheets also contain a {\b File List} tab, that contains information about all the files needed by the
 selected item. The list of files contains information about the file including the component that uses it,
 the file name and size when it was installed, the location of the file. In this tab, the {\b Verify Files}
 button allows you to check the current status of the files. This button brings up a window with the current
 file information, including current size, creation, last access and modification dates. If the file is not
 found, or if the file size is different, the file is marked broken with an icon to the its left.\par
{\b Important:} If a saved state is in use, the verify files brings up information about the files {\i when the
 state was saved, not the current file information}.

\par\li0\line Additional context-menu choices cary depending on the item selected:
\par\li0\line{\b Components}\par\li500\fi-320
The menu comprises:\par
{\b Re-install Component} (enabled only if the component is broken), which allows you to re-install
 the component from it's original install source.

\par\li0\line{\b Installed Products (and their Features)}\par\li500\fi-320
The menu comprises:\par
{\b Re-install}, which allows you to use one of the available re-install modes, including
 options to re-install just the damaged or missing files. Other options allow you to force all
 the files to be re-installed, the registry entries to be verified, and so on.\par
{\b Configure}, which allows you to install the feature on your local machine, or run it
 from a remote source. Some features may have components that need to be installed on the local
 machine. Attempting to install such features to run from a remote location will lead to a mix
 of some components being on the local system and the rest at the remote location.\par
{\b Un-install}, which allows you to un-install the product or feature. If a feature with
 sub-features is un-installed, all of its sub-features will be un-installed as well. If the last
 installed feature in a product is un-installed, the entire product will be un-installed.

\par\li0\line{\b Other Products (and their Features)}\par\li500\fi-320
If an MSI package for a product not installed on the local system  is in use,
 the context menu has the following options:\par
{\b Install Product}, which will install the product on the local system using the default options.\par
{\b Advertise Product}, which will advertise the product on to the local system. This will
 set all the registry entries needed for the product, but will not actually install any files
 on the local system. The files will be transferred in when the component they belong to is used.

\par\li0\line{\b Products in Saved States (and their Features)}\par\li500\fi-320
If a saved state is loaded, the menu always comprises:\par
{\b Restore Saved State}, which has the same functionality as {\b Restore Saved State} described under 
 {\uldb Menu Options}{\v Msispy_MenuOptions}.
\line
\par\li0\line
{\uldb Menu Options}{\v Msispy_MenuOptions}\line
{\uldb Command Line Options}{\v Msispy_CommandLine}\line
\page


#{\footnote Msispy_CommandLine}
${\footnote Msispy_CommandLine}
K{\footnote Msispy: Command Line Options}
+{\footnote Msispy_CommandLine}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Msispy Command Line Options
\par}\li180
\par\li0\line{\b msispy [filename|/options filename(s)]}\par\li500\fi-320
\par\li180{\b /d\i<srcprof.msp> <destfile.log>}\par\li500\fi-320
Saves the differences between the current system configuration and the profile {\i <srcprof.msp>} into
 {\i <destfile.log>} in a tab-separated table form.
\par\li180{\b /s\i<destprof.msp>}\par\li500\fi-320
Saves the current system configuration to the profile {\i <destprof.msp>}
\par\li180{\b /r\i<srcprof.msp>}\par\li500\fi-320
Restores the current system to the configuration in the profile {\i <srcprof.msp>}
\par\li180{\b\i <srcprof.msp>}\par\li500\fi-320
Launches GUI version and loads the profile {\i <srcprof.msp>}
\par\li180{\b\i without any command-line option}\par\li500\fi-320
Launches GUI version\line
\par\li0\line
{\uldb Menu Options}{\v Msispy_MenuOptions}\line
{\uldb Context Menus}{\v Msispy_ContextMenus}\line
\page

#{\footnote Msispy_Preferences}
${\footnote Msispy Preferences}
K{\footnote Msispy: Preferences, Setting}
+{\footnote Msispy_Preferences}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Setting Preferences
\par}\li180
\line
Msispy can be used in different modes, and in different languages. You can set your preferences
 by selecting "Preferences" under the View Menu.
\par\li0{\b Modes}\par\li180
Msispy can be used in the following modes:\line
{\b Normal}: This is the default Msispy mode. In this mode, Msispy determines the status of a
 component solely on the basis of the component key-file. This makes Msispy much faster, and in
 most cases will present an accurate picture of the component status. All the features of Msispy
 are available in this mode.\line
{\b Diagnostic}: In this mode, Msispy will perform a complete check of all files to determine
 component status, instead of relying on component key files. This mode will give a more accurate
 picture of the component status, but will make the program significantly slower.
 Msispy should not normally be used in this mode, especially if it is being used on a slow machine.\line
{\b Restricted}: In this mode, the functionality of Msispy is limited to the Local Database only.
 You will not be able to access MSI Packages or Msispy Saved States. Leads to a slight performance
 gain. This mode is recommended if you are on slow machines and do not wish to take advantage of
 all the Msispy features.\par
If Msispy is unable to load the system interface DLL (default name msispyu.dll), it will start up in
 the restricted mode. You will not be able to switch to any other mode, since the other modes need
 the system interface DLL to function. To restore Msispy to it's full functionality, you may need to
 perform a re-install from the original install source.\line
\par\li0{\b Languages}\par\li180
Msispy can be used in many languages if the Msispy language support components are installed. A list
 of all supported languages appears in the "Language" tab of the preferences property sheet. To
 select a different language, click on the new language, and select OK. Msispy will switch to the
 new language automatically, if the language resources for the new language can be loaded. If the
 new language cannot be loaded, Msispy will load the closest match if available. If there is no
 similar language available, default language will be loaded.\par
\page


#{\footnote MsispyAutoOverview}
${\footnote Msispy Automation Overview}
K{\footnote Msispy Automation: }
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Msispy Automation Interface
\par}{\b Access to C++ Libraries}\par\li180
An {\uldb Msispy object}{\v HELPID_Msispy} must be initially created in order to load 
 the automation support that is required in order to access the {\uldb Msispy objects}{\v Msispy_Objects}
 through OLE automation. This object provides wrappers to create the top level
 objects and access their methods. These wrapper simply provide argument
 translations to expose the Msispy functions in a manner consistent with BASIC
 without changing the behavior of the methods. When possible, a pair of Get and
 Set C++ methods will be exposed to BASIC as a single property. Where
 appropriate, C++ methods taking an index argument will be exposed as an indexed
 property. Many C++ methods return the result through an argument, as the return
 value is used for the error return; however in BASIC errors are handled by
 a separate mechanism, and the result is always passed in the return value.
\par\fi0\li0{\b Creating the Msispy object}\par\li180
In order for OLE to access the automation, the DLL must be registered. This can
 be done in one of two ways- (a) by installing Msispy on your system using MSI, or
 (b) self-registering the DLL. The OLE ProgId used to create the Msispy object is
 {\b Msispy.Automation}.
\page

#{\footnote Msispy_Objects}
${\footnote Msispy Objects}
K{\footnote Msispy Automation:Objects}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Msispy Automation Objects
\par}\li180
{\uldb Msispy object}{\v HELPID_Msispy}\line
{\uldb MsispyDatabase object}{\v HELPID_MsispyDatabase}\line
{\uldb MsispyProfile object}{\v HELPID_MsispyProfile}\line
{\uldb MsispyRegistry object}{\v HELPID_MsispyRegistry}\line
\page

#{\footnote HELPID_Msispy}
${\footnote Msispy Object}
K{\footnote Msispy Automation: Objects}
+{\footnote Class:Msispy}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Msispy Object
\par}\li180
An Msispy object must be initially created in order to load the automation 
support that is required in order to access the Msispy automation functions
through OLE automation. This object provides wrappers to create the top level 
objects and access their methods.
\par\li0{\b Methods}\par\li180
{\uldb CreateDatabase}{\v HELPID_Msispy_CreateDatabase}\line
{\uldb CreateProfile}{\v HELPID_Msispy_CreateProfile}\line
{\uldb CreateRegistry}{\v HELPID_Msispy_CreateRegistry}\line
\page


#{\footnote HELPID_Msispy_CreateDatabase}
${\footnote Msispy.CreateDatabase}
+{\footnote Msispy:CreateDatabase}
K{\footnote Msispy Automation: CreateDatabase}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateDatabase Method
\line\tx360\tab\fs18\b0{\uldb Msispy Object}{\v HELPID_Msispy}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a new {\uldb MsispyDatabase object}{\v HELPID_MsispyDatabase}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateDatabase()}
\par{\i object}\line
Required. The Msispy object.
\page

#{\footnote HELPID_Msispy_CreateProfile}
${\footnote Msispy.CreateProfile}
+{\footnote Msispy:CreateProfile}
K{\footnote Msispy Automation: CreateProfile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateProfile Method
\line\tx360\tab\fs18\b0{\uldb Msispy Object}{\v HELPID_Msispy}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a new {\uldb MsispyProfile object}{\v HELPID_MsispyProfile}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateProfile()}
\par{\i object}\line
Required. The Msispy object.
\page

#{\footnote HELPID_Msispy_CreateRegistry}
${\footnote Msispy.CreateDatabase}
+{\footnote Msispy:CreateDatabase}
K{\footnote Msispy Automation: CreateRegistry}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateRegistry Method
\line\tx360\tab\fs18\b0{\uldb Msispy Object}{\v HELPID_Msispy}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a new {\uldb MsispyRegistry object}{\v HELPID_MsispyRegistry}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateRegistry()}
\par{\i object}\line
Required. The Msispy object.
\page

#{\footnote HELPID_MsispyDatabase}
${\footnote MsispyDatabase Object}
K{\footnote Msispy Automation: MsispyDatabase Object}
+{\footnote Class:MsispyDatabase}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsispyDatabase Object
\line\fs18\b0\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
The database object accesses a Microsoft Installer database.\par
Before the MsispyDatabase object is released (by going out of scope or by setting the
 object variable to Nothing), the {\uldb Close}{\v HELPID_MsispyDatabase_Close} method
 must be called to release all handles.
\par\li0{\b Properties}\par\li180
{\uldb GetProduct}{\v HELPID_MsispyDatabase_GetProduct}\line
{\uldb GetFeatureFromProduct}{\v HELPID_MsispyDatabase_GetFeatureFromProduct}\line
{\uldb GetProduct}{\v HELPID_MsispyDatabase_GetProduct}\line
{\uldb GetFeatureFromProduct}{\v HELPID_MsispyDatabase_GetFeatureFromProduct}\line
{\uldb GetComponent}{\v HELPID_MsispyDatabase_GetComponent}\line
{\uldb GetComponentFromProduct}{\v HELPID_MsispyDatabase_GetComponentFromProduct}\line
{\uldb GetComponentFromFeature}{\v HELPID_MsispyDatabase_GetComponentFromFeature}\line
{\uldb GetComponentName}{\v HELPID_MsispyDatabase_GetComponentName}\line
{\uldb GetProductInfo}{\v HELPID_MsispyDatabase_GetProductInfo}\line
{\uldb GetFeatureInfo}{\v HELPID_MsispyDatabase_GetFeatureInfo}\line
{\uldb QueryProductState}{\v HELPID_MsispyDatabase_QueryProductState}\line
{\uldb QueryFeatureState}{\v HELPID_MsispyDatabase_QueryFeatureState}\line
{\uldb QueryComponentState}{\v HELPID_MsispyDatabase_QueryComponentState}\line
{\uldb GetFeatureUsage}{\v HELPID_MsispyDatabase_GetFeatureUsage}\line
{\uldb GetClientFromComponent}{\v HELPID_MsispyDatabase_GetClientFromComponent}\line
{\uldb GetFileFromComponent}{\v HELPID_MsispyDatabase_GetFileFromComponent}\line
{\uldb GetFileInfo}{\v HELPID_MsispyDatabase_GetFileInfo}\line
{\uldb GetComponentLocation}{\v HELPID_MsispyDatabase_GetComponentLocation}\line
{\uldb GetComponentPath}{\v HELPID_MsispyDatabase_GetComponentPath}\line
\par\li0{\b Methods}\par\li180
{\uldb Open}{\v HELPID_MsispyDatabase_Open}\line
{\uldb Close}{\v HELPID_MsispyDatabase_Close}\line
\page

#{\footnote HELPID_MsispyDatabase_Open}
${\footnote MsispyDatabase.Open}
+{\footnote MsispyDatabase.Open}
K{\footnote Msispy Automation: Open}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Open Method
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Opens a database at the location specified.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Open({\i databasePath})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b databasePath}\line
Required. The location of the database.
\page

#{\footnote HELPID_MsispyDatabase_Close}
${\footnote MsispyDatabase.Close}
+{\footnote MsispyDatabase.Close}
K{\footnote Msispy Automation: Close}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Close Method
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Closes a database, releasing the database handles.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Close()}
\par{\i object}\line
Required. The MsispyDatabase object.
\page

#{\footnote HELPID_MsispyDatabase_GetProduct}
${\footnote MsispyDatabase.GetProduct}
+{\footnote MsispyDatabase:GetProduct}
K{\footnote Msispy Automation: GetProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the product-code of a product in the database, or
 a blank string if all the products in the database have been enumerated.
 A 0-based index is used to enumerate the products one at a time.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetProduct({\i productIndex})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyDatabase_GetFeatureFromProduct}
${\footnote MsispyDatabase.GetFeatureFromProduct}
+{\footnote MsispyDatabase:GetFeatureFromProduct}
K{\footnote Msispy Automation: GetFeatureFromProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureFromProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a feature of the product, or a blank string 
 if all the features of the product have been enumerated. A 0-based index is used
 to enumerate the features one at a time. The product being used must be in the
 database, otherwise no features are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureFromProduct({\i productCode, featureIndex})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product whose features are to be enumerated, must be in the database.
\par{\i\b featureIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyDatabase_GetComponent}
${\footnote MsispyDatabase.GetComponent}
+{\footnote MsispyDatabase:GetComponent}
K{\footnote Msispy Automation: GetComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component in the database, or
 a blank string if all the components in the database have been enumerated.
 A 0-based index is used to enumerate the components one at a time.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponent({\i componentIndex})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyDatabase_GetComponentFromProduct}
${\footnote MsispyDatabase.GetComponentFromProduct}
+{\footnote MsispyDatabase:GetComponentFromProduct}
K{\footnote Msispy Automation: GetComponentFromProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentFromProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component of the product, or a blank string 
 if all the components of the product have been enumerated. A 0-based index is used
 to enumerate the components one at a time. The product being used must be in the
 database, otherwise no components are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentFromProduct({\i productCode, componentIndex})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product whose components are to be enumerated, must be in the database.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyDatabase_GetComponentFromFeature}
${\footnote MsispyDatabase.GetComponentFromFeature}
+{\footnote MsispyDatabase:GetComponentFromFeature}
K{\footnote Msispy Automation: GetComponentFromFeature}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentFromFeature Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component of the feature, or a blank string 
 if all the components of the feature have been enumerated. A 0-based index is used
 to enumerate the components one at a time. The product in use must be in the
 database, otherwise no components are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentFromFeature({\i productCode, featureName, componentIndex})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product in use, must be in the database.
\par{\i\b featureName}\line
Required. The feature whose components are to be enumerated.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyDatabase_GetComponentName}
${\footnote MsispyDatabase.GetComponentName}
+{\footnote MsispyDatabase:GetComponentName}
K{\footnote Msispy Automation: GetComponentName}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentName Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a component whose GUID is passed in, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentName({\i componentGuid})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b componentGuid}\line
Required. The component whose name will be returned.
\page

#{\footnote HELPID_MsispyDatabase_GetProductInfo}
${\footnote MsispyDatabase.GetProductInfo}
+{\footnote MsispyDatabase:GetProductInfo}
K{\footnote Msispy Automation: GetProductInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetProductInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a product, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetProductInfo({\i productCode, productAttribute})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product about which information will be returned.
\par{\i\b productAttribute}\line
Required. The required property of the product (case-sensitive). Valid attributes are:\line
\tab ProductName\line
\tab ProductVersion\line
\tab ProductCode\line
\tab Manufacturer\line
\tab SupportURL\line
\tab SupportPhone\line
\tab UserName\line
\tab UserOrgName\line
\tab ProductId\line
\page


#{\footnote HELPID_MsispyDatabase_GetFeatureInfo}
${\footnote MsispyDatabase.GetFeatureInfo}
+{\footnote MsispyDatabase:GetFeatureInfo}
K{\footnote Msispy Automation: GetFeatureInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a feature, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureInfo({\i productCode, featureName, featureAttribute})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\par{\i\b featureAttribute}\line
Required. The required property of the feature (case-sensitive). Valid attributes are:\line
\tab Feature\line
\tab Feature_Parent\line
\tab Title\line
\tab Description\line
\tab Display\line
\tab Level\line
\tab Directory_Configurable\line
\tab RunFromSource\line
\page

#{\footnote HELPID_MsispyDatabase_QueryProductState}
${\footnote MsispyDatabase.QueryProductState}
+{\footnote MsispyDatabase:QueryProductState}
K{\footnote Msispy Automation: QueryProductState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryProductState Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a product on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryProductState({\i productCode})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product about which information will be returned.
\page

#{\footnote HELPID_MsispyDatabase_QueryFeatureState}
${\footnote MsispyDatabase.QueryFeatureState}
+{\footnote MsispyDatabase:QueryFeatureState}
K{\footnote Msispy Automation: QueryFeatureState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryFeatureState Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a feature on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryFeatureState({\i productCode, featureName})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\page

#{\footnote HELPID_MsispyDatabase_QueryComponentState}
${\footnote MsispyDatabase.QueryComponentState}
+{\footnote MsispyDatabase:QueryComponentState}
K{\footnote Msispy Automation: QueryComponentState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryComponentState Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a component on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryComponentState({\i productCode, componentGuid})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyDatabase_GetFeatureUsage}
${\footnote MsispyDatabase.GetFeatureUsage}
+{\footnote MsispyDatabase:GetFeatureUsage}
K{\footnote Msispy Automation: GetFeatureUsage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureUsage Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns the usage-count of a feature on the local system. Returns 0 if the
 information could not be obtained.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureUsage({\i productCode, featureName})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\page

#{\footnote HELPID_MsispyDatabase_GetClientFromComponent}
${\footnote MsispyDatabase.GetClientFromComponent}
+{\footnote MsispyDatabase:GetClientFromComponent}
K{\footnote Msispy Automation: GetClientFromComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetClientFromComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing product-code of a client-product of the component, or a blank 
 string if all the clients of the component have been enumerated. A 0-based index is used
 to enumerate the clients one at a time. The component being used must be in the
 database, otherwise no clients are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetClientFromComponent({\i componentGuid, clientIndex})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b componentGuid}\line
Required. The component whose clients are to be enumerated, must be in the database.
\par{\i\b clientIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyDatabase_GetFileFromComponent}
${\footnote MsispyDatabase.GetFileFromComponent}
+{\footnote MsispyDatabase:GetFileFromComponent}
K{\footnote Msispy Automation: GetFileFromComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileFromComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a file used by the component, or a blank 
 string if all the files of the component have been enumerated. A 0-based index is used
 to enumerate the files one at a time. The component being used must be in the
 database, otherwise no files are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileFromComponent({\i componentGuid, fileIndex})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b componentGuid}\line
Required. The component whose files are to be enumerated, must be in the database.
\par{\i\b fileIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyDatabase_GetFileInfo}
${\footnote MsispyDatabase.GetFileInfo}
+{\footnote MsispyDatabase:GetFileInfo}
K{\footnote Msispy Automation: GetFileInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a file, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileInfo({\i productCode, componentGuid, fileName, fileAttribute})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component to which the file belongs.
\par{\i\b fileName}\line
Required. The file about which information will be returned.
\par{\i\b fileAttribute}\line
Required. The required property of the file (case-sensitive). Valid attributes are:\line
\tab FileTitle\line
\tab FileSize\line
\tab Version\line
\tab Language\line
\tab Attributes\line
\tab Sequence\line
\tab FileActualSize\line
\tab FileCreated\line
\tab FileModified\line
\tab FileAccessed\line
\tab FileStatus\line
\page

#{\footnote HELPID_MsispyDatabase_GetComponentLocation}
${\footnote MsispyDatabase.GetComponentLocation}
+{\footnote MsispyDatabase:GetComponentLocation}
K{\footnote Msispy Automation: GetComponentLocation}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentLocation Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the full path to the keyfile of a component.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentLocation({\i componentGuid})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyDatabase_GetComponentPath}
${\footnote MsispyDatabase.GetComponentPath}
+{\footnote MsispyDatabase:GetComponentPath}
K{\footnote Msispy Automation: GetComponentPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentPath Property
\line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the full path to the keyfile of a component.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentPath({\i productCode, componentGuid})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyProfile}
${\footnote MsispyProfile Object}
K{\footnote Msispy Automation: MsispyProfile Object}
+{\footnote Class:MsispyProfile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsispyProfile Object
\line\fs18\b0\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
The profile object accesses a Msispy profile.\par
Before the MsispyProfile object is released (by going out of scope or by setting the
 object variable to Nothing), the {\uldb Close}{\v HELPID_MsispyProfile_Close} method
 must be called to release all handles.
\par\li0{\b Properties}\par\li180
{\uldb GetProduct}{\v HELPID_MsispyProfile_GetProduct}\line
{\uldb GetFeatureFromProduct}{\v HELPID_MsispyProfile_GetFeatureFromProduct}\line
{\uldb GetProduct}{\v HELPID_MsispyProfile_GetProduct}\line
{\uldb GetFeatureFromProduct}{\v HELPID_MsispyProfile_GetFeatureFromProduct}\line
{\uldb GetComponent}{\v HELPID_MsispyProfile_GetComponent}\line
{\uldb GetComponentFromProduct}{\v HELPID_MsispyProfile_GetComponentFromProduct}\line
{\uldb GetComponentFromFeature}{\v HELPID_MsispyProfile_GetComponentFromFeature}\line
{\uldb GetComponentName}{\v HELPID_MsispyProfile_GetComponentName}\line
{\uldb GetProductInfo}{\v HELPID_MsispyProfile_GetProductInfo}\line
{\uldb GetFeatureInfo}{\v HELPID_MsispyProfile_GetFeatureInfo}\line
{\uldb QueryProductState}{\v HELPID_MsispyProfile_QueryProductState}\line
{\uldb QueryFeatureState}{\v HELPID_MsispyProfile_QueryFeatureState}\line
{\uldb QueryComponentState}{\v HELPID_MsispyProfile_QueryComponentState}\line
{\uldb GetFeatureUsage}{\v HELPID_MsispyProfile_GetFeatureUsage}\line
{\uldb GetClientFromComponent}{\v HELPID_MsispyProfile_GetClientFromComponent}\line
{\uldb GetFileFromComponent}{\v HELPID_MsispyProfile_GetFileFromComponent}\line
{\uldb GetFileInfo}{\v HELPID_MsispyProfile_GetFileInfo}\line
{\uldb GetComponentLocation}{\v HELPID_MsispyProfile_GetComponentLocation}\line
{\uldb GetComponentPath}{\v HELPID_MsispyProfile_GetComponentPath}\line
\par\li0{\b Methods}\par\li180
{\uldb Open}{\v HELPID_MsispyProfile_Open}\line
{\uldb Close}{\v HELPID_MsispyProfile_Close}\line
\page

#{\footnote HELPID_MsispyProfile_Open}
${\footnote MsispyProfile.Open}
+{\footnote MsispyProfile.Open}
K{\footnote Msispy Automation: Open}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Open Method
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Opens a profile at the given location.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Open({\i profilePath})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b profilePath}\line
Required. The location of the profile.
\page


#{\footnote HELPID_MsispyProfile_Close}
${\footnote MsispyProfile.Close}
+{\footnote MsispyProfile.Close}
K{\footnote Msispy Automation: Close}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Close Method
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Closes an open profile.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Close()}
\par{\i object}\line
Required. The MsispyProfile object.
\page

#{\footnote HELPID_MsispyProfile_GetProduct}
${\footnote MsispyProfile.GetProduct}
+{\footnote MsispyProfile:GetProduct}
K{\footnote Msispy Automation: GetProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the product-code of a product in the profile, or
 a blank string if all the products in the profile have been enumerated.
 A 0-based index is used to enumerate the products one at a time.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetProduct({\i productIndex})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyProfile_GetFeatureFromProduct}
${\footnote MsispyProfile.GetFeatureFromProduct}
+{\footnote MsispyProfile:GetFeatureFromProduct}
K{\footnote Msispy Automation: GetFeatureFromProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureFromProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a feature of the product, or a blank string 
 if all the features of the product have been enumerated. A 0-based index is used
 to enumerate the features one at a time. The product being used must be in the
 profile, otherwise no features are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureFromProduct({\i productCode, featureIndex})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product whose features are to be enumerated, must be in the profile.
\par{\i\b featureIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyProfile_GetComponent}
${\footnote MsispyProfile.GetComponent}
+{\footnote MsispyProfile:GetComponent}
K{\footnote Msispy Automation: GetComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component in the profile, or
 a blank string if all the components in the profile have been enumerated.
 A 0-based index is used to enumerate the components one at a time.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponent({\i componentIndex})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyProfile_GetComponentFromProduct}
${\footnote MsispyProfile.GetComponentFromProduct}
+{\footnote MsispyProfile:GetComponentFromProduct}
K{\footnote Msispy Automation: GetComponentFromProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentFromProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component of the product, or a blank string 
 if all the components of the product have been enumerated. A 0-based index is used
 to enumerate the components one at a time. The product being used must be in the
 profile, otherwise no components are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentFromProduct({\i productCode, componentIndex})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product whose components are to be enumerated, must be in the profile.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyProfile_GetComponentFromFeature}
${\footnote MsispyProfile.GetComponentFromFeature}
+{\footnote MsispyProfile:GetComponentFromFeature}
K{\footnote Msispy Automation: GetComponentFromFeature}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentFromFeature Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component of the feature, or a blank string 
 if all the components of the feature have been enumerated. A 0-based index is used
 to enumerate the components one at a time. The product in use must be in the
 profile, otherwise no components are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentFromFeature({\i productCode, featureName, componentIndex})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product in use, must be in the profile.
\par{\i\b featureName}\line
Required. The feature whose components are to be enumerated.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyProfile_GetComponentName}
${\footnote MsispyProfile.GetComponentName}
+{\footnote MsispyProfile:GetComponentName}
K{\footnote Msispy Automation: GetComponentName}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentName Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a component whose GUID is passed in, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentName({\i componentGuid})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b componentGuid}\line
Required. The component whose name will be returned.
\page

#{\footnote HELPID_MsispyProfile_GetProductInfo}
${\footnote MsispyProfile.GetProductInfo}
+{\footnote MsispyProfile:GetProductInfo}
K{\footnote Msispy Automation: GetProductInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetProductInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a product, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetProductInfo({\i productCode, productAttribute})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product about which information will be returned.
\par{\i\b productAttribute}\line
Required. The required property of the product (case-sensitive). Valid attributes are:\line
\tab ProductName\line
\tab ProductVersion\line
\tab ProductCode\line
\tab Manufacturer\line
\tab SupportURL\line
\tab SupportPhone\line
\tab UserName\line
\tab UserOrgName\line
\tab ProductId\line
\page


#{\footnote HELPID_MsispyProfile_GetFeatureInfo}
${\footnote MsispyProfile.GetFeatureInfo}
+{\footnote MsispyProfile:GetFeatureInfo}
K{\footnote Msispy Automation: GetFeatureInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a feature, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureInfo({\i productCode, featureName, featureAttribute})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\par{\i\b featureAttribute}\line
Required. The required property of the feature (case-sensitive). Valid attributes are:\line
\tab Feature\line
\tab Feature_Parent\line
\tab Title\line
\tab Description\line
\tab Display\line
\tab Level\line
\tab Directory_Configurable\line
\tab RunFromSource\line
\page

#{\footnote HELPID_MsispyProfile_QueryProductState}
${\footnote MsispyProfile.QueryProductState}
+{\footnote MsispyProfile:QueryProductState}
K{\footnote Msispy Automation: QueryProductState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryProductState Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a product on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryProductState({\i productCode})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product about which information will be returned.
\page

#{\footnote HELPID_MsispyProfile_QueryFeatureState}
${\footnote MsispyProfile.QueryFeatureState}
+{\footnote MsispyProfile:QueryFeatureState}
K{\footnote Msispy Automation: QueryFeatureState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryFeatureState Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a feature on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryFeatureState({\i productCode, featureName})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\page

#{\footnote HELPID_MsispyProfile_QueryComponentState}
${\footnote MsispyProfile.QueryComponentState}
+{\footnote MsispyProfile:QueryComponentState}
K{\footnote Msispy Automation: QueryComponentState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryComponentState Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a component on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryComponentState({\i productCode, componentGuid})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyProfile_GetFeatureUsage}
${\footnote MsispyProfile.GetFeatureUsage}
+{\footnote MsispyProfile:GetFeatureUsage}
K{\footnote Msispy Automation: GetFeatureUsage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureUsage Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns the usage-count of a feature on the local system. Returns 0 if the
 information could not be obtained.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureUsage({\i productCode, featureName})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\page

#{\footnote HELPID_MsispyProfile_GetClientFromComponent}
${\footnote MsispyProfile.GetClientFromComponent}
+{\footnote MsispyProfile:GetClientFromComponent}
K{\footnote Msispy Automation: GetClientFromComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetClientFromComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing product-code of a client-product of the component, or a blank 
 string if all the clients of the component have been enumerated. A 0-based index is used
 to enumerate the clients one at a time. The component being used must be in the
 profile, otherwise no clients are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetClientFromComponent({\i componentGuid, clientIndex})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b componentGuid}\line
Required. The component whose clients are to be enumerated, must be in the profile.
\par{\i\b clientIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyProfile_GetFileFromComponent}
${\footnote MsispyProfile.GetFileFromComponent}
+{\footnote MsispyProfile:GetFileFromComponent}
K{\footnote Msispy Automation: GetFileFromComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileFromComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a file used by the component, or a blank 
 string if all the files of the component have been enumerated. A 0-based index is used
 to enumerate the files one at a time. The component being used must be in the
 profile, otherwise no files are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileFromComponent({\i componentGuid, fileIndex})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b componentGuid}\line
Required. The component whose files are to be enumerated, must be in the profile.
\par{\i\b fileIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyProfile_GetFileInfo}
${\footnote MsispyProfile.GetFileInfo}
+{\footnote MsispyProfile:GetFileInfo}
K{\footnote Msispy Automation: GetFileInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a file, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileInfo({\i productCode, componentGuid, fileName, fileAttribute})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component to which the file belongs.
\par{\i\b fileName}\line
Required. The file about which information will be returned.
\par{\i\b fileAttribute}\line
Required. The required property of the file (case-sensitive). Valid attributes are:\line
\tab FileTitle\line
\tab FileSize\line
\tab Version\line
\tab Language\line
\tab Attributes\line
\tab Sequence\line
\tab FileActualSize\line
\tab FileCreated\line
\tab FileModified\line
\tab FileAccessed\line
\tab FileStatus\line
\page

#{\footnote HELPID_MsispyProfile_GetComponentLocation}
${\footnote MsispyProfile.GetComponentLocation}
+{\footnote MsispyProfile:GetComponentLocation}
K{\footnote Msispy Automation: GetComponentLocation}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentLocation Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the full path to the keyfile of a component.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentLocation({\i componentGuid})}
\par{\i object}\line
Required. The MsispyProfile object.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyProfile_GetComponentPath}
${\footnote MsispyProfile.GetComponentPath}
+{\footnote MsispyProfile:GetComponentPath}
K{\footnote Msispy Automation: GetComponentPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentPath Property
\line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the full path to the keyfile of a component.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentPath({\i productCode, componentGuid})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyRegistry}
${\footnote MsispyRegistry Object}
K{\footnote Msispy Automation: MsispyRegistry Object}
+{\footnote Class:MsispyRegistry}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsispyRegistry Object
\line\fs18\b0\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
The registry object accesses the local registry on a machine to obtain information
 about products installed by MSI.\par
Before the MsispyRegistry object is released (by going out of scope or by setting the
 object variable to Nothing), the {\uldb Close}{\v HELPID_MsispyRegistry_Close} method
 must be called to release all handles.
\par\li0{\b Properties}\par\li180
{\uldb GetProduct}{\v HELPID_MsispyRegistry_GetProduct}\line
{\uldb GetFeatureFromProduct}{\v HELPID_MsispyRegistry_GetFeatureFromProduct}\line
{\uldb GetProduct}{\v HELPID_MsispyRegistry_GetProduct}\line
{\uldb GetFeatureFromProduct}{\v HELPID_MsispyRegistry_GetFeatureFromProduct}\line
{\uldb GetComponent}{\v HELPID_MsispyRegistry_GetComponent}\line
{\uldb GetComponentFromProduct}{\v HELPID_MsispyRegistry_GetComponentFromProduct}\line
{\uldb GetComponentFromFeature}{\v HELPID_MsispyRegistry_GetComponentFromFeature}\line
{\uldb GetComponentName}{\v HELPID_MsispyRegistry_GetComponentName}\line
{\uldb GetProductInfo}{\v HELPID_MsispyRegistry_GetProductInfo}\line
{\uldb GetFeatureInfo}{\v HELPID_MsispyRegistry_GetFeatureInfo}\line
{\uldb QueryProductState}{\v HELPID_MsispyRegistry_QueryProductState}\line
{\uldb QueryFeatureState}{\v HELPID_MsispyRegistry_QueryFeatureState}\line
{\uldb QueryComponentState}{\v HELPID_MsispyRegistry_QueryComponentState}\line
{\uldb GetFeatureUsage}{\v HELPID_MsispyRegistry_GetFeatureUsage}\line
{\uldb GetClientFromComponent}{\v HELPID_MsispyRegistry_GetClientFromComponent}\line
{\uldb GetFileFromComponent}{\v HELPID_MsispyRegistry_GetFileFromComponent}\line
{\uldb GetFileInfo}{\v HELPID_MsispyRegistry_GetFileInfo}\line
{\uldb GetComponentLocation}{\v HELPID_MsispyRegistry_GetComponentLocation}\line
{\uldb GetComponentPath}{\v HELPID_MsispyRegistry_GetComponentPath}\line
\par\li0{\b Methods}\par\li180
{\uldb Open}{\v HELPID_MsispyRegistry_Open}\line
{\uldb Close}{\v HELPID_MsispyRegistry_Close}\line
\page

#{\footnote HELPID_MsispyRegistry_Open}
${\footnote MsispyRegistry.Open}
+{\footnote MsispyRegistry.Open}
K{\footnote Msispy Automation: Open}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Open Method
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Opens a registry object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Open()}
\par{\i object}\line
Required. The MsispyRegistry object.
\page


#{\footnote HELPID_MsispyRegistry_Close}
${\footnote MsispyRegistry.Close}
+{\footnote MsispyRegistry.Close}
K{\footnote Msispy Automation: Close}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Close Method
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Closes a registry object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Close()}
\par{\i object}\line
Required. The MsispyRegistry object.
\page

#{\footnote HELPID_MsispyRegistry_GetProduct}
${\footnote MsispyRegistry.GetProduct}
+{\footnote MsispyRegistry:GetProduct}
K{\footnote Msispy Automation: GetProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the product-code of a product in the registry, or
 a blank string if all the products in the registry have been enumerated.
 A 0-based index is used to enumerate the products one at a time.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetProduct({\i productIndex})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyRegistry_GetFeatureFromProduct}
${\footnote MsispyRegistry.GetFeatureFromProduct}
+{\footnote MsispyRegistry:GetFeatureFromProduct}
K{\footnote Msispy Automation: GetFeatureFromProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureFromProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a feature of the product, or a blank string 
 if all the features of the product have been enumerated. A 0-based index is used
 to enumerate the features one at a time. The product being used must be in the
 registry, otherwise no features are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureFromProduct({\i productCode, featureIndex})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product whose features are to be enumerated, must be in the registry.
\par{\i\b featureIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyRegistry_GetComponent}
${\footnote MsispyRegistry.GetComponent}
+{\footnote MsispyRegistry:GetComponent}
K{\footnote Msispy Automation: GetComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component in the registry, or
 a blank string if all the components in the registry have been enumerated.
 A 0-based index is used to enumerate the components one at a time.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponent({\i componentIndex})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyRegistry_GetComponentFromProduct}
${\footnote MsispyRegistry.GetComponentFromProduct}
+{\footnote MsispyRegistry:GetComponentFromProduct}
K{\footnote Msispy Automation: GetComponentFromProduct}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentFromProduct Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component of the product, or a blank string 
 if all the components of the product have been enumerated. A 0-based index is used
 to enumerate the components one at a time. The product being used must be in the
 registry, otherwise no components are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentFromProduct({\i productCode, componentIndex})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product whose components are to be enumerated, must be in the registry.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyRegistry_GetComponentFromFeature}
${\footnote MsispyRegistry.GetComponentFromFeature}
+{\footnote MsispyRegistry:GetComponentFromFeature}
K{\footnote Msispy Automation: GetComponentFromFeature}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentFromFeature Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the GUID of a component of the feature, or a blank string 
 if all the components of the feature have been enumerated. A 0-based index is used
 to enumerate the components one at a time. The product in use must be in the
 registry, otherwise no components are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentFromFeature({\i productCode, featureName, componentIndex})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product in use, must be in the registry.
\par{\i\b featureName}\line
Required. The feature whose components are to be enumerated.
\par{\i\b componentIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyRegistry_GetComponentName}
${\footnote MsispyRegistry.GetComponentName}
+{\footnote MsispyRegistry:GetComponentName}
K{\footnote Msispy Automation: GetComponentName}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentName Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a component whose GUID is passed in, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentName({\i componentGuid})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b componentGuid}\line
Required. The component whose name will be returned.
\page

#{\footnote HELPID_MsispyRegistry_GetProductInfo}
${\footnote MsispyRegistry.GetProductInfo}
+{\footnote MsispyRegistry:GetProductInfo}
K{\footnote Msispy Automation: GetProductInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetProductInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a product, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetProductInfo({\i productCode, productAttribute})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product about which information will be returned.
\par{\i\b productAttribute}\line
Required. The required property of the product (case-sensitive). Valid attributes are:\line
\tab ProductName\line
\tab ProductVersion\line
\tab ProductCode\line
\tab Manufacturer\line
\tab SupportURL\line
\tab SupportPhone\line
\tab UserName\line
\tab UserOrgName\line
\tab ProductId\line
\page


#{\footnote HELPID_MsispyRegistry_GetFeatureInfo}
${\footnote MsispyRegistry.GetFeatureInfo}
+{\footnote MsispyRegistry:GetFeatureInfo}
K{\footnote Msispy Automation: GetFeatureInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a feature, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureInfo({\i productCode, featureName, featureAttribute})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\par{\i\b featureAttribute}\line
Required. The required property of the feature (case-sensitive). Valid attributes are:\line
\tab Feature\line
\tab Feature_Parent\line
\tab Title\line
\tab Description\line
\tab Display\line
\tab Level\line
\tab Directory_Configurable\line
\tab RunFromSource\line
\page

#{\footnote HELPID_MsispyRegistry_QueryProductState}
${\footnote MsispyRegistry.QueryProductState}
+{\footnote MsispyRegistry:QueryProductState}
K{\footnote Msispy Automation: QueryProductState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryProductState Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a product on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryProductState({\i productCode})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product about which information will be returned.
\page

#{\footnote HELPID_MsispyRegistry_QueryFeatureState}
${\footnote MsispyRegistry.QueryFeatureState}
+{\footnote MsispyRegistry:QueryFeatureState}
K{\footnote Msispy Automation: QueryFeatureState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryFeatureState Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a feature on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryFeatureState({\i productCode, featureName})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\page

#{\footnote HELPID_MsispyRegistry_QueryComponentState}
${\footnote MsispyRegistry.QueryComponentState}
+{\footnote MsispyRegistry:QueryComponentState}
K{\footnote Msispy Automation: QueryComponentState}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
QueryComponentState Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a numeric value that represents the install-state of a component on the
 local system. The value returned is one of the following:\line
\tab -6: configuration data corrupt\line
\tab -5: installation suspended or in progress\line
\tab -4: run from source, source is unavailable\line
\tab -3: return buffer overflow\line
\tab -2: invalid function argument\line
\tab -1: unrecognized product or feature\line
\tab  0: broken\line
\tab  1: advertised\line
\tab  2: uninstalled\line
\tab  3: installed on local drive\line
\tab  4: run from source, CD or net\line
\tab  5: use default, local or source\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .QueryComponentState({\i productCode, componentGuid})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyRegistry_GetFeatureUsage}
${\footnote MsispyRegistry.GetFeatureUsage}
+{\footnote MsispyRegistry:GetFeatureUsage}
K{\footnote Msispy Automation: GetFeatureUsage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureUsage Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns the usage-count of a feature on the local system. Returns 0 if the
 information could not be obtained.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureUsage({\i productCode, featureName})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product to which the feature belongs.
\par{\i\b featureName}\line
Required. The feature about which information will be returned.
\page

#{\footnote HELPID_MsispyRegistry_GetClientFromComponent}
${\footnote MsispyRegistry.GetClientFromComponent}
+{\footnote MsispyRegistry:GetClientFromComponent}
K{\footnote Msispy Automation: GetClientFromComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetClientFromComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing product-code of a client-product of the component, or a blank 
 string if all the clients of the component have been enumerated. A 0-based index is used
 to enumerate the clients one at a time. The component being used must be in the
 registry, otherwise no clients are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetClientFromComponent({\i componentGuid, clientIndex})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b componentGuid}\line
Required. The component whose clients are to be enumerated, must be in the registry.
\par{\i\b clientIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyRegistry_GetFileFromComponent}
${\footnote MsispyRegistry.GetFileFromComponent}
+{\footnote MsispyRegistry:GetFileFromComponent}
K{\footnote Msispy Automation: GetFileFromComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileFromComponent Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the name of a file used by the component, or a blank 
 string if all the files of the component have been enumerated. A 0-based index is used
 to enumerate the files one at a time. The component being used must be in the
 registry, otherwise no files are enumerated.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileFromComponent({\i componentGuid, fileIndex})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b componentGuid}\line
Required. The component whose files are to be enumerated, must be in the registry.
\par{\i\b fileIndex}\line
Required. The 0-based index used for enumeration.
\page

#{\footnote HELPID_MsispyRegistry_GetFileInfo}
${\footnote MsispyRegistry.GetFileInfo}
+{\footnote MsispyRegistry:GetFileInfo}
K{\footnote Msispy Automation: GetFileInfo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileInfo Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing a specific property of a file, or
 a blank string if the required information could not be found.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileInfo({\i productCode, componentGuid, fileName, fileAttribute})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component to which the file belongs.
\par{\i\b fileName}\line
Required. The file about which information will be returned.
\par{\i\b fileAttribute}\line
Required. The required property of the file (case-sensitive). Valid attributes are:\line
\tab FileTitle\line
\tab FileSize\line
\tab Version\line
\tab Language\line
\tab Attributes\line
\tab Sequence\line
\tab FileActualSize\line
\tab FileCreated\line
\tab FileModified\line
\tab FileAccessed\line
\tab FileStatus\line
\page

#{\footnote HELPID_MsispyRegistry_GetComponentLocation}
${\footnote MsispyRegistry.GetComponentLocation}
+{\footnote MsispyRegistry:GetComponentLocation}
K{\footnote Msispy Automation: GetComponentLocation}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentLocation Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the full path to the keyfile of a component.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentLocation({\i componentGuid})}
\par{\i object}\line
Required. The MsispyRegistry object.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

#{\footnote HELPID_MsispyRegistry_GetComponentPath}
${\footnote MsispyRegistry.GetComponentPath}
+{\footnote MsispyRegistry:GetComponentPath}
K{\footnote Msispy Automation: GetComponentPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetComponentPath Property
\line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry}
\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects}
\par}\li180
Returns a string containing the full path to the keyfile of a component.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetComponentPath({\i productCode, componentGuid})}
\par{\i object}\line
Required. The MsispyDatabase object.
\par{\i\b productCode}\line
Required. The product to which the component belongs.
\par{\i\b componentGuid}\line
Required. The component about which information will be returned.
\page

}
