{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20

#{\footnote MsiServices_Object}
${\footnote MsiServices Object}
K{\footnote MsiServices}
+{\footnote Class:MsiServices}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiServices Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiServices component provides common platform services, exposed as a set   
of objects which expose, in a platform-independent manner, functionality such as 
file, directory, registry, and memory services. Common data handling is 
supported by the string and record objects, and by the property management. 
The database subsystem is also contained within the services component.
\par
The MsiServices object must be the first to be instantiated, as the other 
objects are dependent upon its functionality. No errors are handled within 
this component; the information is packaged and returned to the outside caller. 
For C++ callers, the error information is returned as a record object; for 
OLE automation callers, it is returned in the error exception object.
\par\li0{\b Properties}\par\li180
{\uldb LoggingEnabled}{\v MsiServices_LoggingEnabled}\line
\par\li0{\b Methods}\par\li180
{\uldb AttachClient}{\v MsiServices_AttachClient}\line
{\uldb DetachClient}{\v MsiServices_DetachClient}\line
{\uldb CreateCopier}{\v MsiServices_CreateCopier}\line
{\uldb CreatePatcher}{\v MsiServices_CreatePatcher}\line
{\uldb CreateString}{\v MsiServices_CreateString}\line
{\uldb CreateRecord}{\v MsiServices_CreateRecord}\line
{\uldb SetPlatformProperties}{\v MsiServices_SetPlatformProperties}\line
{\uldb GetShellFolderPath}{\v MsiServices_GetShellFolderPath}\line
{\uldb GetUserProfilePath}{\v MsiServices_GetUserProfilePath}\line
{\uldb CreateLog}{\v MsiServices_CreateLog}\line
{\uldb WriteLog}{\v MsiServices_WriteLog}\line
{\uldb CreateDatabase}{\v MsiServices_CreateDatabase}\line
{\uldb CreateDatabaseFromStorage}{\v MsiServices_CreateDatabaseFromStorage}\line
{\uldb CreateFilePath}{\v MsiServices_CreateFilePath}\line
{\uldb CreatePath}{\v MsiServices_CreatePath}\line
{\uldb CreateVolume}{\v MsiServices_CreateVolume}\line
{\uldb CreateVolumeFromLabel}{\v MsiServices_CreateVolumeFromLabel}\line
{\uldb EnumDriveType}{\v MsiServices_EnumDriveType}\line
{\uldb ClearAllCaches}{\v MsiServices_ClearAllCaches}\line
{\uldb GetModuleUsage}{\v MsiServices_GetModuleUsage}\line
{\uldb GetLocalPath}{\v MsiServices_GetLocalPath}\line
{\uldb CreateRegKey}{\v MsiServices_CreateRegKey}\line
{\uldb RegisterFont}{\v MsiServices_RegisterFont}\line
{\uldb UnRegisterFont}{\v MsiServices_UnRegisterFont}\line
{\uldb WriteIniFile}{\v MsiServices_WriteIniFile}\line
{\uldb ReadIniFile}{\v MsiServices_ReadIniFile}\line
{\uldb GetLangNamesFromLangIDString}{\v MsiServices_GetLangNamesFromLangIDString}\line
{\uldb CreateStorage}{\v MsiServices_CreateStorage}\line
{\uldb GetUnhandledError}{\v MsiServices_GetUnhandledError}\line
{\uldb SupportLanguageId}{\v MsiServices_SupportLanguageId}\line
{\uldb GetAllocator}{\v MsiServices_GetAllocator}\line
{\uldb CreateShortcut}{\v MsiServices_CreateShortcut}\line
{\uldb RemoveShortcut}{\v MsiServices_RemoveShortcut}\line
{\uldb ExtractFileName}{\v MsiServices_ExtractFileName}\line
{\uldb ValidateFileName}{\v MsiServices_ValidateFileName}\line
{\uldb CreateFileStream}{\v MsiServices_CreateFileStream}\line
{\uldb CreateMemoryStream}{\v MsiServices_CreateMemoryStream}\line
{\uldb RegisterTypeLibrary}{\v MsiServices_RegisterTypeLibrary}\line
{\uldb UnregisterTypeLibrary}{\v MsiServices_UnregisterTypeLibrary}\line
{\uldb RipFileNameFromPath}{\v MsiServices_RipFileNameFromPath}\line

\page

#{\footnote MsiServices_AttachClient}
${\footnote MsiServices.AttachClient}
+{\footnote MsiServices:AttachClient}
K{\footnote AttachClient}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
AttachClient method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is undocumented.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .AttachClient}
\par{\i object}\line
Required. The MsiServices object.
\page

#{\footnote MsiServices_DetachClient}
${\footnote MsiServices.DetachClient}
+{\footnote MsiServices:DetachClient}
K{\footnote DetachClient}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DetachClient method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is undocumented.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DetachClient}
\par{\i object}\line
Required. The MsiServices object.
\page

#{\footnote MsiServices_LoggingEnabled}
${\footnote MsiServices.LoggingEnabled}
+{\footnote MsiServices:LoggingEnabled}
K{\footnote LoggingEnabled}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
LoggingEnabled Property
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A boolean indicating whether logging is currently enabled.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .LoggingEnabled}
\par{\i object}\line
Required. The MsiServices object.
\page

#{\footnote MsiServices_CreateString}
${\footnote MsiServices.CreateString}
+{\footnote MsiServices:CreateString}
K{\footnote CreateString}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateString Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns an MsiString object containing an empty string. Note that MsiString 
objects are not used by the OLE Automation interface, except for testing.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateString}
\par{\i object}\line
Required. The MsiServices object.
\page

#{\footnote MsiServices_CreateRecord}
${\footnote MsiServices.CreateRecord}
+{\footnote MsiServices:CreateRecord}
K{\footnote CreateRecord}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateRecord Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a new {\uldb MsiRecord object}{\v MsiRecord_Object} with the 
requested number of fields.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateRecord({\i count})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b count}\line
Required. The number of fields, which may be 0. The upper limit is memory limited.
\par\fi0\li0{\b Remarks}\par\li180
Field 0, not one of the fields in {\i\b count}, is reserved for the format string,
 which is used by {\uldb MsiRecord.FormatText}{\v MsiRecord_FormatText}.
\page

#{\footnote MsiServices_SetPlatformProperties}
${\footnote MsiServices.SetPlatformProperties}
+{\footnote MsiServices:SetPlatformProperties}
K{\footnote SetPlatformProperties}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetPlatformProperties Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Sets hardware and operating system properties. See 
{\uldb Property Summary}{\v Property_Contents} for complete listing. 
This method is normally called by the MsiEngine object at initialization.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetPlatformProperties{\i table, allUsersProfile}}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b table}\line
Required. The MsiTable object containing the property definitions.
 The first column must be the primary key containing the property names.
 The second column must contain the string values of the properties.
 The table may be empty or may contain initial property definitions.
\par{\i\b allUsersProfile}\line
Required. Boolean. True to set profile folder properties to folders in the "All Users"
 profile, if it exists. False to set those properties to folders in the user's personal
 profile.
\page

#{\footnote MsiServices_GetShellFolderPath}
${\footnote MsiServices.GetShellFolderPath}
+{\footnote MsiServices:GetShellFolderPath}
K{\footnote GetShellFolderPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetShellFolderPath Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the path to a shell folder.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetShellFolderPath({\i folderId, regValue})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b folderId}\line
Required. The CSIDL_* value corresponding to this shell folder. These values are
 defined in the Windows header shlobj.h.
\par{\i\b regValue}\line
Optional. The registry value under
 (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE)\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\(Shell Folders or User Shell Folders)
 in which the folder is registered. This argument is required to locate a folder that
 does not physically exist.
\page

#{\footnote MsiServices_GetUserProfilePath}
${\footnote MsiServices.GetUserProfilePath}
+{\footnote MsiServices:GetUserProfilePath}
K{\footnote GetUserProfilePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetUserProfilePath Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the path to the user's profile folder on Windows NT.  Returns an empty string on Windows 95.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetUserProfilePath}
\par{\i object}\line
Required. The MsiServices object.
\page

#{\footnote MsiServices_CreateLog}
${\footnote MsiServices.CreateLog}
+{\footnote MsiServices:CreateLog}
K{\footnote CreateLog}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateLog Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Opens a file for subsequent logging using the {\uldb WriteLog}{\v MsiServices_WriteLog} method.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateLog({\i path, append})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b path}\line
Required. The path specification for the logfile to be created.
\par{\i\b append}\line
Required. A boolean: True to append to existing information in the file, False to clear any existing data.
\page

#{\footnote MsiServices_WriteLog}
${\footnote MsiServices.WriteLog}
+{\footnote MsiServices:WriteLog}
K{\footnote WriteLog}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
WriteLog Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Writes a line of text to the log file.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .WriteLog({\i text})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b text}\line
Required. A string containing the text to write to the log file.
 A line separator will be written following the text.
\page

#{\footnote MsiServices_CreateDatabase}
${\footnote MsiServices.CreateDatabase}
+{\footnote MsiServices:CreateDatabase}
K{\footnote CreateDatabase;idbCreate;idbMsi;idbAccess;idbSQLServer;idbODBC}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateDatabase Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates and returns an MsiDatabase object. Generates an error if the database 
object could not be succcessful connected to the database.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateDatabase({\i name, openMode})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b name}\line
Optional. String containing the name of the database. If no name is
 supplied, a temporary database will be created which is not persisted.
\par{\i\b openMode}\line
Required. How to open the database file, one of the idoEnum values:
\line{\f1  idoReadOnly     } - Read only
\line{\f1  idoTransact     } - Transacted mode, can rollback
\line{\f1  idoDirect       } - Direct write, not transacted
\line{\f1  idoCreate       } - Create new storage file, transacted mode
\line{\f1  idoCreateDirect } - Create new storage file, direct mode
\line{\f1  idoScript       } - Open an execution script for enumeration
\par\fi0\li0{\b Remarks}\par\li180
If the database is opened read-write, changes will be written to that database.
 If it is opened read-only, then SetOutputDatabase must be used to save updates.
\page

#{\footnote MsiServices_CreateDatabaseFromStorage}
${\footnote MsiServices.CreateDatabaseFromStorage}
+{\footnote MsiServices:CreateDatabaseFromStorage}
K{\footnote CreateDatabaseFromStorage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateDatabaseFromStorage Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates and returns an MsiDatabase object using an opened MsiStorage
 object to access the database streams. Generates an error if the database 
 object could not be succcessful generated from the storage object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateDatabaseFromStorage({\i storage, readOnly})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b storage}\line
Required. MsiStorage object which contains the database data.
 This must have been opened read-write if the database is to be opened read-write.
\par{\i\b readOnly}\line
Required. Boolean: True to open read-only, False to open read-write
\par\fi0\li0{\b Remarks}\par\li180
If the database is opened read-write, changes will be written to that database.
 If it is opened read-only, then SetOutputDatabase must be used to save updates.
\page

#{\footnote MsiServices_CreateFilePath}
${\footnote MsiServices.CreateFilePath}
+{\footnote MsiServices:CreateFilePath}
K{\footnote CreateFilePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateFilePath Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method provides for the creation of an {\uldb MsiPath}{\v MsiPath_Object} object, based on a full path to a file.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateFilePath({\i path})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b path}\line
Required. A full pathname to a file, including a full volume specification.
\par\fi0\li0{\b Remarks}\par\li180
See the documentation for the {\uldb MsiPath}{\v MsiPath_Object} object for details
 regarding path and volume syntax.
\page

#{\footnote MsiServices_RipFileNameFromPath}
${\footnote MsiServices.RipFileNameFromPath}
+{\footnote MsiServices:RipFileNameFromPath}
K{\footnote RipFileNameFromPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RipFileNameFromPath Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Given a full path to a file, this method returns the file name.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RipFileNameFromPath({\i path})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b path}\line
Required. A full pathname to a file, including a full volume specification.
\par\fi0\li0{\b Remarks}\par\li180
See the documentation for the {\uldb MsiPath}{\v MsiPath_Object} object for details
 regarding path and volume syntax.
\page

#{\footnote MsiServices_CreatePath}
${\footnote MsiServices.CreatePath}
+{\footnote MsiServices:CreatePath}
K{\footnote CreatePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreatePath Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method provides for the creation of an {\uldb MsiPath}{\v MsiPath_Object} object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreatePath({\i path})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b path}\line
Required. A full pathname to a directory, including a full volume specification.
\par\fi0\li0{\b Remarks}\par\li180
See the documentation for the {\uldb MsiPath}{\v MsiPath_Object} object for details
 regarding path and volume syntax.
\page

#{\footnote MsiServices_CreateVolume}
${\footnote MsiServices.CreateVolume}
+{\footnote MsiServices:CreateVolume}
K{\footnote CreateVolume}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateVolume Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method provides for the creation of an MsiVolume object, which is
 used to represent a physical disk drive.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateVolume({\i volPath,fSuppressLFN})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b volPath}\line
Required. A pathname that includes a valid volume reference.  See the documentation
 for the {\uldb MsiPath}{\v MsiPath_Object} object for details regarding path syntax.
\par\fi0\li0{\b Remarks}\par\li180
Note: Any path information beyond the volume specification, and any trailing directory
 separators, will be ignored by the CreateVolume method.  Thus, all the following calls 
 are functionally identical:\line
\line
 {\f1
 services.CreateVolume("\\\\MyServer\\MyShare")\line
 services.CreateVolume("\\\\MyServer\\MyShare\\")\line
 services.CreateVolume("\\\\MyServer\\MyShare\\Dir1\\Dir2")\line
 services.CreateVolume("\\\\MyServer\\MyShare\\Dir1\\Dir2\\")\line
 }
\page

#{\footnote MsiServices_CreateVolumeFromLabel}
${\footnote MsiServices.CreateVolumeFromLabel}
+{\footnote MsiServices:CreateVolumeFromLabel}
K{\footnote CreateVolumeFromLabel}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateVolumeFromLabel Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method searches for a mounted volume having a specified type and specified label.
 If the specified volume is found, an {\uldb MsiVolume}{\v MsiVolume_Object} object will
 be created and returned.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateVolumeFromLabel({\i label, driveType})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b label}\line
Required. A string specifying the label of the volume to be searched for.
\par{\i\b driveType}\line
Required. An enumeration value of type {\uldb idtEnum}{\v MsiServices_EnumDriveType}, specifying
 the type of volume to be searched for.
\par\fi0\li0{\b Remarks}\par\li180
If there is no mounted volume of the specified type and label, error 1000 will be thrown, and
 no volume object will be returned.
\page

#{\footnote MsiServices_CreateCopier}
${\footnote MsiServices.CreateCopier}
+{\footnote MsiServices:CreateCopier}
K{\footnote CreateCopier}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateCopier Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates an {\uldb MsiFileCopy}{\v MsiFileCopy_Object} object, which can be
 used to copy files from a source directory (i.e. the full path associated
 with this MsiPath object) to a specified destination directory.  Once the
 MsiFileCopy object has been created, the {\uldb CopyTo}{\v MsiFileCopy_CopyTo}
 function can be used to perform the actual file copy.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateCopier({\i copierType,storage})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b copierType}\line
An integer enumeration value specifying the type of copier object to be created. The
 following values are acceptable:\par
{\f1 \ul ictFileCopier = 0}\line
A copy object suitable for copying uncompressed files.\par
{\f1 \ul ictFileCabinetCopier = 1}\line
A copy object suitable for copying files compressed in a standard cabinet file.\par
{\f1 \ul ictStreamCabinetCopier = 2}\line
A copy object suitable for copying files compressed in a cabinet stored as a stream within an MsiStorage
 object (see the {\i\b storage} parameter below).\par
{\f1 \ul ictResourceCabinetCopier = 3}\line
Obsolete.  Currently still supported for compatibility.  Copies files from a cabinet stored as a
 resource within a Launcher.  However, note that from automation, there's no way to exploit this
 copier type, because we have no mechanism available through automation to provide the valid HINSTANCE
 of a module containing the cabinet resource.\par
\par{\i\b storage}\line
Optional.  If the copier type is ictStreamCabinetCopier, this parameter must be supplied as an MsiStorage
 object that contains a cabinet as a named stream.
\page

#{\footnote MsiServices_CreatePatcher}
${\footnote MsiServices.CreatePatcher}
+{\footnote MsiServices:CreatePatcher}
K{\footnote CreatePatcher}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreatePatcher Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates an {\uldb MsiFilePatch}{\v MsiFilePatch_Object} object, which can be
 used to patch existing files.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreatePatcher}
\par{\i object}\line
Required. The MsiServices object.
\page

#{\footnote MsiServices_EnumDriveType}
${\footnote MsiServices.EnumDriveType}
+{\footnote MsiServices:EnumDriveType}
K{\footnote EnumDriveType;idtEnum}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
EnumDriveType Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns an enumeration object containing a collection of MsiVolume objects representing all the mounted volumes
 of a specified type.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .EnumDriveType({\i driveType})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b driveType}\line
Required. The type of volume to be enumerated, one of idtEnum:\line
   {\f1 idtAllDrives = 1   } Enumerate drives of all types\line
   {\f1 idtRemovable = 2   } Drive contains non-floppy removable media\line
   {\f1 idtFixed     = 3   } Hard disk drive\line
   {\f1 idtRemote    = 4   } Network server share\line
   {\f1 idtCDROM     = 5   } CD_ROM drive\line
   {\f1 idtRAMDisk   = 6   } RAM disk\line
   {\f1 idtFloppy    = 2   } Floppy disk (currently not distinguished from idtRemovable). \line
\page

#{\footnote MsiServices_ClearAllCaches}
${\footnote MsiServices.ClearAllCaches}
+{\footnote MsiServices:ClearAllCaches}
K{\footnote ClearAllCaches}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ClearAllCaches Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Clears all caches in the services object. Currently these caches are
 references to created volume objects in the internal volume cache and
 cached record objects (for performance).
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ClearAllCaches}
\par{\i object}\line
Required. The MsiServices object.
\par\fi0\li0{\b Remarks}\par\li180
Each time an MsiVolume object is to be created (usually in conjunction with an
 associated MsiPath object), Darwin checks to see if an MsiVolume object already
 exists for the referenced volume.  If so, a reference to that object is returned
 by the {\uldb CreateVolume}{\v MsiServices_CreateVolume} method, obviating the
 need to create a new MsiVolume object from scratch.  
 Each time a record is released we add it to a record cache (assuming there is still room)
 in order to save time by not returning it to the memory pool. When a record of the same
 size is needed, we return a record from the cache if one is available.
 The ClearAllCaches method
 clears the volume cache and record cache, and is called by the Darwin Engine dll at setup termination.
\page

#{\footnote MsiServices_GetModuleUsage}
${\footnote MsiServices.GetModuleUsage}
+{\footnote MsiServices:GetModuleUsage}
K{\footnote GetModuleUsage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetModuleUsage Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetModuleUsage function enumerates all the processes on the user system that have currently 
loaded a given executable module in their address space. The function returns an enumeration of 
MsiRecord objects, one for each such process. The record has 3 fields - The first field is a 
string which is the process name. The second field is an integer which is the process id. The 
third field is an integer which is the handle of the top level window of the process. The third 
field is null if there is no top level window for the process.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetModuleUsage({\i fileName})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b fileName}\line
Required. A string that is the file name of the executable module.
\par\fi0\li0{\b Remarks}\par\li180
 Note: The file name of the module must be the file name only and not the full path.
\page

#{\footnote MsiServices_GetLocalPath}
${\footnote MsiServices.GetLocalPath}
+{\footnote MsiServices:GetLocalPath}
K{\footnote GetLocalPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetLocalPath Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Windows:\line
Returns a string representing the full path of the installer's launch directory.\line
\line
Mac:\line
Returns a string representing the full path of the MsiServices DLL directory.\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetLocalPath({\i fileName})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b fileName}\line
Optional.  If supplied, this file name will be appended to the path returned by GetLocalPath.\line
\par\fi0\li0{\b Remarks}\par\li180
(Windows Only)\line
If the string supplied in the fileName parameter has the format of a fully qualified path (i.e. a
 colon in the 2nd character position, or two leading backslash characters), that string itself will 
 be returned. Otherwise, no error checking is performed on the supplied fileName parameter 
 before it is appended.
\page

#{\footnote MsiServices_CreateRegKey}
${\footnote MsiServices.CreateRegKey}
+{\footnote MsiServices:CreateRegKey}
K{\footnote CreateRegKey}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateRegKey Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates a MsiRegKey object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateRegKey({\i value, subKey})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b value}\line
Required. A string which is one of the following predefined roots
\line{\f1  "HKEY_CLASSES_ROOT"}
\line{\f1  "HKEY_CURRENT_USER"}
\line{\f1  "HKEY_LOCAL_MACHINE"}
\line{\f1  "HKEY_USERS"}
\par{\i\b subKey}\line
Required. A string which is denotes the subkey below the predefined root {\i\b value}
\par\fi0\li0{\b Remarks}\par\li180
The actual registry key is not opened or created on the construction of
 the MsiRegKey object.
\page

#{\footnote MsiServices_RegisterFont}
${\footnote MsiServices.RegisterFont}
+{\footnote MsiServices:RegisterFont}
K{\footnote RegisterFont}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RegisterFont Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Registers a font with the system.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RegisterFont({\i fontTitle, fontFile, path})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b fontTitle}\line
Required. the font title string.
\par{\i\b fontFile}\line
Required. the font filename.
\par{\i\b path}\line
Optional. the MsiPath object where the font file exists.
 If this argument is omitted, the font file is assumed to exist in the
 default font folder.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiServices_UnregisterFont}
${\footnote MsiServices.UnregisterFont}
+{\footnote MsiServices:UnregisterFont}
K{\footnote UnregisterFont}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
UnregisterFont Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Unregisters a font with the system.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .UnregisterFont({\i fontTitle})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b fontTitle}\line
Required. the font title string.
\par\fi0\li0{\b Remarks}\par\li180
\page



#{\footnote MsiServices_WriteIniFile}
${\footnote MsiServices.WriteIniFile}
+{\footnote MsiServices:WriteIniFile}
K{\footnote WriteIniFile;iifIniAddLine;iifIniCreateLine;iifIniRemoveLine;iifIniAddTag;iifIniRemoveTag}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
WriteIniFile Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb ReadIniFile Method}{\v MsiServices_ReadIniFile}
\par}\li180
Writes/Deletes an entry in a .INI file.
 Generates an error if a system error occurs during file update.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .WriteIniFile({\i path, file, section, key, value, action})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b path}\line
Optional. The MsiPath object to the .INI file. If absent, the windows directory is assumed.
 If this directory does not exist, a run-time error will be generated.
\par{\i\b file}\line
Required. A string denoting the .INI file name.
\par{\i\b section}\line
Required. A string denoting the section in the .INI file.
\par{\i\b key}\line
Required. A string denoting the key in the .INI file.
\par{\i\b value}\line
A string denoting the value for the key in the .INI file. Ignored for {\b iifIniRemoveLine} 
action.
\par{\i\b action}\line
Required. The type of .INI update, one of the iifIniMode values:
\line{\f1  iifIniAddLine    =0 }- Creates/Updates .INI entry
\line{\f1  iifIniCreateLine =1 }- Creates .INI entry only if absent
\line{\f1  iifIniRemoveLine =2 }- Deletes .INI entry
\line{\f1  iifIniAddTag     =3 }- Creates/ Appends a new comma separated tag(value) to a .INI entry
\line{\f1  iifIniRemoveTag  =4 }- Deletes a tag from a .INI entry
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiServices_ReadIniFile}
${\footnote MsiServices.ReadIniFile}
+{\footnote MsiServices:ReadIniFile}
K{\footnote ReadIniFile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ReadIniFile Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb WriteIniFile Method}{\v MsiServices_WriteIniFile}
\par}\li180
Reads an entry from a .INI file.
 Returns a string containing the value read from the .INI file. Generates an error 
 if a system error occurs during file read.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ReadIniFile({\i path, file, section, key, field})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b path}\line
Optional. The Path object to the .INI file. If absent, the windows directory is assumed.
\par{\i\b file}\line
Required. a string denoting the .INI file name.
\par{\i\b section}\line
Required. a string denoting the section in the .INI file.
\par{\i\b key}\line
Required. a string denoting the key in the .INI file.
\par{\i\b field}\line
Optional. integer denoting field to be read from the .INI file. If absent or 0, will read the 
entire line.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiServices_GetAllocator}
${\footnote MsiServices.GetAllocator}
+{\footnote MsiServices:GetAllocator}
K{\footnote GetAllocator}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetAllocator Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the system memory allocator as an
 {\uldb MsiMalloc}{\v MsiMalloc_Object} object.
 This method and the allocator are exposed solely for testing purposes.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetAllocator}
\par{\i object}\line
Required. The MsiServices object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiServices_GetLangNamesFromLangIDString}
${\footnote MsiServices.GetLangNamesFromLangIDString}
+{\footnote MsiServices:GetLangNamesFromLangIDString}
K{\footnote GetLangNamesFromLangIDString}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetLangNamesFromLangIDString Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Given a string containing a comma-separated list of language identifiers, 
GetLangNamesFromLangIDString returns the full localized name of each specified language 
in a record object supplied by the caller.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetLangNamesFromLangIDString({\i langIDString, langRec, iFieldStart})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b langIDString}\line
Required. A string containing a comma-separated list of valid language identifiers.  For 
example: "1031, 1033, 1046"\line
\par{\i\b langRec}\line
Required. An existing MsiRecord object.\line
\par{\i\b iFieldStart}\line
Required. An integer specifying the first field within langRec to begin storing language 
names.  Starting with this field, GetLangNamesFromLangIDString will store the converted 
language names in consecutively ascending record fields. 
\par\fi0\li0{\b Return Value:}\par\li180
A count of the successfully converted language IDs.
\par\fi0\li0{\b Remarks}\par\li180
GetLangNamesFromLangIDString will continue processing language IDs until either the end 
of the string is reached, a syntax error (such as a non-numeric character) is detected, 
an unassigned language ID is found, or the available fields within the record are exhausted. 
In any case, the count returned as the function result will reflect the number of language IDs 
successfully converted before the terminating condition was reached.\line\line
Note: If the iFieldStart parameter is greater than the number of allocated fields in the 
caller's MsiRecord object, GetLangNamesFromLangIDString will return immediately with a 
count of zero as the function result.
\page

#{\footnote MsiServices_CreateStorage}
${\footnote MsiServices.CreateStorage}
+{\footnote MsiServices:CreateStorage}
K{\footnote CreateStorage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateStorage Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates and returns an {\uldb MsiStorage}{\v MsiStorage_Object} object for a file, from which
 {\uldb MsiStream}{\v MsiStream_Object}
 objects can be created to read or write persistent data.            
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateStorage({\i path, openMode})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b path}\line
Required. The file path for the file on which the storage will be opened.
\par{\i\b openMode}\line
Required. The mode in which the storage will be created, one of ismEnum:
\line{\f1  ismReadOnly     } opens storage in read-only mode, required for read-only file.
\line{\f1  ismDirect       } opens storage in direct mode, non-transacted, cannot rollback.
\line{\f1  ismTransact     } opens storage in transacted mode, updates can be rolled back.
\line{\f1  ismCreateDirect } creates new file, overwriting any existing, in direct mode.
\line{\f1  ismCreate       } creates new file, overwriting any existing, in transacted mode.
\par\fi0\li0{\b Remarks}\par\li180
MsiStorage objects may be created internally from sources other than files,
 such as resources and memory buffers and substorages of other structured storage files.
\page

#{\footnote MsiServices_GetUnhandledError}
${\footnote MsiServices.GetUnhandledError}
+{\footnote MsiServices:GetUnhandledError}
K{\footnote GetUnhandledError}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetUnhandledError Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns an MsiRecord object containing the error information for an error
 that occured under conditions that could not be returned at the time.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetUnhandledError}
\par{\i object}\line
Required. The MsiServices object.
\par\fi0\li0{\b Remarks}\par\li180
Errors can sometimes occur during background processing and during destruction
 of objects. If the MsiRecord object containg the error information cannot
 be returned, it is posted internally, to be accessed at some later time
 using this method. Only the first such error will be retained. Calling this
 method will clear the error and allow another to be posted. Much of the
 need for unhandled errors can be eliminated by finalizing objects before
 they are released. For example, committing a database or storage object
 will report any write errors at that time, rather than relying upon the
 implicit commit during destruction of the object.
\page

#{\footnote MsiServices_SupportLanguageId}
${\footnote MsiServices.SupportLanguageId}
+{\footnote MsiServices:SupportLanguageId}
K{\footnote SupportLanguageId; Language}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SupportLanguageId Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Checks system support for the supplied language Id and returns the information as a figure of merit.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SupportLanguageId({\i languageId, systemDefault})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b languageId}\line
Required. The numeric Id representing the language, including the dialect (sub-language).
\par{\i\b languageId}\line
Required. Boolean: True to use SystemDefault language, False to use UserDefault language.
\par\fi-180\li180{\b Return Codes}, one of ismEnum
\line{\f1  isliNotSupported      = 0  } system configuration doesn't support the language Id
\line{\f1  isliLanguageMismatch  = 1  } base language differs from current user language Id
\line{\f1  isliDialectMismatch   = 2  } base language matches, but dialect mismatched
\line{\f1  isliLanguageOnlyMatch = 3  } base language matches, no dialect supplied
\line{\f1  isliExactMatch        = 4  } exact match, both language and dialect
\page

#{\footnote MsiServices_CreateShortcut}
${\footnote MsiServices.CreateShortcut}
+{\footnote MsiServices:CreateShortcut}
K{\footnote CreateShortcut; Language}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateShortcut Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates a shortcut.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateShortcut({\i shortcutPath, shortcutName, targetPath, targetName, shortcutInfo})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b shortcutPath}\line
Required. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the shortcut should be created.
\par{\i\b shortcutName}\line
Required. The name of the shortcut to be created.
\par{\i\b targetPath}\line
Required. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the target is.
\par{\i\b targetName}\line
Required. The name of the shortcut's target.
\par{\i\b shortcutInfo}\line
Optional. An {\uldb MsiRecord}{\v MsiRecord_Object} containing additional information
 about the shortcut. The record contains the following fields:

\line{\f1  icsArguments        = 1 } The command-line arguments for the shortcut.
\line{\f1  icsDescription      = 2 } The description for the shortcut.
\line{\f1  icsHotKey           = 3 } The hotkey for the shortcut. It has the
 virtual-key code for the key in the low-order byte, and the modifier flags in
 the high-order byte. 
\line{\f1  icsIconId           = 4 } The icon index for the shortcut.
\line{\f1  icsIconFullPath     = 5 } An {\uldb MsiPath}{\v MsiPath_Object} object
 denoting the external icon file for the shortcut.
\line{\f1  icsShowCmd          = 6 } The show command for the application window.
 The values are exactly as defined for the ShowWindow Windows API fn. See the
 {\uldb Shortcut Table}{\v _msi_Shortcut_Table@msi.hlp} help for more information.
\line{\f1  icsWorkingDirectory = 7 } An {\uldb MsiPath}{\v MsiPath_Object} object
 denoting the working directory for the shortcut.
\page


#{\footnote MsiServices_RemoveShortcut}
${\footnote MsiServices.RemoveShortcut}
+{\footnote MsiServices:RemoveShortcut}
K{\footnote RemoveShortcut; Language}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveShortcut Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Removes a shortcut.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveShortcut({\i shortcutPath, shortcutName, targetPath, targetName})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b shortcutPath}\line
Required. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the shortcut
 to be deleted is located.
\par{\i\b shortcutName}\line
Required. The name of the shortcut to be deleted.
\par{\i\b targetPath}\line
Optional. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the target is.
\par{\i\b targetName}\line
Optional. The name of the shortcut's target.
\page

#{\footnote MsiServices_ExtractFileName}
${\footnote MsiServices.ExtractFileName}
+{\footnote MsiServices:ExtractFileName}
K{\footnote ExtractFileName}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ExtractFileName Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Extract the appropriate name from a short|long pair of file names. The extracted name is
 validated for correct syntax. The name that is not extracted, if there is one, is not validated
 for syntax.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ExtractFileName({\i pair, longname})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b pair}\line
Required. The pair of file names, seperated by a '|'. This string may also contain only one name if
 desired.
\par{\i\b longname}\line
Required. Boolean. True to extract the long name, false to extract the short name.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiServices_ValidateFileName}
${\footnote MsiServices.ValidateFileName}
+{\footnote MsiServices:ValidateFileName}
K{\footnote ValidateFileName}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ValidateFileName Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Validates a file name for correct syntax. Can validate either short or long file names.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ValidateFileName({\i filename, longname})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b pair}\line
Required. String. The file name.
\par{\i\b longname}\line
Required. Boolean. True to validate for long name syntax, false to validate for short name syntax.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiServices_CreateFileStream}
${\footnote MsiServices.CreateFileStream}
+{\footnote MsiServices:CreateFileStream}
K{\footnote CreateFileStream}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateFileStream Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates and returns an {\uldb MsiStream}{\v MsiStream_Object} object that accesses the supplied file.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateFileStream({\i filePath, write})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b filePath}\line
Required string. The full path to the file.
\par{\i\b write}\line
Required boolean. True to create a writable stream, false to create a read-only stream.
\par\fi0\li0{\b Remarks}\par\li180
If a read-only stream is requested, the file must exist. If a writable stream is requested
 the file will be created if it does not exist, and will be truncated to 0 before the first write.
\page

#{\footnote MsiServices_CreateMemoryStream}
${\footnote MsiServices.CreateMemoryStream}
+{\footnote MsiServices:CreateMemoryStream}
K{\footnote CreateMemoryStream}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateMemoryStream Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates and returns an {\uldb MsiStream}{\v MsiStream_Object} object that accesses an allocated block of memory.
Memory streams are read-only. Attempts to write will cause the stream to be set to the error state.
The memory is allocated to hold the contents of a supplied string.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateMemoryStream({\i data})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b data}\line
Required string. A string which is copied (as Unicode) to the allocated memory stream buffer.
\par\fi0\li0{\b Remarks}\par\li180
The actual IMsiServices interface supports two functions, AllocateMemoryStream, and CreateStreamOnMemory.
 Because VBA does not easily deal with raw memory, this wrapper function accepts a string to determinine
 the size and contents of the allocated memory. The memory is released when the stream is destructed.
\page

#{\footnote MsiServices_RegisterTypeLibrary}
${\footnote MsiServices.RegisterTypeLibrary}
+{\footnote MsiServices:RegisterTypeLibrary}
K{\footnote RegisterTypeLibrary}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RegisterTypeLibrary Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Registers a type library using the Windows RegisterTypeLib API function.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RegisterTypeLibrary({\i libId, locale, path, helpPath})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b libId}\line
Required string. A string that represents the type library IID.
\par{\i\b locale}\line
Required integer. The locale.
\par{\i\b path}\line
Required string. The full file path of the type library.
\par{\i\b helpPath}\line
Optional string. The help file folder.
\par\fi0\li0{\b Remarks}\par\li180
The services object impersonates the user if running in the context of the Darwin service if the type library is located on a network path.
\page

#{\footnote MsiServices_UnregisterTypeLibrary}
${\footnote MsiServices.UnregisterTypeLibrary}
+{\footnote MsiServices:UnregisterTypeLibrary}
K{\footnote UnregisterTypeLibrary}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
UnregisterTypeLibrary Method
\line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Unregisters a type library using the Windows UnregisterTypeLib API function.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .UnregisterTypeLibrary({\i libId, locale, path})}
\par{\i object}\line
Required. The MsiServices object.
\par{\i\b libId}\line
Required string. A string that represents the type library IID.
\par{\i\b locale}\line
Required integer. The locale.
\par{\i\b path}\line
Required string. The full file path of the type library.
\par\fi0\li0{\b Remarks}\par\li180
The services object impersonates the user if running in the context of the Darwin service if the type library is located on a network path.
\page

#{\footnote MsiData_Object}
${\footnote MsiData Object}
+{\footnote Class:MsiData}
K{\footnote MsiData}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiData Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiData is a base object from which MsiString and other objects are derived.
 Its sole purpose is to permit the storage of objects in fields of MsiRecord
 and MsiTable objects. The only direct access to the data is via read-only properties.
 MsiData objects cannot be created directly. Rather, the ObjectData property of
 MsiCursor and MsiRecord return the stored objects as MsiData objects.
\par\li0{\b Properties}\par\li180
{\uldb StringValue}{\v MsiData_StringValue}\line
{\uldb IntegerValue}{\v MsiData_IntegerValue}\line
\page

#{\footnote MsiData_StringValue}
${\footnote MsiData.StringValue}
+{\footnote MsiData:StringValue}
K{\footnote StringValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
StringValue Property
\line\tx360\tab\fs18\b0{\uldb MsiData Object}{\v MsiData_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The string value for the MsiData object. This is the default property. 
Because the MsiData object is a common base class for other objects, this 
property returns a string representation of the underlying object. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .StringValue}
\par{\i object}\line
Required. The MsiData object.
\par\fi0\li0{\b Remarks}\par\li180
OLE automation transfers strings as Unicode on Windows platforms. The 
automation wrappers use the Win32 API to translate the strings to SBCS or 
DBCS strings for use with the non-Unicode version of Microsoft Installer.
\page

#{\footnote MsiData_IntegerValue}
${\footnote MsiData.IntegerValue}
+{\footnote MsiData:IntegerValue}
K{\footnote IntegerValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
IntegerValue Property
\line\tx360\tab\fs18\b0{\uldb MsiData Object}{\v MsiData_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The integer value for the MsiData object. Because the MsiData object is a 
common base class for other objects, this property returns an integer 
representation of the underlying object. If the object cannot be converted to 
an integer, the value {\b\f1 iMsiNullInteger} is returned. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IntegerValue}
\par{\i object}\line
Required. The MsiData object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiString_Object}
${\footnote MsiString Object}
K{\footnote MsiString}
+{\footnote Class:MsiString}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiString Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiString is a object providing abstracted, allocated string handling for 
the whole of the Microsoft Installer implementation. This has been designed 
to improve performance by reducing the need for string copying, to eliminate 
the use of error-prone text buffers, and to efficiently handle DBCS strings.
\par
The MsiString object is derived from the common MsiData object that is used 
to support storage in records and in local database tables.
\par
NOTE: Although the MsiString object is commonly used to pass strings by the 
C++ methods, is not exposed to OLE automation. Rather, it is translated to 
the OLE automation string type BSTR, which transfers strings as Unicode on Windows. 
However the MsiString object itself is exposed to OLE automation for testing 
purposes, as its integrity is crucial to the remainder of the system.
\par\li0{\b Properties}\par\li180
{\uldb Value}{\v MsiString_Value}\line
{\uldb IntegerValue}{\v MsiString_IntegerValue}\line
{\uldb TextSize}{\v MsiString_TextSize}\line
{\uldb CharacterCount}{\v MsiString_CharacterCount}\line
{\uldb IsDBCS}{\v MsiString_IsDBCS}\line
\par\li0{\b Methods}\par\li180
{\uldb Compare}{\v MsiString_Compare}\line
{\uldb Append}{\v MsiString_Append}\line
{\uldb Add}{\v MsiString_Add}\line
{\uldb Extract}{\v MsiString_Extract}\line
{\uldb Remove}{\v MsiString_Remove}\line
{\uldb UpperCase}{\v MsiString_UpperCase}\line
{\uldb LowerCase}{\v MsiString_LowerCase}\line
\page

#{\footnote MsiString_Value}
${\footnote MsiString.Value}
+{\footnote MsiString:Value}
K{\footnote Value}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Value Property
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The string value for the MsiString object. This is the default property.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Value}
\par{\i object}\line
Required. The MsiString object.
\par\fi0\li0{\b Remarks}\par\li180
OLE automation transfers strings as Unicode on Windows platforms. The 
automation wrappers use the Win32 API to translate the strings to SBCS or 
DBCS strings for use with the non-Unicode version of Microsoft Installer.
\page

#{\footnote MsiString_TextSize}
${\footnote MsiString.TextSize}
+{\footnote MsiString:TextSize}
K{\footnote TextSize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
TextSize Property
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The length of the string in units of character size, not counting the 
null terminator. This is the storage requirement; the number of 
displayable characters may be less if the string contains DBCS lead bytes 
or Unicode uncomposed sequences. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .TextSize}
\par{\i object}\line
Required. The MsiString object.
\page

#{\footnote MsiString_IntegerValue}
${\footnote MsiString.IntegerValue}
+{\footnote MsiString:IntegerValue}
K{\footnote IntegerValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
IntegerValue Property
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The integer value of the string. If the string does not represent a valid
 signed 32-bit integer, the value {\b\f1 iMsiNullInteger} is returned.
Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IntegerValue}
\par{\i object}\line
Required. The MsiString object.
\page

#{\footnote MsiString_CharacterCount}
${\footnote MsiString.CharacterCount}
+{\footnote MsiString:CharacterCount}
K{\footnote CharacterCount}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CharacterCount Property
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The number of logical characters in the string. DBCS lead byte sequences 
and Unicode uncomposed sequences count as a single character. This execution 
of this property is considerably slower if the string contains lead bytes. 
Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CharacterCount}
\par{\i object}\line
Required. The MsiString object.
\page

#{\footnote MsiString_IsDBCS}
${\footnote MsiString.IsDBCS}
+{\footnote MsiString:IsDBCS}
K{\footnote IsDBCS}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
IsDBCS Property
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
True if the string contains any double-byte characters.
 Will always return False if the operating system is not use a DBCS codepage.
 Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IsDBCS}
\par{\i object}\line
Required. The MsiString object.
\page

#{\footnote MsiString_Compare}
${\footnote MsiString.Compare}
+{\footnote MsiString:Compare}
K{\footnote Compare}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Compare Method
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Compares the object with another string. A variety of compare options can be 
set with the {\i\b mode} argument.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Compare({\i mode, text})}
\par{\i object}\line
Required. The MsiString object.
\par{\i\b mode}\line
Required. The comparison mode, one of the enumeration iscEnum:\line
{\f1   iscExact   } - supplied string matches exactly current string, case sensistive\line
{\f1   iscExactI  } - supplied string matches exactly current string, case insensistive\line
{\f1   iscStart   } - supplied string matches start of current string, case sensitive\line
{\f1   iscStartI  } - supplied string matches start of current string, case insensitive\line
{\f1   iscEnd     } - supplied string matches end of current string, case sensitive\line
{\f1   iscEndI    } - supplied string matches end of current string, case insensitive\line
{\f1   iscWithin  } - supplied string matches anywhere in current string, case sensisitve\line
{\f1   iscWithinI } - supplied string matches anywhere in current string, case insensitive\line
\par{\i\b text}\line
Required. The string to compare with the object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiString_Append}
${\footnote MsiString.Append}
+{\footnote MsiString:Append}
K{\footnote Append}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Append Method
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Appends a string or an MsiString object to the end of the current string object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Append({\i text})}
\par{\i object}\line
Required. The MsiString object.
\par{\i\b text}\line
Required. The string to append. May be either a string or an MsiString object. 
If the argument is Null, no action takes place.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiString_Add}
${\footnote MsiString.Add}
+{\footnote MsiString:Add}
K{\footnote Add}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Add Method
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a new MsiString object by appending a string or an MsiString object 
to the end of the current string object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Add({\i text})}
\par{\i object}\line
Required. The MsiString object.
\par{\i\b text}\line
Required. The string to append. May be either a string or an MsiString object. 
If the argument is Null, the current MsiString object is returned.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiString_Extract}
${\footnote MsiString.Extract}
+{\footnote MsiString:Extract}
K{\footnote Extract}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Extract Method
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a new MsiString object by extracting a portion of the existing string, 
depending upon the mode specified by the {\i\b mode} argument.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Extract({\i mode, limit})}
\par{\i object}\line
Required. The MsiString object.
\par{\i\b mode}\line
Required. The extraction mode, one of the enumeration iseEnum:\line
{\f1   iseFirst     } - the first iLimit characters of the current string\line
{\f1   iseLast      } - the last iLimit characters of the current string\line
{\f1   iseUpto      } - the string up to the character iLimit\line
{\f1   iseIncluding } - the string up to and including the character iLimit\line
{\f1   iseFrom      } - the string starting with the final character iLimit\line
{\f1   iseAfter     } - the string following the last character iLimit
\par{\i\b limit}\line
Required. An integer containing the number of characters to extract, 
or the particular character to use as the limit.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiString_Remove}
${\footnote MsiString.Remove}
+{\footnote MsiString:Remove}
K{\footnote Remove}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Remove Method
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Removes a portion of the existing string, depending upon the mode specified by 
the {\i\b mode} argument. Returns a boolean indicating whether any text was removed.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Remove({\i mode, limit})}
\par{\i object}\line
Required. The MsiString object.
\par{\i\b mode}\line
Required. The extraction mode, one of the enumeration iseEnum:\line
{\f1   iseFirst     } - the first iLimit characters of the current string\line
{\f1   iseLast      } - the last iLimit characters of the current string\line
{\f1   iseUpto      } - the string up to the character iLimit\line
{\f1   iseIncluding } - the string up to and including the charcter iLimit\line
{\f1   iseFrom      } - the string starting with the final character iLimit\line
{\f1   iseAfter     } - the string following the last charcter iLimit
\par{\i\b limit}\line
Required. An integer containing the number of characters to extract, 
or the particular character to use as the limit.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiString_UpperCase}
${\footnote MsiString.UpperCase}
+{\footnote MsiString:UpperCase}
K{\footnote UpperCase}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
UpperCase Method
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Converts all lower case characters in the string to upper case.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .UpperCase}
\par{\i object}\line
Required. The MsiString object.
\par\fi0\li0{\b Remarks}\par\li180
The actual conversion is performed by the operating system,
 using the current system codepage or system script.
\page

#{\footnote MsiString_LowerCase}
${\footnote MsiString.LowerCase}
+{\footnote MsiString:LowerCase}
K{\footnote LowerCase}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
LowerCase Method
\line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Converts all upper case characters in the string to lower case.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .LowerCase}
\par{\i object}\line
Required. The MsiString object.
\par\fi0\li0{\b Remarks}\par\li180
The actual conversion is performed by the operating system,
 using the current system codepage or system script.
\page

#{\footnote MsiRecord_Object}
${\footnote MsiRecord Object}
K{\footnote MsiRecord}
+{\footnote Class:MsiRecord}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiRecord Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiRecord object is a container for holding and transferring a variable
 number of values. Fields within the record are numerically indexed and can
 contain strings, integers, objects, and null values. Fields beyond the
 allocated record size are treated as having permanently null values.
 Field number 0 is not used for data, but is reserved for the format string
 for the record, processed by the {\uldb FormatText}{\v MsiRecord_FormatText} method.
 Major uses of records are for error returns and database row fetches.
\par\li0{\b Properties}\par\li180
{\uldb Data}{\v MsiRecord_Data}\line
{\uldb StringData}{\v MsiRecord_StringData}\line
{\uldb IntegerData}{\v MsiRecord_IntegerData}\line
{\uldb ObjectData}{\v MsiRecord_ObjectData}\line
{\uldb FieldCount}{\v MsiRecord_FieldCount}\line
{\uldb IsInteger}{\v MsiRecord_IsInteger}\line
{\uldb IsNull}{\v MsiRecord_IsNull}\line
{\uldb IsChanged}{\v MsiRecord_IsChanged}\line
{\uldb TextSize}{\v MsiRecord_TextSize}\line
\par\li0{\b Methods}\par\li180
{\uldb FormatText}{\v MsiRecord_FormatText}\line
{\uldb ClearData}{\v MsiRecord_ClearData}\line
{\uldb ClearUpdate}{\v MsiRecord_ClearUpdate}\line
\page

#{\footnote MsiRecord_Data}
${\footnote MsiRecord.Data}
+{\footnote MsiRecord:Data}
K{\footnote Data}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Data Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Read-write. Transfers data between a variant and a specified field within the record.
 On property set, integers, strings, Empty, and objects derived from MsiData are accepted.
 On property get, the returned variant will contain an long integer, string, MsiData object, or Empty.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Data({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\par\fi0\li0{\b Remarks}\par\li180
The returned value of a non-existent field will be an Empty variant.
 An Empty variant value will set the record field to the Null state.
 Attempting to store a value in a non-existent field will cause an error.
\page

#{\footnote MsiRecord_StringData}
${\footnote MsiRecord.StringData}
+{\footnote MsiRecord:StringData}
K{\footnote StringData}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
StringData Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Read-write. Transfers string data in or out of a specified field within the record.
 If an integer or object has been stored, its string value will be returned.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .StringData({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\par\fi0\li0{\b Remarks}\par\li180
The returned value of a non-existent field will be an empty string.
 An Empty variant value will set the record field to the Null state.
 Attempting to store a value in a non-existent field will cause an error.
\page

#{\footnote MsiRecord_IntegerData}
${\footnote MsiRecord.IntegerData}
+{\footnote MsiRecord:IntegerData}
K{\footnote IntegerData}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
IntegerData Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Read-write. Transfers 32-bit integer data in or out of a specified field within the record.
 If a field value cannot be converted to an integer, {\b\f1 iMsiNullInteger} is returned.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IntegerData({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\par\fi0\li0{\b Remarks}\par\li180
The returned value of a non-existent field will be {\b\f1 iMsiNullInteger}.
 Attempting to store a value in a non-existent field will cause an error.
\page

#{\footnote MsiRecord_ObjectData}
${\footnote MsiRecord.ObjectData}
+{\footnote MsiRecord:ObjectData}
K{\footnote ObjectData}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ObjectData Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Read-write. Transfers objects in or out of a specified field within the record.
 The objects must be of type derived from MsiData.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ObjectData({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\par\fi0\li0{\b Remarks}\par\li180
The returned value of a non-existent field will be an object set to Nothing.
 An object set to Nothing will set the record field to the Null state.
 Attempting to store a value in a non-existent field will cause an error.
 To check if the object is of a particular type get its {\uldb HasInterface}{\v MsiBase_HasInterface} property.
 To obtain an automation object for the particular type call its {\uldb GetInterface}{\v MsiBase_GetInterface} method.
\page

#{\footnote MsiRecord_FieldCount}
${\footnote MsiRecord.FieldCount}
+{\footnote MsiRecord:FieldCount}
K{\footnote FieldCount}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FieldCount Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the number of fields in the record. Read-only.
 Read access to fields beyond this count returns null values. Write access will fail.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FieldCount}
\par{\i object}\line
Required. The MsiRecord object.
\page

#{\footnote MsiRecord_IsInteger}
${\footnote MsiRecord.IsInteger}
+{\footnote MsiRecord:IsInteger}
K{\footnote IsInteger}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
IsInteger Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a boolean indicating whether the field data is stored as an integer. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IsInteger({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\page

#{\footnote MsiRecord_IsNull}
${\footnote MsiRecord.IsNull}
+{\footnote MsiRecord:IsNull}
K{\footnote IsNull}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
IsNull Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Read-only. Returns True if the indicated field is null, False if the field contains data.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IsNull({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\page

#{\footnote MsiRecord_IsChanged}
${\footnote MsiRecord.IsChanged}
+{\footnote MsiRecord:IsChanged}
K{\footnote IsChanged}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
IsChanged Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Read-only. Returns True if the field data has been changed since the record
 was initially created or since the last call to {\uldb ClearUpdate}{\v MsiRecord_ClearUpdate}.
 Note that integer fields always return True, even if unchanged (the implementation
 has no space to maintain the original integer, not a problem for the internal clients).
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IsChanged({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\page

#{\footnote MsiRecord_TextSize}
${\footnote MsiRecord.TextSize}
+{\footnote MsiRecord:TextSize}
K{\footnote TextSize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
TextSize Property
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the size of the text if the field data were to be access as string data. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .TextSize({\i field})}
\par{\i object}\line
Required. The MsiRecord object.
\par{\i\b field}\line
Required. The field number of the value within the record, 1-based.
\page

#{\footnote MsiRecord_ClearData}
${\footnote MsiRecord.ClearData}
+{\footnote MsiRecord:ClearData}
K{\footnote ClearData}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ClearData Method
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Clears the data in all fields, setting them to Null. 
Any objects stored in the fields will be released.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ClearData}
\par{\i object}\line
Required. The MsiRecord object.
\page

#{\footnote MsiRecord_FormatText}
${\footnote MsiRecord.FormatText}
+{\footnote MsiRecord:FormatText}
K{\footnote FormatText}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FormatText Method
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns an MsiString object produced from the format string in record field 0
 by substituting the record parameters designated in the format string.
 If field 0 of the record is null or an integer, then it is treated as being the string \{1: [1]\}\{2: [2]\} etc.
 If a substring of the form [number] is encountered, it is replaced by the contents
 of the record field of the given number if it exists, otherwise replaced by a null string.
 If a part of the string is enclosed in \{ \}, and contains no field numbers,
 it is left unchanged, including the curly braces.
 If a part of the string is enclosed in \{ \}, and contains one or more field numbers,
 and any of the field values are null or missing, all the text in the braces, and the braces themselves are removed;
 else the subsititued text is displayed without the curly braces.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FormatText}
\par{\i object}\line
Required. The MsiRecord object.
\page

#{\footnote MsiRecord_ClearUpdate}
${\footnote MsiRecord.ClearUpdate}
+{\footnote MsiRecord:ClearUpdate}
K{\footnote ClearUpdate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ClearUpdate Method
\line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Clears the update states in the record, such that the {\uldb IsChanged}{\v MsiRecord_IsChanged}
 property will return False for all fields.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ClearUpdate}
\par{\i object}\line
Required. The MsiRecord object.
\page

#{\footnote MsiRegKey_Object}
${\footnote MsiRegKey Object}
K{\footnote MsiRegKey}
+{\footnote Class:MsiRegKey}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiRegKey Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiRegKey object provides an interface to the system registry.
\par\li0{\b Properties}\par\li180
{\uldb Value}{\v MsiRegKey_Value}\line
{\uldb Key}{\v MsiRegKey_Key}\line
{\uldb Exists}{\v MsiRegKey_Exists}\line
{\uldb GetSelfRelativeSD}{\v MsiRegKey_GetSelfRelativeSD}\line
{\uldb ValueExists}{\v MsiRegKey_ValueExists}\line
\par\li0{\b Methods}\par\li180
{\uldb RemoveValue}{\v MsiRegKey_RemoveValue}\line
{\uldb RemoveSubKey}{\v MsiRegKey_RemoveSubKey}\line
{\uldb RemoveSubTree}{\v MsiRegKey_RemoveSubTree}\line
{\uldb Values}{\v MsiRegKey_Values}\line
{\uldb SubKeys}{\v MsiRegKey_SubKeys}\line
{\uldb CreateChild}{\v MsiRegKey_CreateChild}\line
\par\fi0\li0{\b Remarks}
\par\fi0\li0{\b Differences between the Windows 95 and Windows NT registry: }\par
{\b 1. }Windows NT does not allow you to create a new key under HKEY_LOCAL_MACHINE or HKEY_USERS, 
whereas this is allowed under Windows 95.  Thus code that attempts to do this will succeed 
under Windows 95 but fail when run on NT.
\page

#{\footnote MsiRegKey_Value}
${\footnote MsiRegKey.Value}
+{\footnote MsiRegKey:Value}
K{\footnote Value}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Value Property
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The default or a named value for the current key. Read-write.
\par\li0{\b Syntax 1}\par\li500\fi-320
{\i object}{\b .Value}
\par\fi0\li0{\b Syntax 2}\par\li500\fi-320
{\i object}{\b .Value({\i valueName})}
\par{\i object}\line
Required. The MsiRegKey object.
\par{\i\b valueName}\line
Optional. Name of value, omit to access default value.
\par\fi0\li0{\b Remarks}\par\li180
The {\b Value} Property is always read or written as a string. The system Registry 
however supports values that may be strings, integers or hexadecimals. If the string 
is preceded by a {\b #x} the value is interpreted (for read/ write) as a 
hexadecimal value. If {\b Value} is preceded by a {\b #} it is interpreted 
as an integer. Else {\b Value} is interpreted as a string. In case the string 
begins with 2 or more consequtive {\b #}'s {\b Value} is interpreted as a string, 
dropping the first {\b #}.
\page

#{\footnote MsiRegKey_Exists}
${\footnote MsiRegKey.Exists}
+{\footnote MsiRegKey:Exists}
K{\footnote Exists}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Exists Property
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Boolean indicating whether the current registry key exists or whether to
 create/ delete the current registry key. Read-write.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Exists}
\par{\i object}\line
Required. The MsiRegKey object.
\par\fi0\li0{\b Remarks}\par\li180
The property can be used to query the registry to determine if the key 
exists. It can also be used with an assignment to create/ delete the key.
\page

#{\footnote MsiRegKey_ValueExists}
${\footnote MsiRegKey.ValueExists}
+{\footnote MsiRegKey:ValueExists}
K{\footnote ValueExists}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ValueExists Property
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Boolean indicating whether the given value exists under the current registry key.
 Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ValueExists({\i valueName})}
\par{\i object}\line
Required. The MsiRegKey object.
\par{\i\b valueName}\line
Name of the value.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiRegKey_Key}
${\footnote MsiRegKey.Key}
+{\footnote MsiRegKey:Key}
K{\footnote Key}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Key Property
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The string representation of the key. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Key}
\par{\i object}\line
Required. The MsiRegKey object.
\par\fi0\li0{\b Remarks}\par\li180
A possible value of this property would be
 {\f1 "HKEY_CLASSES_ROOT\\Software\\Microsoft"}.
\page

#{\footnote MsiRegKey_RemoveValue}
${\footnote MsiRegKey.RemoveValue}
+{\footnote MsiRegKey:RemoveValue}
K{\footnote RemoveValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveValue Method
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The method is used to remove the default or a named value of the 
 MsiRegKey object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveValue({\i valueName,value})}
\par{\i object}\line
Required. The MsiRegKey object.
\par{\i\b valueName}\line
Optional. Name of the value, default value used if omitted.
\par{\i\b value}\line
Optional. the value. The value is used only in case of REG_MULTI_SZ registry values. If the value 
indicates a registry MULTI_SZ value append or prepend operation (there is an extra null either at the beginning 
or at the end of the string list) then only the strings that appear in the passed in value are removed from 
the existing registry value. If the value is not specified or the existing registry value is not of type 
REG_MULTI_SZ, then the entire value is deleted.
\par{\i\b Remarks}\line
The function does not return failure if it does not find the value.
\page

#{\footnote MsiRegKey_RemoveSubKey}
${\footnote MsiRegKey.RemoveSubKey}
+{\footnote MsiRegKey:RemoveSubKey}
K{\footnote RemoveSubKey}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveSubKey Method
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The method is used to remove an empty subkey of the MsiRegKey object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveSubKey({\i subKey})}
\par{\i object}\line
Required. The MsiRegKey object.
\par{\i\b subKey}\line
Required. the string denoting the subkey.
\par\fi0\li0{\b Remarks}\par\li180
The function fails if the subkey is not empty ie. if it has values 
 and/or subkeys.
\page

#{\footnote MsiRegKey_RemoveSubTree}
${\footnote MsiRegKey.RemoveSubTree}
+{\footnote MsiRegKey:RemoveSubTree}
K{\footnote RemoveSubTree}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveSubTree Method
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The method is used to remove a subkey of the MsiRegKey object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveSubTree({\i subKey})}
\par{\i object}\line
Required. The MsiRegKey object.
\par{\i\b subKey}\line
Required. the string denoting the subkey.
\par\fi0\li0{\b Remarks}\par\li180
The function removes the subkey and any subkeys and values below, if present.
\page

#{\footnote MsiRegKey_Values}
${\footnote MsiRegKey.Values}
+{\footnote MsiRegKey:Values}
K{\footnote Values}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Values Method
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The method returns an enumeration object of all the value names of the
 values of the current key.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Values}
\par{\i object}\line
Required. The MsiRegKey object.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiRegKey_SubKeys}
${\footnote MsiRegKey.SubKeys}
+{\footnote MsiRegKey:SubKeys}
K{\footnote SubKeys}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SubKeys Method
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The method returns an enumeration object of all the subkey names of the
 current key.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SubKeys}
\par{\i object}\line
Required. The MsiRegKey object.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiRegKey_CreateChild}
${\footnote MsiRegKey.CreateChild}
+{\footnote MsiRegKey:CreateChild}
K{\footnote CreateChild}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateChild Method
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The method creates a new MsiRegKey object which is a subkey of the
 current MsiRegKey object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateChild({\i subKey})}
\par{\i object}\line
Required. The MsiRegKey object.
\par{\i\b subKey}\line
Required. the string denoting subkey under the MsiRegKey object.
\par\fi0\li0{\b Remarks}\par\li180
Please note that this function creates a reference to a new MsiRegKey object 
that represents the physical registry key. The actual registry key is not opened 
or created on the construction of the MsiRegKey object. One has to use the member 
methods of the MsiRegKey object to manipulate the physical key itself.
\page

#{\footnote MsiRegKey_GetSelfRelativeSD}
${\footnote MsiRegKey.GetSelfRelativeSD}
+{\footnote MsiRegKey:GetSelfRelativeSD}
K{\footnote GetSelfRelativeSD}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetSelfRelativeSD Property
\line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The property returns a stream object containing a self relative security descriptor for
 the registry key.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetSelfRelativeSD()}
\par{\i object}\line
Required. The MsiRegKey object.
\par\fi0\li0{\b Remarks}\par\li180
Please note that modifying this stream does not manipulate the security descriptor itself.
 Also note that security descriptors may be equivalent in that they represent the same set
 of permissions, without being identical binaries.
\page

#{\footnote MsiMalloc_Object}
${\footnote MsiMalloc Object}
K{\footnote MsiMalloc}
+{\footnote Class:MsiMalloc}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiMalloc Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
Provides basic memory allocation services for all modules.
 This object is exposed only for testing purposes.
 The MsiMalloc object is obtained from the MsiServices method
 {\uldb GetAllocator}{\v MsiServices_GetAllocator}.
 In debug builds, memory blocks are monitored for corruption such as
 overwriting bounds and double deletion.
 Also in debug builds memory leaks are displayed in dialog boxes.
 Stack traces are shown of who allocated the memory. In order to
 see these on your machine make sure the following DLLs are on your
 path.
 In WinNT - imagehlp.dll, dbi.dll and mspdb40.dll
 On win95 - mspdb40.dll.
\par
!! Talk about diagnostic capabilities here !!
\par\li0{\b Methods}\par\li180
{\uldb Alloc}{\v MsiMalloc_Alloc}\line
{\uldb Free}{\v MsiMalloc_Free}\line
{\uldb SetDebugFlags}{\v MsiMalloc_SetDebugFlags}\line
{\uldb GetDebugFlags}{\v MsiMalloc_GetDebugFlags}\line
{\uldb CheckAllBlocks}{\v MsiMalloc_CheckAllBlocks}\line
{\uldb FCheckBlock}{\v MsiMalloc_FCheckBlock}\line
{\uldb GetSizeOfBlock}{\v MsiMalloc_GetSizeOfBlock}\line
\page

#{\footnote MsiMalloc_Alloc}
${\footnote MsiMalloc.Alloc}
+{\footnote MsiMalloc:Alloc}
K{\footnote Alloc}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Alloc Method
\line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
Allocates a new memory block and returns its address as a Long.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Alloc({\i byteCount})}
\par{\i object}\line
Required. The MsiMalloc object.
\par{\i\b byteCount}\line
Required. Number of bytes to allocate in the block.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiMalloc_Free}
${\footnote MsiMalloc.Free}
+{\footnote MsiMalloc:Free}
K{\footnote Free}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Free Method
\line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
Frees a previously allocated memory block. This block must have been
 allocated with this allocator object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Free({\i memoryBlock})}
\par{\i object}\line
Required. The MsiMalloc object.
\par{\i\b memoryBlock}\line
Required. Memory block returned from {\uldb Alloc}{\v MsiMalloc_Alloc}.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiMalloc_SetDebugFlags}
${\footnote MsiMalloc.SetDebugFlags}
+{\footnote MsiMalloc:SetDebugFlags}
K{\footnote SetDebugFlags}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetDebugFlags Method
\line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\tx360\tx720
Sets the debug flags for the debug allocator. Possible flags are:\par
\tab 0x1\tab Tells the debug allocator
 never to actually free a memory block, but to keep it in the "Free List"
 which allows you to more easily tell if the block is being doubly-freed.
\par\tab 0x2\tab Logs each memory allocation with the size and address from
 where the allocation was called.
\par
This is only available when using debug services.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetDebugFlags({\i flag})}
\par{\i object}\line
Required. The MsiMalloc object.
\par{\i\b flag}\line
Required. Flags.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiMalloc_GetDebugFlags}
${\footnote MsiMalloc.GetDebugFlags}
+{\footnote MsiMalloc:GetDebugFlags}
K{\footnote GetDebugFlags}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetDebugFlags Method
\line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\tx360\tx720
Returns the debug flags for the debug allocator. Possible flags are:\par
\tab 0x1\tab Tells the debug allocator
 never to actually free a memory block, but to keep it in the "Free List"
 which allows you to more easily tell if the block is being doubly-freed.
\par\tab 0x2\tab Logs each memory allocation with the size and address from
 where the allocation was called.
\par
This is only available when using debug services.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetDebugFlags}
\par{\i object}\line
Required. The MsiMalloc object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiMalloc_CheckAllBlocks}
${\footnote MsiMalloc.CheckAllBlocks}
+{\footnote MsiMalloc:CheckAllBlocks}
K{\footnote CheckAllBlocks}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CheckAllBlocks Method
\line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\tx360\tx720
Checks all the allocated memory blocks for corruption and returns true
 if everything is ok. False otherwise. It will display asserts about
 memory blocks which are corrupt if asserts are enabled.
\par
This is only available when using debug services.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CheckAllBlocks}
\par{\i object}\line
Required. The MsiMalloc object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiMalloc_FCheckBlock}
${\footnote MsiMalloc.FCheckBlock}
+{\footnote MsiMalloc:FCheckBlock}
K{\footnote FCheckBlock}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FCheckBlock Method
\line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\tx360\tx720
Checks the allocated memory block for corruption and returns true
 if everything is ok. False otherwise. It will display asserts about
 memory blocks which are corrupt if asserts are enabled.
\par
This is only available when using debug services.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FCheckBlock({\i memoryBlock})}
\par{\i object}\line
Required. The MsiMalloc object.
\par{\i\b memoryBlock}\line
Required. Memory block allocated through memory allocator.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiMalloc_GetSizeOfBlock}
${\footnote MsiMalloc.GetSizeOfBlock}
+{\footnote MsiMalloc:GetSizeOfBlock}
K{\footnote GetSizeOfBlock}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetSizeOfBlock Method
\line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\tx360\tx720
Returns the size of the allocated memory block. Only works on blocks
 allocated by the memory allocator.
\par
This is only available when using debug services.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetSizeOfBlock({\i memoryBlock})}
\par{\i object}\line
Required. The MsiMalloc object.
\par{\i\b memoryBlock}\line
Required. Memory block allocated through memory allocator.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page
{\uldb GetSizeOfBlock}{\v MsiMalloc_GetSizeOfBlock}\line




}
