{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20

#{\footnote Msi_Objects}
${\footnote Msi Objects}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Microsoft Installer Objects
\par}\li180
{\uldb MsiAuto object}{\v MsiAuto_Object}\line
{\uldb MsiConfigurationManager object}{\v MsiConfigurationManager_Object}\line
{\uldb MsiControl object}{\v MsiControl_Object}\line
{\uldb MsiCursor object}{\v MsiCursor_Object}\line
{\uldb MsiData object}{\v MsiData_Object}\line
{\uldb MsiDatabase object}{\v MsiDatabase_Object}\line
{\uldb MsiDialog object}{\v MsiDialog_Object}\line
{\uldb MsiDialogHandler object}{\v MsiDialogHandler_Object}\line
{\uldb MsiDirectoryManager object}{\v MsiDirectoryManager_Object}\line
{\uldb MsiEngine object}{\v MsiEngine_Object}\line
{\uldb MsiEvent object}{\v MsiEvent_Object}\line
{\uldb MsiFileCopy object}{\v MsiFileCopy_Object}\line
{\uldb MsiFilePatch object}{\v MsiFilePatch_Object}\line
{\uldb MsiHandler object}{\v MsiHandler_Object}\line
{\uldb MsiMalloc object}{\v MsiMalloc_Object}\line
{\uldb MsiMessage object}{\v MsiMessage_Object}\line
{\uldb MsiPath object}{\v MsiPath_Object}\line
{\uldb MsiRecord object}{\v MsiRecord_Object}\line
{\uldb MsiRegKey object}{\v MsiRegKey_Object}\line
{\uldb MsiSelectionManager object}{\v MsiSelectionManager_Object}\line
{\uldb MsiServices object}{\v MsiServices_Object}\line
{\uldb MsiServer object}{\v MsiServer_Object}\line
{\uldb MsiStorage object}{\v MsiStorage_Object}\line
{\uldb MsiStream object}{\v MsiStream_Object}\line
{\uldb MsiString object}{\v MsiString_Object}\line
{\uldb MsiSummaryInfo object}{\v MsiSummaryInfo_Object}\line
{\uldb MsiTable object}{\v MsiTable_Object}\line
{\uldb MsiView object}{\v MsiView_Object}\line
{\uldb MsiVolume object}{\v MsiVolume_Object}\line
{\uldb Methods common to all objects}{\v MsiBase_Object}\line
\page

#{\footnote Object_Hierarchy}
${\footnote Object Hierarchy}
K{\footnote Hierarchy}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Microsoft Installer Object Hierarchy
\par}\li180
All objects are derived ultimately from a common base class.
 C++ objects are COM classes derived from the IUnknown interface.
 Automation objects (except MsiAuto) are wrappers for C++ COM pointers, are derived from
 an internal class, CAutoBase, and are exposed as IDispatch interfaces. Where multiple
 interfaces are implemented by the same object, they are joined by a plus sign, "+".
 Objects derived from a base class are shown as indented under that base object.
\par\tx200\li240\fi-180
{\b Objects Created from Module Class Factories}
{\line\uldb MsiAuto}{\v MsiAuto_Object}
{\line\uldb MsiServices}{\v MsiServices_Object}
{\line\uldb MsiMessage}{\v MsiMessage_Object}
{\line\tab\uldb MsiHandler}{\v MsiHandler_Object}
{\line\tab\uldb MsiEngine}{\v MsiEngine_Object}
 + {\uldb MsiSelectionManager}{\v MsiSelectionManager_Object}
 + {\uldb MsiDirectoryManager}{\v MsiDirectoryManager_Object}
{\line\uldb MsiConfigurationManager}{\v MsiConfigurationManager_Object}
{\line\uldb MsiServer object}{\v MsiServer_Object}
\par\tx200\li240\fi-180
{\b Objects Created by Methods of Other Objects}
\line{\uldb MsiData}{\v MsiData_Object}
\line\tab{\uldb MsiString}{\v MsiString_Object}
\line\tab {\uldb MsiTable}{\v MsiTable_Object}
\line\tab{\uldb MsiStream}{\v MsiStream_Object}
\line\tab{\uldb MsiDialog}{\v MsiDialog_Object}
 + {\uldb MsiEvent}{\v MsiEvent_Object}
\line\tab{\uldb MsiControl}{\v MsiControl_Object}
\line{\uldb MsiMalloc}{\v MsiMalloc_Object}
\line{\uldb MsiRecord}{\v MsiRecord_Object}
\line{\uldb MsiVolume}{\v MsiVolume_Object}
\line{\uldb MsiPath}{\v MsiPath_Object}
\line{\uldb MsiFileCopy}{\v MsiFileCopy_Object}
\line{\uldb MsiFilePatch}{\v MsiFilePatch_Object}
\line{\uldb MsiRegKey}{\v MsiRegKey_Object}
\line{\uldb MsiDatabase}{\v MsiDatabase_Object}
\line{\uldb MsiView}{\v MsiView_Object}
\line{\uldb MsiCursor}{\v MsiCursor_Object}
\line{\uldb MsiStorage}{\v MsiStorage_Object}
\line{\uldb MsiSummaryInfo}{\v MsiSummaryInfo_Object}
\page

#{\footnote MsiBase_Object}
${\footnote MsiBase Object}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Methods and Properties Common to all Objects
\par}\li180
These methods are inherited into all automation classes, and are provided
 to allow querying of the underlying COM interfaces associated with each object.
 A common need is to be able to convert an {\uldb MsiData object}{\v MsiData_Object}
 stored in a record or database to its derived object type.
\par\li0{\b Properties}\par\li180
{\uldb HasInterface}{\v MsiBase_HasInterface}\line
{\uldb RefCount}{\v MsiBase_RefCount}
\par\li0{\b Methods}\par\li180
{\uldb GetInterface}{\v MsiBase_GetInterface}
\par\fi0\li0{\b Remarks}\par\li180
These items don't apply to the MsiAuto object.
\page

#{\footnote MsiBase_HasInterface}
${\footnote MsiBase.HasInterface}
+{\footnote MsiBase:HasInterface}
K{\footnote HasInterface}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
HasInterface Property
\line\tx360\tab\fs18\b0{\uldb MsiBase Object}{\v MsiBase_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A boolean indicating whether the underlying COM object supports the indicated interface.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .HasInterface({\i iid})}
\par{\i object}\line
Required. The MsiBase object.
\par{\i\b iid}\line
Required. Integer representing the interface ID to be queried, {\f1 iidMsi???}.  
 Constants are defined in the type library for the Installer interfaces.
\par\fi0\li0{\b Remarks}\par\li180
This property doesn't apply to the MsiAuto object.
\page

#{\footnote MsiBase_RefCount}
${\footnote MsiBase.RefCount}
+{\footnote MsiBase:RefCount}
K{\footnote RefCount}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RefCount Property
\line\tx360\tab\fs18\b0{\uldb MsiBase Object}{\v MsiBase_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The reference count of the underlying COM object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RefCount}
\par{\i object}\line
Required. The MsiBase object.
\par\fi0\li0{\b Remarks}\par\li180
This the reference count of the C++ implementation object,
 not of the automation IDispatch wrapper object. The automation wrapper
 will account for one reference count, unless the underlying object is null,
 in which case the reference count will be zero. The preceeding happens
 when an null MsiData object is accessed from a database cursor.
\page

#{\footnote MsiBase_GetInterface}
${\footnote MsiBase.GetInterface}
+{\footnote MsiBase:GetInterface}
K{\footnote GetInterface}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetInterface Method
\line\tx360\tab\fs18\b0{\uldb MsiBase Object}{\v MsiBase_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a new object containing the requested interface,
 by requesting the interface from the underlying COM object.
 An error will be generated if the interface cannot be obtained.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetInterface({\i iid})}
\par{\i object}\line
Required. The MsiBase object.
\par{\i\b iid}\line
Required. Integer representing the interface ID to be queried, {\f1 iidMsi???}.  
 Constants are defined in the type library for the Installer interfaces.
\par\fi0\li0{\b Remarks}\par\li180
This method doesn't apply to the MsiAuto object.
\page

#{\footnote MsiAuto_Object}
${\footnote MsiAuto Object}
K{\footnote MsiAuto}
+{\footnote Class:MsiAuto}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiAuto Object
\par}\li180
An MsiAuto object must be initially created in order to load the automation 
support that is required in order to access the Microsoft Installer components 
through OLE automation. This object provides wrappers to create the top level 
objects and access their methods.
\par\li0{\b Methods}\par\li180
{\uldb CreateServices}{\v MsiAuto_CreateServices}\line
{\uldb CreateEngine}{\v MsiAuto_CreateEngine}\line
{\uldb CreateHandler}{\v MsiAuto_CreateHandler}\line
{\uldb CreateMessageHandler}{\v MsiAuto_CreateMessageHandler}\line
{\uldb CreateConfigurationManager}{\v MsiAuto_CreateConfigurationManager}\line
{\uldb OpcodeName}{\v MsiAuto_OpcodeName}\line
{\uldb ShowAsserts}{\v MsiAuto_ShowAsserts}\line
{\uldb SetDBCSSimulation}{\v MsiAuto_SetDBCSSimulation}\line
{\uldb AssertNoObjects}{\v MsiAuto_AssertNoObjects}\line
{\uldb SetRefTracking}{\v MsiAuto_SetRefTracking}\line
\page

#{\footnote MsiAuto_CreateServices}
${\footnote MsiAuto.CreateServices}
+{\footnote MsiAuto:CreateServices}
K{\footnote CreateServices}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateServices Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This methods loads the Msi (kernel) library and creates a MsiServices object. If
 no parameter is supplied, the method attempts to load "Msi.DLL" from the
 current directory.
\page

#{\footnote MsiAuto_CreateEngine}
${\footnote MsiAuto.CreateEngine}
+{\footnote MsiAuto:CreateEngine}
K{\footnote CreateEngine}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateEngine Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This methods loads the Msi (kernel) library and creates a MsiEngine object.     
 If no engine parameter is supplied, the method 
 attempts to load "Msi.DLL" from the current directory.
\page

#{\footnote MsiAuto_CreateHandler}
${\footnote MsiAuto.CreateHandler}
+{\footnote MsiAuto:CreateHandler}
K{\footnote CreateHandler}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateHandler Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This methods loads the message handler library and creates a MsiHandler
 object. The kernel library (msi.dll) should be loaded first.
 If no handler library parameter is supplied, the method attempts to load
 "MsiHnd.DLL" from the current directory.
\page

#{\footnote MsiAuto_CreateMessageHandler}
${\footnote MsiAuto.CreateMessageHandler}
+{\footnote MsiAuto:CreateMessageHandler}
K{\footnote CreateMessageHandler}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateMessageHandler Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This methods loads the given library and creates a MsiMessage
 object. The kernel library (msi.dll) should be loaded first.
 If no handler library parameter is supplied, the method uses the registered
 kernel DLL.
\page


#{\footnote MsiAuto_CreateConfigurationManager}
${\footnote MsiAuto.CreateConfigurationManager}
+{\footnote MsiAuto:CreateConfigurationManager}
K{\footnote CreateConfigurationManager}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateConfigurationManager Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This methods creates an MsiConfigurationManager object. Currently this is 
 stored in the kernel library. See {\uldb CreateEngine}{\v MsiAuto_CreateEngine}
 for more information.
\page

#{\footnote MsiAuto_CreateExecutor}
${\footnote MsiAuto.CreateExecutor}
+{\footnote MsiAuto:CreateExecutor}
K{\footnote CreateExecutor}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateExecutor Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This methods creates an {\uldb MsiExecute}{\v MsiExecute_Object} object.
 Currently this is stored in the kernel library.
 See {\uldb CreateEngine}{\v MsiAuto_CreateEngine} for more information.
\page

#{\footnote MsiAuto_OpcodeName}
${\footnote MsiAuto.OpcodeName}
+{\footnote MsiAuto:OpcodeName}
K{\footnote OpcodeName}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
OpcodeName Property
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
The enumerated name for the numeric opcode value. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .OpcodeName({\i opcode})}
\par{\i object}\line
Required. The MsiAuto object.
\par{\i\b opcode}\line
Required. The numeric value of the opcode.
\par\fi0\li0{\b Remarks}\par\li180
The enumeration is generated from the "opcodes.h" header file.
 Undefined opcodes will cause an error to be generated.
\page

#{\footnote MsiAuto_ShowAsserts}
${\footnote MsiAuto.ShowAsserts}
+{\footnote MsiAuto:ShowAsserts}
K{\footnote ShowAsserts}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ShowAsserts Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ShowAsserts({\i Flag})}
\par{\i object}\line
Required. The MsiAuto object.
\par{\i\b Flag}\line
Required. Should be False to hide asserts and True to show asserts.
\par\fi0\li0{\b Remarks}\par\li180
This method sets an internal flag in each of the standard Installer component DLLs
 to control display of assert messages,
 and will be functional only for component objects that have already been created.
 NOTE: Only available in DEBUG components, which support the IMsiDebug interface.
\page

#{\footnote MsiAuto_SetDBCSSimulation}
${\footnote MsiAuto.SetDBCSSimulation}
+{\footnote MsiAuto:SetDBCSSimulation}
K{\footnote SetDBCSSimulation}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetDBCSSimulation Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetDBCSSimulation({\i leadByte})}
\par{\i object}\line
Required. The MsiAuto object.
\par{\i\b leadByte}\line
Required. The numeric value of a character that will be recognized by the
 MsiString object implementation as the lead byte of a double-byte sequence.
\par\fi0\li0{\b Remarks}\par\li180
This method is exposed to facilitate testing of the DBCS string handling
 on a non-DBCS system.
 NOTE: Only available in DEBUG components, which support the IMsiDebug interface
\page

#{\footnote MsiAuto_AssertNoObjects}
${\footnote MsiAuto.AssertNoObjects}
+{\footnote MsiAuto:AssertNoObjects}
K{\footnote AssertNoObjects}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
AssertNoObjects Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .AssertNoObjects}
\par{\i object}\line
Required. The MsiAuto object.
\par\fi0\li0{\b Remarks}\par\li180
This asserts that none of the objects being reference tracked are still allocated.
 It is for debugging purposes from VB in order to help track down reference counting problems.
 See {\uldb Reference Tracking}{\v Coding_RefTracking} 
 for more information on reference tracking in Darwin.
 NOTE: Only available in DEBUG components, which support the IMsiDebug interface
\page

#{\footnote MsiAuto_SetRefTracking}
${\footnote MsiAuto.SetRefTracking}
+{\footnote MsiAuto:SetRefTracking}
K{\footnote SetRefTracking}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetRefTracking Method
\line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\par}\li180
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetRefTracking({\i iid}, {\i fTrack})}
\par{\i object}\line
Required. The MsiAuto object.
\par{\i\b iid}\line
Required. The iid of the class you wish to turn reference tracking on or off.
\par{\i\b fTrack}\line
Required. True or false indicating whether to turn tracking on or off.
\par\fi0\li0{\b Remarks}\par\li180
This allows you to turn reference tracking on or off for objects created after this point. 
 It does not affect objects already created when the call is made. See {\uldb Reference Tracking}{\v Coding_RefTracking} 
 for more information on reference tracking in Darwin.
 NOTE: Only available in DEBUG components, which support the IMsiDebug interface
\page


#{\footnote MsiMessage_Object}
${\footnote MsiMessage Object}
K{\footnote MsiMessage}
+{\footnote Class:MsiMessage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiMessage Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiMessage object is an independent object that supports simple UI:
 error handling and progress indications. It is a base class of MsiEngine
 and MsiHandler, which support more extensive UI control. Objects supporting
 this interface can be passed to the install server to receive notifications.
\par\li0{\b Methods}\par\li180
{\uldb Message}{\v MsiMessage_Message}\line
\page

#{\footnote MsiMessage_Message}
${\footnote MsiMessage.Message}
+{\footnote MsiMessage:Message}
K{\footnote Message}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Message Method
\line\tx360\tab\fs18\b0{\uldb MsiMessage Object}{\v MsiMessage_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Accepts a message type and parameters and returns a result code. This is
 called by installer components to request UI handling and to provide progress notifications.
 It is implemented by UI handlers, and also by MsiEngine which intercepts it to supply
 formatting strings and logging services.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Message({\i kind, record})}
\par{\i object}\line
Required. The MsiMessage object, or a derived object such as MsiHandler or MsiEngine
\par{\i\b kind}\line
Required. The message type, one of imtEnum, described below, combined with button styles where appropriate
\par{\i\b record}\line
Required. An MsiRecord object containing message-specific field.
\par\pard{\b Message Types}\par\li180
{\f1 imtOutOfMemory  } out of memory, may be called recursively\line
{\f1 imtError        } error message,   (1) is imsg/idbg error code\line
{\f1 imtWarning      } warning message, (1) is imsg/idbg code, not fatal\line
{\f1 imtUser         } user request,    (1) is imsg/idbg code\line
{\f1 imtInfo         } informative message for log, not to be displayed\line
{\f1 imtDiagnostic   } debug notification, displayed only if no log\line
{\f1 imtCommonData   } info for UI: (1)=message type (2,...) arguments\line
      {\b imtCommonData message types:}\line
		{\f1 (1)=1     (2)=}language id\line
		{\f1 (1)=2     (2)=}dialog caption\line
		{\f1 (1)=3     (2)=}boolean, show/hide cancel button\line
{\f1 imtActionStart  } start of action, (1) action name, (2) description\line
{\f1 imtActionData   } data associated with individual action item\line
{\f1 imtProgress     } progress gauge info, (1) units so far, (2) total
{\f1 imtActionDone   } end of actions, dismiss modeless progress dialog\line
\par\pard{\b MessageBox Button Styles} - identical to Win32 definitions\par\li180
{\f1 imtOk               }  MB_OK  (default)\line
{\f1 imtOkCancel         }  MB_OKCANCEL\line
{\f1 imtAbortRetryIgnore }  MB_ABORTRETRYIGNORE\line
{\f1 imtYesNoCancel      }  MB_YESNOCANCEL\line
{\f1 imtYesNo            }  MB_YESNO\line
{\f1 imtRetryCancel      }  MB_RETRYCANCEL
\par\pard{\b MessageBox Icon Type}- identical to Win32 definitions, default is none\par\li180
{\f1 imtIconError        }  MB_ICONERROR\line
{\f1 imtIconQuestion     }  MB_ICONQUESTION\line
{\f1 imtIconWarning      }  MB_ICONWARNING\line
{\f1 imtIconInfo         }  MB_ICONINFORMATION
\par\pard{\b Default Button} - identical to Win32 definitions, default is first\par\li180
{\f1 imtDefault1         }  MB_DEFBUTTON1\line
{\f1 imtDefault2         }  MB_DEFBUTTON2\line
{\f1 imtDefault3         }  MB_DEFBUTTON3
\par\pard{\b Return Codes} - mapped to Win32 button events\par\li180
{\f1 imsError  = -1  } error in message handler
{\f1 imsNone   =  0  } no action taken\line
{\f1 imsOk     =  1  } IDOK\line
{\f1 imsCancel =  2  } IDCANCEL\line
{\f1 imsAbort  =  3  } IDABORT\line
{\f1 imsRetry  =  4  } IDRETRY\line
{\f1 imsIgnore =  5  } IDIGNORE\line
{\f1 imsYes    =  6  } IDYES\line
{\f1 imsNo     =  7  } IDNO\line
\page

#{\footnote MsiEngine_Object}
${\footnote MsiEngine Object}
K{\footnote MsiEngine}
+{\footnote Class:MsiEngine}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiEngine Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiEngine object controls the installation process.
 It relies on an MsiServices object to perform all of the operating system functions.
 It opens the install database, which contains the installation tables and data.
 It defers all error handling and user interactions to the MsiHandler object.
 The MsiEngine object is associated with a standard set of action functions,
 each which performs particular operations on data from one or more tables.
 Additional custom actions may be added for particular product installations.
 The basic engine function is a sequencer which fetches sequential records from
 a designated "sequence" table (such as {\uldb InstallSequence}{\v _msi_InstallSequence_Table@msi.hlp}),
 evaluates any specified condition expression and executes the designated action. Actions not
 recognized by the engine are deferred to the MsiHandler object for processing.
\par\li0{\b Properties}\par\li180
{\uldb ConfigurationServer}{\v MsiEngine_ConfigurationServer}\line
{\uldb Database}{\v MsiEngine_Database}\line
{\uldb DirectoryManager}{\v MsiEngine_DirectoryManager}\line
{\uldb Handler}{\v MsiEngine_Handler}\line
{\uldb Property}{\v MsiEngine_Property}\line
{\uldb SelectionManager}{\v MsiEngine_SelectionManager}\line
{\uldb Services}{\v MsiEngine_Services}\line
\par\li0{\b Methods}\par\li180
{\uldb DoAction}{\v MsiEngine_DoAction}\line
{\uldb EvaluateCondition}{\v MsiEngine_EvaluateCondition}\line
{\uldb FormatText}{\v MsiEngine_FormatText}\line
{\uldb Initialize}{\v MsiEngine_Initialize}\line
{\uldb Message}{\v MsiEngine_Message}\line
{\uldb OpenView}{\v MsiEngine_OpenView}\line
{\uldb Terminate}{\v MsiEngine_Terminate}\line
{\uldb ResolveFolderProperty}{\v MsiEngine_ResolveFolderProperty}\line
{\uldb Sequence}{\v MsiEngine_Sequence}\line
{\uldb ExecuteRecord}{\v MsiEngine_ExecuteRecord}\line
{\uldb ValidateProductID}{\v MsiEngine_ValidateProductID}\line
{\uldb GetMode}{\v MsiEngine_GetMode}\line
{\uldb SetMode}{\v MsiEngine_SetMode}\line
\par\fi0\li0{\b Engine Initialization Processing}\par\li500\fi-320
The following methods and properties are normally call by the loader:
\line Initialize method - initializes components and database using values passed in arguments.
\line DoAction method - commences installation by calling a top level action, typically "Install".
\line Terminate method - releases all data and references held by the engine.
\page

#{\footnote MsiEngine_Services}
${\footnote MsiEngine.Services}
+{\footnote MsiEngine:Services}
K{\footnote SERVICES}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Services Property
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\uldb MsiServices}{\v MsiServices_Object} object used by
 the engine, obtained from the MsiServer object when the engine was created.
Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Services}
\par{\i object}\line
Required. The MsiEngine object.
\page

#{\footnote MsiEngine_ConfigurationServer}
${\footnote MsiEngine.ConfigurationServer}
+{\footnote MsiEngine:ConfigurationServer}
K{\footnote SERVICES}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ConfigurationServer Property
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiServer object used by the engine, created when the engine object
 was created. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ConfigurationServer}
\par{\i object}\line
Required. The MsiEngine object.
\page

#{\footnote MsiEngine_Handler}
${\footnote MsiEngine.Handler}
+{\footnote MsiEngine:Handler}
K{\footnote HANDLER}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Handler Property
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiHandler object used by the engine. This is initially set by the
 {\uldb Initialize}{\v MsiEngine_Initialize} method of MsiEngine, to
 either the default handler in the engine, or the the external handler
 component, depending upon the UI level supplied to Initialize.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Handler}
\par{\i object}\line
Required. The MsiEngine object.
\page

#{\footnote MsiEngine_Database}
${\footnote MsiEngine.Database}
+{\footnote MsiEngine:Database}
K{\footnote DATABASE}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The name of the primary MsiDatabase object used by the engine.
 This is set during the {\uldb Initialize}{\v MsiEngine_Initialize} method of MsiEngine.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Database}
\par{\i object}\line
Required. The MsiEngine object.
\page

#{\footnote MsiEngine_Property}
${\footnote MsiEngine.Property}
+{\footnote MsiEngine:Property}
K{\footnote Property}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Property Property
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The string value of a named Installer property, as maintained by the MsiEngine
 object in the in-memory Property table, or if prefixed with a percent sign ({\f1\b %}),
 the value of a system environment variable for the current process.
 Either string or integer values may be supplied.
 A non-existent property or environment variable is equivalent to its value being null.
 Read-write.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Property({\i name})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b name}\line
Required. The case-sensitive name of a property, or
 a case-insensitive name of an environment variable prefixed by a percent sign.
\par\fi0\li0{\b Remarks}\par\li180
For a list of common properties, see {\uldb Property Summary}{\v Property_Contents}.
\page

#{\footnote MsiEngine_SelectionManager}
${\footnote MsiEngine.SelectionManager}
+{\footnote MsiEngine:SelectionManager}
K{\footnote SelectionManager}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SelectionManager Property
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\uldb MsiSelectionManager}{\v MsiSelectionManager_Object} object associated with the engine. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SelectionManager}
\par{\i object}\line
Required. The MsiEngine object.
\page

#{\footnote MsiEngine_DirectoryManager}
${\footnote MsiEngine.DirectoryManager}
+{\footnote MsiEngine:DirectoryManager}
K{\footnote DirectoryManager}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DirectoryManager Property
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\uldb MsiDirectoryManager}{\v MsiDirectoryManager_Object} object associated with the engine. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DirectoryManager}
\par{\i object}\line
Required. The MsiEngine object.
\page

#{\footnote MsiEngine_FormatText}
${\footnote MsiEngine.FormatText}
+{\footnote MsiEngine:FormatText}
K{\footnote FormatText}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FormatText Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Takes a string and returns a string where the property names are resolved.\line
If a substring of the form [propertyname] is encountered, it is replaced by the value of the property.\line
The square brackets can be iterated, the property names are resolved from inside out.\line
If a substring of the form [%environmentvariable] is found, the value of the environment variable is substituted. \line
If a substring of the form [#filekey] is found, it is replaced by the full path of the file, with the value {\i filekey} used as a key into the {\b File} table. \line
If a substring of the form [$componentkey] is found, it is replaced by the install directory of the component, with the value {\i componentkey} used as a key into the {\b Component} table taking into account the Component.Action column state. If the component is selected to be installed locally it is replaced by the target directory, if the component is selected for run from source it is replaced by the source directory, and if the component is not selected or missing it is replaced by a null string.\line
If a substring of the form [\char] is found, it is replaced by the character without any further processing. Only the first character after the backslash is kept, everything else is removed. 
If a part of the string is enclosed in \{ \}, and contains no square brackets, it is left unchanged, including the curly braces.\line
If a part of the string is enclosed in \{ \}, and contains one or more property name; if all the properties are found, the text (with the resolved substitutions) is displayed without the curly braces. If any of the properties is not found, all the text in the braces, and the braces themselves are removed.\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FormatText({\i text})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b text}\line
Required. The string to be formatted
\par\fi0\li0{\b Remarks}\par\li180
If some square brackets or curly braces have no matching pair, they will be left in the text.
\page

#{\footnote MsiEngine_EvaluateCondition}
${\footnote MsiEngine.EvaluateCondition}
+{\footnote MsiEngine:EvaluateCondition}
K{\footnote EvaluateCondition}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
EvaluateCondition Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Evaluates an logical expression containing symbols and values, 
and returns an integer of the enumeration iecEnum, as described below.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .EvaluateCondition({\i condition})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b condition}\line
Required. A string containing the logical expression.
\par\fi0\li0{\b Expression Syntax}\par\li180
 value ::= symbol | literal | integer\line
 comparison-operator ::= {\b <} | {\b >} | {\b <=} | {\b >=} | {\b =} | {\b <>}\line
 term ::= value | value comparison-operator value | {\b (} expression {\b )}|\line
 boolean-factor ::= term | {\b NOT} term\line
 boolean-term ::= boolean-factor | boolean-factor {\b AND} term\line
 expression ::= boolean-term | boolean-term {\b OR} expression\line
 symbol ::= property | %environment-variable | $component-action | ?component-state
 | &feature-action | !feature-state\line
\par\fi0\li180
All symbol names and values are case-sensitive,
 except that environment variable names are case-insensitive.\line
Operators are case-insensitive.\line
Literal text must be enclosed in double quotes.\line
Floating point numeric values are not supported.\line
Operators and precedence: same as BASIC and SQL languages.\line
Arithmetic operators are not supported.\line
Supported operators: Or And Not Xor Eqv Imp < <= = <> >= > () .\line
Non-existent property values are treated as empty strings.\line
Comparison of an integer with a string or property value that cannot be converted to an
 integer is always iecFalse, except for the comparison operator '<>' which returns iecTrue.\line
Parentheses may be used to override operator precedence.\line
For string comparisons, a tilde '{\f1\b ~}' prefixed to the operator will
 perform a case-insensitive compare.
\par\fi0\li0{\b Symbol Types}\par\li180
\trowd\trgaph108\trleft200\cellx2400\cellx3600\cellx8000
\intbl{\ul Symbol Type\cell Prefix\cell Value\cell }\row
\intbl Installer property\cell (none)\cell value of property (Property table)\cell\row
\intbl Environment variable\cell {\f1\b %}\cell value of environment variable\cell\row
\intbl Component table key\cell {\f1\b &}\cell action state of the component\cell\row
\intbl Component table key\cell {\f1\b !}\cell installed state of the component\cell\row
\intbl Feature table key\cell {\f1\b &}\cell action state of the feature\cell\row
\intbl Feature table key\cell {\f1\b !}\cell installed state of the feature\cell\row
\par\fi0\li0{\b Return Values}\par\li180
{\f1 iecFalse = 0 } - expression evaluates to False\line
{\f1 iecTrue  = 1 } - expression evaluates to True\line
{\f1 iecNone  = 2 } - expression not present, caller decides interpretation\line
{\f1 iecError = 3 } - syntax error in expression, cannot be evaluated
\par\fi0\li0{\b Logical Operators}, high to low precedence\par\li180
{\f1\b Not } - prefix unary operator, inverts state of following term\line
{\f1\b And } - True if both terms True\line
{\f1\b Or  } - True if either or both terms True\line
{\f1\b Xor } - True if either but not both terms True\line
{\f1\b Eqv } - True if both terms True or both False\line
{\f1\b Imp } - True if left term False or right term True
\par\fi0\li0{\b Comparison Operators}, can occur only between two values\par\li180
{\f1\b =   } - True if left value is equal to right value\line
{\f1\b <>  } - True if left value is not equal to right value\line
{\f1\b >   } - True if left value is greater than right value\line
{\f1\b >=  } - True if left value is greater than or equal to right value\line
{\f1\b <   } - True if left value is less than right value\line
{\f1\b <=  } - True if left value is less than or equal to right value
\par\fi0\li0{\b Substring Operators}, when present between two string values\par\li180
{\f1\b ><  } - True if left string contains the right string\line
{\f1\b <<  } - True if left string starts with the right string\line
{\f1\b >>  } - True if left string ends with the right string
\par\fi0\li0{\b Bitwise Numeric Operators}, when present between two integer values\par\li180
{\f1\b ><  } - Bitwise AND, True if left and right integers have any bits in common
{\f1\b <<  } - True if the high 16-bits of left integer equals the right integer\line
{\f1\b >>  } - True if the low 16-bits of the left integer equals the right integer
\par\fi0\li0{\b Feature and Component State Values}\par\li180
{\f1 0 (iisAbsent)} - feature or component not present\line
{\f1 1 (iisLocal) } - feature or component on local machine\line
{\f1 2 (iecSource } - feature or component run from source\line
{\f1 (null value) } - no action to be taken on feature or component\line
{\ul Note}: these states are not set until the {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel}
 method is called, either directly or by the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp} action.
 Therefore, state checking is generally only useful in conditional expression in an action sequence table.
\page

#{\footnote MsiEngine_Initialize}
${\footnote MsiEngine.Initialize}
+{\footnote MsiEngine:Initialize}
K{\footnote Initialize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Initialize Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Validates and opens the database, initializes the engine, handler, Property table.
 Fails if the database is incompatible or does not contain Property and Error tables.
 Returns an integer enumeration indicating the result. If an error occurs, the
 handler is not initialized and cannot display the error; therefore the responsibility
 of the caller to handle the error.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Initialize({\i database, uiLevel, commandLine})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b database}\line
Required. Name or path to the database file. The engine interprets this string
 and attempts to create the corresponding MsiDatabase object. The MsiDatabase object
 must contain the {\uldb Error}{\v _msi_Error_Table@msi.hlp} table, and the
 {\uldb Property}{\v _msi_Property_Table@msi.hlp} table. The Property table must contain the
 {\uldb ProductVersion}{\v Property_ProductVersion}, {\uldb ProductLanguage}{\v Property_ProductLanguage}, and {\uldb ProductCode}{\v Property_ProductCode}
 properties for the initialization to succeed. To facilitate component testing, if
 an empty string is supplied, a temporary database will be created containing an empty
 Property table.
\par{\i\b uiLevel}\line
Optional. The interaction level of the UI, one of the following:
{\line\f1 iuiFull    = 0  } default, full interactive UI
{\line\f1 iuiReduced = 1  } progress and errors, no modeless dialogs (wizards)
{\line\f1 iuiBasic   = 2  } progress and errors using engine default handler
{\line\f1 iuiNone    = 3  } no UI\line
\par{\i\b commandLine}\line
Optional. String containing property definitions, normally launcher command line.
 These properties will override those in the resources of the launcher EXE,
 The property name will be forced to upper case; the value is case-sensitive.
 All externally settable properties are named entirely with
 upper case letters. White space around the equals sign is optional.
 Spaces within the value text are preserved if the value is quoted.
 In addition to the property=value syntax, a selected set of letter options are interpreted.
\par\fi0\li0{\b Operations performed by MsiEngine.Initialize}\par\li180

 1. Loads property table if in UI preview mode. Goto step 15.\line
 2. If a database wasn't passed in via the
 database parameter, attempts to locate DATABASE= on the command-line
 and use this as the database. If neither the database parameter is set
 nor DATABASE= specifed on the command-line, creates a temporary database
 and property table.\line
 3. Evaluates the {\b\i uiLevel} argument and displays a startup window
 if not totally quiet.\line
 4. Copies the database to the TEMP folder if running from a floppy
    or other removable media.\line
 5. Reads and validates the SummaryInformation stream (_SummaryInformation table if ODBC database).\line
 6. Checks database version against the engine and services objects.\line
 7. Authenticates the database (if enabled)
 8. Determines which language to use. The language is chosen using the
  following steps, until a language is found:\line
      a. If a language is advertised for the product then it is used. If the
  database doesn't support this language then ieiLanguageUnsupported is returned.\line
      b. If a language is specified on the command-line for the product then it is
  used. If the database doesn't support this language then ieiLanguageUnsupported
  is returned.\line
      c. If a language supported by the database is the same as the user's
  default language then it is used.\line
      d. If a language supported by the database is the primary language of
  the user's default language then it is used.\line
      e. If the primary language of a language supported by the database is
  the primary language of the user's default language then it is used.\line
      f. If there is only one language supported by the database for which
  the system has locale information then it is used.\line
      g. The user is presented with a choice of language for which the system
  has locale information. The chosen language is used.\line
      h. An error, ieiLanguageUnsupported, is returned.\line
 9. Opens the database, read-only unless PID_SECURITY property is set to 0.\line
10. Applies language transform if a language other than the base language is chosen.\line
11. Initializes database transforms, if transforms have been advertised or the
 TRANSFORMS property is set\line
12. Loads Property table from the opened database.\line
13. Loads Error table and caches message headers from that table.\line
14. Adds user registration properties from the registry.\line
15. Processes property settings from the string passed in the {\b\i commandLine} argument.\line
16. Sets the operating system and hardware properties using
 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties}.\line
17. Creates an MsiExecute object to execute operations, directly or via script.\line
18. Initializes the log if {\uldb LOGFILE}{\v Property_LOGFILE} property is set.\line
19. Set the UI interaction level, creates instance of MsiHandler if full UI.\line
20. Initializes the MsiHandler object, supplying this engine object.\line
21. Checks whether an install is in progress and performs the following steps if one is:\line
      a. If the install was started by a different user then it's silently rolled back\line
	  b. Otherwise, if it's the same user, but a different product then the user is
 given the option to either roll back the partial install or exit\line
      c. Otherwise, if it's the same user, same product, but has different
 in-progress properties, then the user is given the option to either roll
 back the partial install or exit\line
	  d. Otherwise, if it's the same user and same product then the previously 
 started install is resumed.\line
\par\fi0\li0{\b Return Values}\par\li180
{\f1 ieiSuccess             =  0  } initialization complete\line
{\f1 ieiAlreadyInitialized  =  2  } this engine object is already initialized\line
{\f1 ieiCommandLineOption   =  3  } invalid command line syntax\line
{\f1 ieiDatabaseOpenFailed  =  5  } database could not be opened\line
{\f1 ieiDatabaseInvalid     =  6  } incompatible database\line
{\f1 ieiInstallerVersion    =  7  } installer version does not support database format\line
{\f1 ieiSourceAbsent        =  8  } couldn't resolve the source\line
{\f1 ieiHandlerInitFailed   = 10  } could not initialize handler interface\line
{\f1 ieiLogOpenFailure      = 11  } could not open logfile in requested mode\line
{\f1 ieiLanguageUnsupported = 12  } no acceptable language could be found\line
{\f1 ieiPlatformUnsupported = 13  } no acceptable platform could be found
{\f1 ieiTransformFailed     = 14  } database transform failed to merge\line
{\f1 ieiSignatureRejected   = 15  } digital signature rejected\line
{\f1 ieiDatabaseCopyFailed  = 16  } could not copy database to temp dir\line
{\f1 ieiPatchPackageOpenFailed  = 17 } could not open patch package\line
{\f1 ieiPatchPackageInvalid     = 18 } patch package invalid\line
{\f1 ieiTransformNotFound       = 19 } transform file not found\line
{\f1 ieiPatchPackageUnsupported = 20 } patch package unsupported (unsupported patching engine?)\line
{\f1 ieiPackageRejected         = 21 } package cannot be run because of security reasons\line
{\f1 ieiProductUnknown          = 22 } attempt to uninstall a product you haven't installed\line
{\f1 ieiDiffUserAfterReboot     = 23 } different user attempting to complete install after reboot\line
{\f1 ieiProductAlreadyInstalled = 24 } product has been installed already w/ a different package\line
{\f1 ieiTSRemoteInstallDisallowed = 25 } can't do installations from a remote session on Hydra\line
\page

#{\footnote MsiEngine_SetMode}
${\footnote MsiEngine.SetMode}
+{\footnote MsiEngine:SetMode}
K{\footnote SetMode}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetMode Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Sets a particular mode to the on or off state.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetMode({\i mode, state})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b mode}\line
The mode to turn on or off. Possible values are any iefEnum value from engine.h.\line
\par{\i\b state}\line
Boolean. True to turn mode on, false to turn mode off.
\page

#{\footnote MsiEngine_GetMode}
${\footnote MsiEngine.GetMode}
+{\footnote MsiEngine:GetMode}
K{\footnote GetMode}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetMode Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Gets the current mode bits.  The return is a bit flag.  Values are defined as iefEnum in engine.h.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetMode()}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b state}\line
\page


#{\footnote MsiEngine_Terminate}
${\footnote MsiEngine.Terminate}
+{\footnote MsiEngine:Terminate}
K{\footnote Terminate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Terminate Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Terminates the engine operations and releases references and data.
 This method must be called before the engine is released.
 After this method, the engine is returned to the uninitialized state,
 and the {\uldb Initialize}{\v MsiEngine_Initialize} method may be called again.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Terminate({\i state})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b state}\line
The return status of the last executed action. See the
 {\uldb DoAction}{\v MsiEngine_DoAction} method
 for possible values. This value is passed to the server
 to determine
 how to handle rollback and the in-progress information for the install.
 See {\uldb InstallFinalize}{\v MsiConfigurationManager_InstallFinalize}
 for more information.
\par\fi0\li0{\b Return Values}\par\li180
Returns the given state, or iesSuspend if the install was suspended.
\page

#{\footnote MsiEngine_DoAction}
${\footnote MsiEngine.DoAction}
+{\footnote MsiEngine:DoAction}
K{\footnote DoAction}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DoAction Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx2400\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx4100\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\tx6300\tab{\uldb Msi Actions}{\v _msi_Installation_Database_Actions_List@msi.hlp}
\par}\li180
Executes the action function corresponding to the name supplied.
 If the name is not recognized by the engine as a build-in action or
 as a custom action in the CustomAction table, the name is 
 passed to the DoAction method of the MsiHandler object,
 which may either invoke a function or a dialog.
 If a null action name is supplied, the engine uses the upper-cased value
 of the ACTION property as the action to perform. If no property value is
 defined, the default action is performed, currently defined as "INSTALL".
 This method returns an integer enumeration as described below.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DoAction({\i action})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b action}\line
Required. The string name of the action to execute, case-sensitive.
\par\fi0\li0{\b Return Values}\par\li180
{\f1 iesNoAction       = 0  } action not invoked, most-likely does not exist.\line
{\f1 iesSuccess        = 1  } IDOK, completed actions successfully.\line
{\f1 iesUserExit       = 2  } IDCANCEL, user terminated prematurely.\line
{\f1 iesFailure        = 3  } IDABORT, unrecoverable error occurred.\line
{\f1 iesSuspend        = 4  } IDRETRY, sequence suspended, to be resumed later.\line
{\f1 iesFinished       = 5  } IDIGNORE, skip remainin actions, not an error\line
{\f1 iesWrongState     = 6  } calling sequence error, not in initialized state.\line
{\f1 iesBadActionData  = 7  } from Sequence(), invalid Action table record data.
\page

#{\footnote MsiEngine_Sequence}
${\footnote MsiEngine.Sequence}
+{\footnote MsiEngine:Sequence}
K{\footnote Sequence}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Sequence Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Opens a query on the specified table, ordering the actions by the numbers in the
 'Sequence' column.  For each row fetched, the {\uldb DoAction}{MsiDatabase_DoAction}
 method is called, provided that any supplied condition expression does not evaluate to False.
 Returns an enumeration iesEnum, as described in the {\uldb DoAction}{\v MsiEngine_DoAction} method.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Sequence({\i table})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b table}\line
Required. The string name of the table to use for sequencing.
\par\fi0\li0{\b Remarks}\par\li180
This method is meant to be called internally by top-level actions.
\page

#{\footnote MsiEngine_Message}
${\footnote MsiEngine.Message}
+{\footnote MsiEngine:Message}
K{\footnote Message}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Message Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Performs any enabled logging operations and defers exection
 to the {\uldb Message}{\v MsiHandler_Message} method of the MsiHandler
 object associated with the engine. Logging may be selectively enabled
 for the various message types.  See {uldb MsiMessage.Message}{\v MsiMessage_Message}
 for message types and return codes.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Message({\i kind, record})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b kind}\line
Required. The message type, one of imtEnum, as described in {\uldb MsiMessage.Message}{\v MsiMessage_Message}
\par{\i\b record}\line
Required. An MsiRecord object containing message-specific field.
\par\pard{\b Processing by Message Types}\par\li180
{\f1 imtOutOfMemory  } logged if '{\f1 m}' in LOGMODE, passed to handler\line
{\f1 imtError        } logged if '{\f1 e}' in LOGMODE, passed to handler\line
{\f1 imtWarning      } logged if '{\f1 w}' in LOGMODE, passed to handler\line
{\f1 imtUser         } logged if '{\f1 u}' in LOGMODE, passed to handler\line
{\f1 imtInfo         } logged if '{\f1 i}' in LOGMODE, not passed to handler\line
{\f1 imtDiagnostic   } logged if '{\f1 d}' in LOGMODE, not passed to handler if log enabled\line
{\f1 imtCommonData      } logged if '{\f1 c}' in LOGMODE, passed to handler to cache\line
{\f1 imtActionStart  } logged if '{\f1 a}' in LOGMODE, passed to handler for progress display\line
{\f1 imtActionData   } logged if '{\f1 r}' in LOGMODE, passed to handler for progress display\line
{\f1 imtProgress     } never logged, passed to handler progress gauge
{\f1 imtActionDone   } never logged, passed to handler to remove progress dialog
\page

#{\footnote MsiEngine_OpenView}
${\footnote MsiEngine.OpenView}
+{\footnote MsiEngine:OpenView}
K{\footnote OpenView}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
OpenView Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Simply a wrapper which defers to the {\uldb OpenView}{\v MsiDatabase_OpenView}
 method of the current MsiDatabase object associated with the engine.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .OpenViewSQL({\i sql, intent})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b sql}\line
Required. The SQL query string.
\par{\i\b intent}\line
Required. The combination of operations intended on the MsiView object.
\page

#{\footnote MsiEngine_ExecuteRecord}
${\footnote MsiEngine.ExecuteRecord}
+{\footnote MsiEngine:ExecuteRecord}
K{\footnote ExecuteRecord}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
OpenView Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Either executes or spools and operation, depending on the current mode of execution.
 If the {\uldb EXECUTEMODE}{\v Property_EXECUTEMODE} property indicates direct
 execution, the operation is executed immediately.  Otherwise, the operation is added
 to the current script. If no script has been created yet, a script is created
 and the {\uldb ixoHeader}{\v Operation_ixoHeader},
 {\uldb ixoProductInfo}{\v Operation_ixoProductInfo},
 {\uldb ixoDialogInfo}{\v Operation_ixoDialogInfo} and
 {\uldb ixoRollbackInfo}{\v Operation_ixoRollbackInfo}
 operations are added before this operation.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ExecuteRecord({\i opcode, params})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b opcode}\line
Required. The {\uldb opcode}{\v Server_ScriptOpcodes} of the operation to execute.
\par{\i\b params}\line
Required. An MsiRecord object containing the arguments for this operation.
\page

#{\footnote MsiEngine_ResolveFolderProperty}
${\footnote MsiEngine.ResolveFolderProperty}
+{\footnote MsiEngine:ResolveFolderProperty}
K{\footnote ResolveFolderProperty}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ResolveFolderProperty Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method insures that the designated property contains a full path to a folder.
 If the property does not exist, it is create with the folder of the database
 passed to the {\uldb Initialize}{\v MsiEngine_Initialize} method.
 If a partial path is supplied, i.e. not commencing with a drive letter or UNC path,
 the partial path is prefixed with the database folder. Partial paths beginning with
 a dot or double dot are not supported. The method returns a boolean indicating
 whether the property was initially defined or not.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ResolveFolderProperty({\i property})}
\par{\i object}\line
Required. The MsiEngine object.
\par{\i\b property}\line
Required. Name of the property to be resolved.  
\page

#{\footnote MsiEngine_ValidateProductID}
${\footnote MsiEngine.ValidateProductID}
+{\footnote MsiEngine:ValidateProductID}
K{\footnote ValidateProductID}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ValidateProductID Method
\line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method returns a boolean value indicating if the Product ID is valid. In maintenance mode or if the {\uldb PIDTemplate}{\v Property_PIDTemplate} property is missing the method always returns true.
 Otherwise it compares the content of the PIDTemplate property and the {\uldb PRODUCTID}{\v Property_PRODUCTID} property. It also supplies the random digits and verifies the checksum. For a description of the syntax of the template, see the {\uldb MaskedEdit}{\v ControlType_MaskedEdit} control description.
 The PRODUCTID property should initially contain the part of the PID that is entered by the user. If the entry is validated, the PIDTemplate property is removed, and the PRODUCTID property is set to the complete validated value. Otherwise both
 properties remain unchanged. If there is a CCP digit in the template, the value of that digit is stored in the {\uldb CCPTrigger}{\v Property_CCPTrigger} property.
 This method is called from the CostInitialize action, in order to validate the PID if possible before the wizard sequence. If it fails, the user is asked for the input by the UI. The UI calls this method again to validate the entry and blocks further steps untill a valid entry is received.
 The method is also called from the InstallValidate action, where it blocks the installation if the validation failed.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ValidateProductID()}
\par{\i object}\line
Required. The MsiEngine object.
\page


#{\footnote MsiCostAdjuster_Object}
${\footnote MsiCostAdjuster Object}
K{\footnote MsiCostAdjuster}
+{\footnote Class:MsiCostAdjuster}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiCostAdjuster Object class
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiCostAdjuster objects are created by special costing actions, which are responsible for both the
 implementation and exposure of the object through the MsiCostAdjuster interface.  For this reason, these
 objects cannot be created or accessed via automation.\line
 \line
See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} and
 {\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster} topics for details on the
 creation and usage of MsiCostAdjuster objects.
\par\li0{\b Methods}\par\li180
{\uldb GetDynamicCost}{\v MsiCostAdjuster_GetDynamicCost}\line
\page

#{\footnote MsiCostAdjuster_GetDynamicCost}
${\footnote MsiCostAdjuster.GetDynamicCost}
+{\footnote MsiCostAdjuster:GetDynamicCost}
K{\footnote GetDynamicCost}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetDynamicCost method
\line\tx360\tab\fs18\b0{\uldb MsiCostAdjuster Object}{\v MsiCostAdjuster_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetDynamicCost method is responsible for calculating the total disk space cost associated with a
 specified {\uldb Component}{\v _msi_Component_Table@msi.hlp} table entry, and returning the result.  Note that
 because the actual implementation of each type of MsiCostAdjuster object is supplied by various
 Installer actions, the actual calculations performed by GetDynamicCost are implementation-specific.
\par\li0{\b Syntax}\par\li500\fi-320
IMsiRecord* piRec = {\i object}->{\b GetDynamicCost}(ristrComponent, riDestPath,iDynamicCost);
\par{\i object}\line
Required. The MsiCostAdjuster object.
\par{\i\b IMsiString& ristrComponent}\line
Required. A reference to the string name of the component in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table
 that needs to be dynamically recosted.\line
\par{\i\b IMsiPath& riDestPath}\line
Required. a reference to a path object that represents the directory path associated with the component.\line
\par{\i\b int& iDynamicCost}\line
Required. a reference through which the dynamic cost as calculated by GetDynamicCost is returned to the caller.\line
\par\fi0\li0{\b Remarks}\par\li180
For each MsiCostAdjuster object that is registered with the {\uldb Selection Manager}{\v MsiSelectionManager_Object}
 using the {\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster} method, the GetDynamicCost
 method of that object will be called whenever the disk space cost associated with a specified
 component needs to be re-calculated.  For instance, when the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp}
 action is executed, every component needs to be initialized, so all MsiCostAdjuster objects will be called
 once for each entry in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table. Later, if the directory and/or
 selection state associated with any component changes (i.e. through UI user interaction), the affected
 component(s) will be recosted, causing all MsiCostAdjuster objects to be called again.\line
 \line
 See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} topic for a complete discussion of costing.
\page

#{\footnote MsiSelectionManager_Object}
${\footnote MsiSelectionManager Object}
K{\footnote MsiSelectionManager}
+{\footnote Class:MsiSelectionManager}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiSelectionManager Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiSelectionManager object, associated with the MsiEngine object, manages the in-memory 
 Feature,Component and VolumeCost tables. It loads the Feature and Compnent tables from the database and adds
 temporary columns used in the UI selection and costing actions. The VolumeCost table
 is temporary and contains the accumulated disk cost.
\par
Other objects, such as MsiHandler, that need to make changes in the 'Select'
 state of records within the Feature Table will do so via the Selection Manager.
 For instance, the Handler can get a read-only reference to the loaded Feature Table via
 the FeatureTable property, and can use a cursor to read values at will from any records
 and columns in the table.  However, to alter the 'Select' state of a Feature Table record,
 a selection request must be made through the Selection Manager's ConfigureFeature interface.
 This is because the Selection Manager must handle the dynamic costing and updating of the
 'Select' condition of each Feature record as the selection states of parent and child
 Feature records change.
\par
During standard installations, the Selection Manager will normally be initialized by executing the
 {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp}
 action.
\par\li0{\b Properties}\par\li180
{\uldb FeatureTable}{\v MsiSelectionManager_FeatureTable}\line
{\uldb ComponentTable}{\v MsiSelectionManager_ComponentTable}\line
\par\li0{\b Methods}\par\li180
{\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature}\line
{\uldb FreeSelectionTables}{\v MsiSelectionManager_FreeSelectionTables}\line
{\uldb GetFeatureValidStates}{\v MsiSelectionManager_GetFeatureValidStates}\line
{\uldb GetFeatureCost}{\v MsiSelectionManager_GetFeatureCost}\line
{\uldb GetDescendentFeatureCost}{\v MsiSelectionManager_GetDescendentFeatureCost}\line
{\uldb GetVolumeCostTable}{\v MsiSelectionManager_GetVolumeCostTable}\line
{\uldb InitializeDynamicCost}{\v MsiSelectionManager_InitializeDynamicCost}\line
{\uldb InitializeComponents}{\v MsiSelectionManager_InitializeComponents}\line
{\uldb LoadSelectionTables}{\v MsiSelectionManager_LoadSelectionTables}\line
{\uldb ProcessConditionTable}{\v MsiSelectionManager_ProcessConditionTable}\line
{\uldb RecostDirectory}{\v MsiSelectionManager_RecostDirectory}\line
{\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster}\line
{\uldb SetFeatureHandle}{\v MsiSelectionManager_SetFeatureHandle}\line
{\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel}\line
{\uldb SetComponent}{\v MsiSelectionManager_SetComponent}\line
\page


#{\footnote MsiSelectionManager_SetReinstallMode}
${\footnote MsiSelectionManager.SetReinstallMode}
+{\footnote MsiSelectionManager:SetReinstallMode}
K{\footnote SetReinstallMode}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetReinstallMode Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Allows the caller to specify the validation mode(s) to be used during a reinstall.  SetReinstallMode should
 normally be used in conjunction with a call to {\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature},
 to specify the feature or features to be reinstalled.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetReinstallMode(istrMode)}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i istrMode}\line
Required. A string containing letters that specify the type of reinstall to perform.  The letters accepted by
 SetReinstallMode are identical to those specified for the {\uldb REINSTALLMODE}{\v Property_REINSTALLMODE} property.
\par\fi0\li0{\b Remarks}\par\li180
The {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method must be called before
 calling SetReinstallMode.
\page


#{\footnote MsiSelectionManager_FeatureTable}
${\footnote MsiSelectionManager.FeatureTable}
+{\footnote MsiSelectionManager:FeatureTable}
K{\footnote FeatureTable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FeatureTable Property
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the loaded {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} table as an MsiTable object.
 Returns an object set to Nothing if table is not loaded. Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FeatureTable}
\par{\i object}\line
Required. The MsiSelectionManager object.
\page

#{\footnote MsiSelectionManager_ComponentTable}
${\footnote MsiSelectionManager.ComponentTable}
+{\footnote MsiSelectionManager:ComponentTable}
K{\footnote ComponentTable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ComponentTable Property
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the loaded {\uldb Component}{\v _msi_Component_Table@msi.hlp} table as an MsiTable object.
 Returns an object set to Nothing if table is not loaded. Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ComponentTable}
\par{\i object}\line
Required. The MsiSelectionManager object.
\page

#{\footnote MsiSelectionManager_GetVolumeCostTable}
${\footnote MsiSelectionManager.GetVolumeCostTable}
+{\footnote MsiSelectionManager:GetVolumeCostTable}
K{\footnote GetVolumeCostTable;VolumeCost table}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetVolumeCostTable method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the loaded VolumeCost table as an MsiTable object.
 Returns an object set to Nothing if table is not loaded. Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetVolumeCostTable()}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par\fi0\li0{\b Remarks}\par\li180
The VolumeCost table is a temporary table that is created in-memory by the
 {\uldb SelectionManager}{\v MsiSelectionManager_Object}.  The purpose of this table is to track the
 total disk space cost of the current install, on a volume by volume basis.  The VolumeCost table
 consists of two columns:
 \par {\i\b VolumeObject}\line
Primary key, containing a pointer to an IMsiVolume object.\line
\par {\i\b VolumeCost}\line
Long integer specifying the total disk space cost attributed to this volume for the current install.\line
\line
\line
Note: the value in the VolumeCost column will be accurate only after the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp}
 action has been executed.  See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} topic for a complete
 discussion of costing.
\page


#{\footnote MsiSelectionManager_GetFeatureValidStates}
${\footnote MsiSelectionManager.GetFeatureValidStates}
+{\footnote MsiSelectionManager:GetFeatureValidStates}
K{\footnote GetFeatureValidStates}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureValidStates method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method returns as the function result an integer representing bit flags, with each relevant bit
 representing a 'valid' installation state for the specified feature.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureValidStates({\i feature})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b feature}\line
Required. String name of feature item whose valid installation states are to be retrieved.
\par\fi0\li0{\b Remarks}\par\li180
The return value is composed of bit flags, as follows:\line
\line
Bit 0: if set, 'iisLocal' is a valid state.\line
Bit 1: if set, 'iisSource' is a valid state.\line
\par
The GetFeatureValidStates method determines state validity by querying all the components that
 are linked to the specified feature (without taking into account the current installed state
 of any component). If any of these components has a value of 'irsOptional' in the RunFromSource
 column, or if at least one component is marked 'irstLocalOnly' AND at least one other component
 is marked 'irsSourceOnly', then both 'iisLocal' and 'iisSource' are both valid states for the
 feature.  If ALL components are set to 'irsLocalOnly', then 'iisLocal' is the only valid state.
 If ALL components are set to 'irsSourceOnly', then 'iisSource' is the only valid state.\line
\page

#{\footnote MsiSelectionManager_GetDescendentFeatureCost}
${\footnote MsiSelectionManager.GetDescendentFeatureCost}
+{\footnote MsiSelectionManager:GetDescendentFeatureCost}
K{\footnote GetDescendentFeatureCost}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetDescendentFeatureCost method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method returns as the function result the total amount of disk space (in units of 512 bytes) required by the specified
 feature, AND all that feature's children.  For each feature, the total cost is made up of the disk costs attributed
 to every component linked to the feature.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetDescendentFeatureCost({\i feature,iAction})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b feature}\line
Required. String name of feature item whose cost is to be retrieved.
\par{\i\b iAction}\line
Required. Specifies the action state to use when determining the feature cost.  For instance, if
 'iisLocal' is specified, GetDescendentFeatureCost will return the disk space that would be required
 were the specified feature and all its children to be installed locally.
 The following enum values are acceptable:
\line\line
 {\b \f1 iisAbsent  = 0} - cost if feature and all subfeatures were to be removed.\line
 {\b \f1 iisLocal   = 1} - cost if feature and all subfeatures were to be installed locally.\line
 {\b \f1 iisSource  = 2} - cost if feature and all subfeatures were to be installed to run from the source media.\line
 {\b \f1 iisCurrent = 4} - cost if feature and all subfeatures were to be installed in their current action state.\line
\page

#{\footnote MsiSelectionManager_GetAncestryFeatureCost}
${\footnote MsiSelectionManager.GetAncestryFeatureCost}
+{\footnote MsiSelectionManager:GetAncestryFeatureCost}
K{\footnote GetAncestryFeatureCost}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetAncestryFeatureCost method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method returns as the function result the total amount of disk space (in units of 512 bytes) required by the specified
 feature, AND that of all the feature's parents (up to the root of the Feature table).  For each feature, the total cost
 is made up of the disk costs attributed to every component linked to the feature.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetAncestryFeatureCost({\i feature, iAction})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b feature}\line
Required. String name of feature item whose cost is to be retrieved.
\par{\i\b iAction}\line
Required. Specifies the action state (iisLocal, iisSource, or iisAbsent) to use when determining the feature cost.  For
 instance, if iisLocal is specified, GetAncestryFeatureCost will return the disk space that would be required were
 the specified feature and all its parent features to be installed locally.
\page

#{\footnote MsiSelectionManager_GetFeatureCost}
${\footnote MsiSelectionManager.GetFeatureCost}
+{\footnote MsiSelectionManager:GetFeatureCost}
K{\footnote GetFeatureCost}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFeatureCost method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method returns as the function result the total amount of disk space (in units of 512 bytes) required by the specified
 feature, NOT including that feature's children or parents.  This total cost is made up of the disk costs attributed
 to every component linked to the feature.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFeatureCost({\i feature,iAction})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b feature}\line
Required. String name of feature item whose cost is to be retrieved.
\par{\i\b iAction}\line
Required. Specifies the action state (iisLocal, iisSource, or iisAbsent) to use when determining the feature cost.  For
 instance, if iisAbsent is specified, GetFeatureCost will return the disk space freed up (i.e. a negative number) were the
 feature to be removed.
\page

#{\footnote MsiSelectionManager_RecostDirectory}
${\footnote MsiSelectionManager.RecostDirectory}
+{\footnote MsiSelectionManager:RecostDirectory}
K{\footnote RecostDirectory}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RecostDirectory method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The RecostDirectory method must be called whenever the path associated with a directory in the
 {\uldb Directory}{\v _msi_Directory_Table@msi.hlp} table changes.  In response, this method prompts each selection that
 references the changed directory to recalculate its dynamic cost.\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RecostDirectory({\i directoryName, oldPath})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b directoryName}\line
Required. String name of directory item in the {\uldb Directory}{\v _msi_Directory_Table@msi.hlp} that has changed.
\par{\i\b oldPath}\line
Required. An MsiPath object that represents the directory item's path before the change.
\par\fi0\li0{\b Remarks}\par\li180
The RecostDirectory method should be called only after the
 {\uldb InitializeDynamicCost}{\v MsiSelectionManager_InitializeDynamicCost} method has been called
 (this is normally done by the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp} action). RecostDirectory
 will typically be called only by the {\uldb DirectoryManager}{\v MsiDirectoryManager_Object}.\line
 \line
 See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} topic for a complete discussion of costing.
\page

#{\footnote MsiSelectionManager_LoadSelectionTables}
${\footnote MsiSelectionManager.LoadSelectionTables}
+{\footnote MsiSelectionManager:LoadSelectionTables}
K{\footnote LoadSelectionTables}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
LoadSelectionTables Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Loads the {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} and {\uldb Component}{\v _msi_Component_Table@msi.hlp} tables into memory
and adds temporary columns used during costing and UI selection.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .LoadSelectionTables()}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par\fi0\li0{\b Remarks}\par\li180
LoadSelectionTable must be called before calling any other SelectionManager method.
\page

#{\footnote MsiSelectionManager_InitializeDynamicCost}
${\footnote MsiSelectionManager.InitializeDynamicCost}
+{\footnote MsiSelectionManager:InitializeDynamicCost}
K{\footnote InitializeDynamicCost}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
InitializeDynamicCost Interface Function
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Initializes the DynamicCost column of each record in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table.
 InitializeDynamicCost does this by making a call to the
 {\uldb GetDynamicCost}{\v MsiCostAdjuster_GetDynamicCost} method of each
 {\uldb MsiCostAdjuster}{\v MsiCostAdjuster_Object} object that has been registered with the 
 {\uldb Selection Manager}{\v MsiSelectionManager_Object}, for each component in the
 {\uldb Component}{\v _msi_Component_Table@msi.hlp} table.\line
\line
Note: InitializeDynamicCost is not available via automation - it is only available through the
 IMsiSelectionManager C++ interface.  This is because dynamic cost calculations can only be performed by
 registered MsiCostAdjuster objects, and these objects can only be created and registered from C++
 (using the {\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster} method).
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .InitializeDynamicCost()}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par\fi0\li0{\b Remarks}\par\li180
InitializeDynamicCost must be called only after the {\uldb Selection Manager}{\v MsiSelectionManager_Object}
 has been initialized (which is typically done by the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp}
 action), and then only after any actions that register dynamic MsiCostAdjuster objects have been executed.
\page

#{\footnote MsiSelectionManager_RegisterCostAdjuster}
${\footnote MsiSelectionManager.RegisterCostAdjuster}
+{\footnote MsiSelectionManager:RegisterCostAdjuster}
K{\footnote RegisterCostAdjuster}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RegisterCostAdjuster Interface Function
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Registers a dynamic {\uldb MsiCostAdjuster}{\v MsiCostAdjuster_Object} object with the
 {\uldb Selection Manager}{\v MsiSelectionManager_Object}.  This object will then be called (through
 the {\uldb GetDynamicCost}{\v MsiCostAdjuster_GetDynamicCost} method) whenever the dynamic cost of
 a component needs to be recalculated.  For example, the {\uldb FileCost}{\v _msi_Action_FileCost@msi.hlp} action
 creates and registers a special "file costing" version of the MsiCostAdjuster interface object.  Then,
 when called by the {\uldb Selection Manager}{\v MsiSelectionManager_Object}, this object is responsible
 for calculating the actual disk space costs for all the files in the {\uldb File}{\v _msi_File_Table@msi.hlp} table that
 reference the specified component.\line
\line
Note: RegisterCostAdjuster is not available via automation - it is only available through the
 IMsiSelectionManager C++ interface.  This is because there is no way to create MsiCostAdjuster objects
 directly via automation - each different type of object exposed through the MsiCostAdjuster interface
 is implemented and created internally by the appropriate Installer action.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .InitializeDynamicCost()}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par\fi0\li0{\b Remarks}\par\li180
RegisterCostAdjuster must be called only after the {\uldb Selection Manager}{\v MsiSelectionManager_Object}
 has been initialized (which is typically done by the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp}
 action).
\page


#{\footnote MsiSelectionManager_FreeSelectionTables}
${\footnote MsiSelectionManager.FreeSelectionTables}
+{\footnote MsiSelectionManager:FreeSelectionTables}
K{\footnote FreeSelectionTables}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FreeSelectionTables Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Frees the in-memory Feature and Component tables, along with the temporary computational and state columns.
 The final Installed state column will be written to persistent storage.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FreeSelectionTables()}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par\fi0\li0{\b Remarks}\par\li180
The return value for FreeSelectionTables is a boolean that indicates whether any components remain in an
 installed state.  If ALL components are absent (i.e. the updated 'Installed' column of the
 {\uldb Component}{\v _msi_Component_Table@msi.hlp} table contains either a NULL value, iisAbsent, or issReleased for all
 components), false will be returned.
\page

#{\footnote MsiSelectionManager_SetFeatureHandle}
${\footnote MsiSelectionManager.SetFeatureHandle}
+{\footnote MsiSelectionManager:SetFeatureHandle}
K{\footnote SetFeatureHandle}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetFeatureHandle Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Stores an external handle to a Feature item, for use by UI display.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetFeatureHandle({\i feature, handle})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b feature}\line
Required. String name of feature item, primary key of Feature table.
\par{\i\b handle}\line
Required. Integer handle value to store in designated Feature table row.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiSelectionManager_ProcessConditionTable}
${\footnote MsiSelectionManager.ProcessConditionTable}
+{\footnote MsiSelectionManager:ProcessConditionTable}
K{\footnote ProcessConditionTable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ProcessConditionTable Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The ProcessConditionTable method loads the {\uldb Condition Table}{\v _msi_Condition_Table@msi.hlp}, and
 evaluates each conditional expression.  For those expressions that evaluate to iecTrue, the
 value in the 'Level' column of the appropriate {\uldb Feature Table}{\v _msi_Feature_Table@msi.hlp}
 entry will be set to the value specified in the {\uldb Condition Table}{\v _msi_Condition_Table@msi.hlp}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ProcessConditionTable()}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par\fi0\li0{\b Remarks}\par\li180
The {\uldb LoadSelectionTables}{\v MsiSelectionManager_LoadSelectionTables} method must be executed prior
 to executing ProcessConditionTable.  In addition, after executing ProcessConditionTable, the
 {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method should be called to update
 the {\uldb Feature Table}{\v _msi_Feature_Table@msi.hlp} 'select' and 'Installed' states.
\page

#{\footnote MsiSelectionManager_InitializeComponents}
${\footnote MsiSelectionManager.InitializeComponents}
+{\footnote MsiSelectionManager:InitializeComponents}
K{\footnote InitializeComponents}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
InitializeComponents Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The InitializeComponents method initializes all components in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table,
 evaluating the expression in the 'Condition' column of that table (all components for which this
 conditional evaluates to iecFalse will be permanently disabled).  Note: InitializeComponents does not change
 the 'Action' state of any component.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .InitializeComponents()}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par\fi0\li0{\b Remarks}\par\li180
The {\uldb LoadSelectionTables}{\v MsiSelectionManager_LoadSelectionTables} method must be executed prior
 to executing InitializeComponents.  In addition, after executing InitializeComponents, the
 {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method should be called - this will update
 the 'Action' state of each component, based upon the state of the feature(s) in the 
 {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} table that are linked to a particular component.
\page

#{\footnote MsiSelectionManager_SetInstallLevel}
${\footnote MsiSelectionManager.SetInstallLevel}
+{\footnote MsiSelectionManager:SetInstallLevel}
K{\footnote SetInstallLevel}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetInstallLevel Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method sets the Install Level for the current installation to a specified value, and recalculates
 the 'Select' and 'Installed' states for all features in the Feature table, and sets the 'Action' state
 of each component in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table, based on the new level.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetInstallLevel({\i installLevel})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i installLevel}\line
Required. The requested new install level.
\par\fi0\li0{\b Remarks}\par\li180
The {\uldb InitializeComponents}{\v MsiSelectionManager_InitializeComponents} method must be executed prior
 to executing SetInstallLevel.
\par
If 0 is passed for the installLevel parameter, the current install level will not be changed, but
 all features will still be updated based on the current install level.  This functionality 
 could be used, for example, by the Handler module to reset all selections back to their initial
 default states, at any point in the UI selection process.
\page

#{\footnote MsiSelectionManager_ConfigureFeature}
${\footnote MsiSelectionManager_ConfigureFeature}
+{\footnote MsiSelectionManager:ConfigureFeature}
K{\footnote ConfigureFeature}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ConfigureFeature Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is used to request a change in the 'Select' state of a record in the
 {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} table, and of that feature's child records.
 In turn, the 'Action' state of all the components linked to the changed Feature
 records will also be updated appropriately, based on the new feature 'Select' state.
 ConfigureFeature can also be used to configure all features at once, by specifying the
 keyword 'ALL' instead of a specific feature name.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ConfigureFeature({\i strFeature, iisState})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b strFeature}\line
Required. A string specifying the name of the feature to be configured.  Alternatively, the reserved word "ALL"
 (case insensitive) can be used, indicating that all features should be configured to the state specified by
 iisState parameter.  For example, if 'iisAbsent' is specified in the iisState parameter, and "ALL" is specified in the
 strFeature parameter, the entire product will be removed.
\par{\i\b state}\line
Required. Requested selection state, one of the following values:\line
{\f1 Null (empty)  }:  Requests that no action is to be taken for this item.\line
{\f1 iisAbsent    = 0}:  item is to be removed.\line
{\f1 iisLocal     = 1}:  item is to be installed locally.\line
{\f1 iisSource    = 2}:  item is to be installed from run from the source media.\line
{\f1 iisReinstall = 3}:  if the feature is installed, reinstall in the same state.\line

\par\fi0\li0{\b Remarks}\par\li180
The {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method must be called before
 calling ConfigureFeature.  Also, note that if 'iisReinstall' is specified, the
 {\uldb SetReinstallMode}{\v MsiSelectionManager_SetReinstallMode} method should be called first.
\par
When ConfigureFeature is called, the SelectionManager will attempt to set the 'Action' state of
 each component tied to the specified feature to the specified state, as best as possible.
 However, there are common situations when the request cannot be fully honored.  For example,
 suppose a feature is tied to two components, Component A and Component B (via the 
 {\uldb FeatureComponents}{\v _msi_FeatureComponents_Table@msi.hlp} table, of course).  Also suppose that Component A is
 authored with a 'RunFromSource' option of 'irsLocalOnly', and Component B is 'irsSourceOnly'.  In this case,
 if ConfigureFeature is called with a requested state of either 'iisLocal' or 'iisSource', there is no way that
 the request can be fully honored for both components.  However, both components will be turned 'ON', with
 component A set to iisLocal, and component B set to iisSource.
 \par
If more than one feature is linked to a single component (a common scenario), the final 'Action' state of
 that component will be determined as follows: if at least one feature calls for the component to be installed
 locally, it will be installed 'iisLocal'; else, if at least one feature calls for the component to be run from
 the source media, it will be installed 'iisSource', else, if at least one feature calls for the removal of
 the component, the action state will be 'iisAbsent'.
\page


#{\footnote MsiSelectionManager_SetComponent}
${\footnote MsiSelectionManager.SetComponent}
+{\footnote MsiSelectionManager:SetComponent}
K{\footnote SetComponent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetComponent Method
\line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is used to request a change in the 'Action' state of a record in the
 {\uldb Component}{\v _msi_Component_Table@msi.hlp} table. 
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetComponent({\i component, state})}
\par{\i object}\line
Required. The MsiSelectionManager object.
\par{\i\b component}\line
Required. String name of component item, primary key of Component table.
\par{\i\b state}\line
Required. Requested action state, one of the following values:\line
{\f1 Null (empty)  }:  Requests that no action is to be taken for this item.\line
{\f1 iisAbsent    = 0}:  item is to be removed.\line
{\f1 iisLocal     = 1}:  item is to be installed locally.\line
{\f1 iisSource    = 2}:  item is to be installed from run from the source media.\line
{\f1 iisReinstall = 3}: if installed, the item is to be reinstalled in the same state.\line

\par\fi0\li0{\b Remarks}\par\li180
The {\uldb InitializeComponents}{\v MsiSelectionManager_InitializeComponents} method must be called before
 calling SetComponent.  Also, note that if 'iisReinstall' is specified, the
 {\uldb SetReinstallMode}{\v MsiSelectionManager_SetReinstallMode} method should be called first.
\page

#{\footnote MsiDirectoryManager_Object}
${\footnote MsiDirectoryManager Object}
K{\footnote MsiDirectoryManager}
+{\footnote Class:MsiDirectoryManager}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiDirectoryManager Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiDirectoryManager object, associated with the MsiEngine object,
 manages the in-memory Directory table. It loads the table from the database
 and stores references to MsiPath objects for each entry in temporary
 columns.  The source
 and target path objects may be retrieved from the table and target path
 objects may be reset to different paths.  Changing the value of a target
 path object updates any duplicates or children of that path
 appropriately.
\par\li0{\b Properties}\par\li180
{\uldb DirectoryTable}{\v MsiDirectoryManager_DirectoryTable}\line
\par\li0{\b Methods}\par\li180
{\uldb LoadDirectoryTable}{\v MsiDirectoryManager_LoadDirectoryTable}\line
{\uldb FreeDirectoryTable}{\v MsiDirectoryManager_FreeDirectoryTable}\line
{\uldb CreateTargetPaths}{\v MsiDirectoryManager_CreateTargetPaths}\line
{\uldb CreateSourcePaths}{\v MsiDirectoryManager_CreateSourcePaths}\line
{\uldb GetTargetPath}{\v MsiDirectoryManager_GetTargetPath}\line
{\uldb SetTargetPath}{\v MsiDirectoryManager_SetTargetPath}\line
{\uldb GetSourcePath}{\v MsiDirectoryManager_GetSourcePath}\line
\page

#{\footnote MsiDirectoryManager_DirectoryTable}
${\footnote MsiDirectoryManager.DirectoryTable}
+{\footnote MsiDirectoryManager:DirectoryTable}
K{\footnote DirectoryTable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DirectoryTable Property
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the loaded Directory table as an MsiTable object.
 Returns an object set to Nothing if table is not loaded. Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DirectoryTable}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\page

#{\footnote MsiDirectoryManager_LoadDirectoryTable}
${\footnote MsiDirectoryManager.LoadDirectoryTable}
+{\footnote MsiDirectoryManager:LoadDirectoryTable}
K{\footnote LoadDirectoryTable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
LoadDirectoryTable Method
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Loads the {\uldb Directory table}{\v _msi_Directory_Table@msi.hlp} into memory and adds temporary columns to hold the path objects.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .LoadDirectoryTable()}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiDirectoryManager_FreeDirectoryTable}
${\footnote MsiDirectoryManager.FreeDirectoryTable}
+{\footnote MsiDirectoryManager:FreeDirectoryTable}
K{\footnote FreeDirectoryTable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FreeDirectoryTable Method
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Frees the in-memory directory table along the the temporary columns holding the path objects.
 There is no persistent information to be written to the database.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FreeDirectoryTable({\i name, path})}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\page

#{\footnote MsiDirectoryManager_CreateTargetPaths}
${\footnote MsiDirectoryManager.CreateTargetPaths}
+{\footnote MsiDirectoryManager:CreateTargetPaths}
K{\footnote CreateTargetPaths}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateTargetPaths Method
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates the path objects for each target directory and puts the object
 references in the temporary column added for the target path objects.
 When not in Admin mode, defines properties for each target directory.
 Target paths are resolved for each entry in the table in the
 following way:
\line\line
Admin mode:\par\li500
{\b Roots:} If no property is defined and the entry is a root of the table,
 an error will occur.
\line\line
{\b Non-roots:} If the entry is not a root, the path
 is resolved to be the value of
 DefaultDir appended to the path resolved
 for the Directory_Parent entry.
\par\li180
Non-Admin mode:\par\li500
{\b Properties:} If a property by the name of the Directory value
 is defined, the path is resolved to its value.
\line\line
{\b Roots:} If no property is defined and the entry is a root of the table,
 the path is resolved to the value of the {\uldb ROOTDRIVE}{\v Property_ROOTDRIVE}
 property.
\line\line
{\b Non-roots:} If no property is defined and the entry is not a root, the path
 is resolved to be the value of
 DefaultDir appended to the path resolved
 for the Directory_Parent entry.
\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateTargetPaths()}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\page

#{\footnote MsiDirectoryManager_CreateSourcePaths}
${\footnote MsiDirectoryManager.CreateSourcePaths}
+{\footnote MsiDirectoryManager:CreateSourcePaths}
K{\footnote CreateSourcePaths}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CreateSourcePaths Method
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates the path objects for each source directory and puts the object
 references in the temporary column added for the source path objects.
 The source paths are resolved for each entry in the Directory table
 in the following way:
\line\line
{\b Roots:} The value in the DefaultDir field is
 assumed to be the name of the property defining the full path of the
 directory.  If the property is not defined, the value of the
 {\i defaultPath} argument is used.  If this argument is an empty string,
 an error will occur.
\line\line
{\b Non-roots:} The path of a non-root is resolved to be the value of
 DefaultDir appended to the path resolved
 for the Directory_Parent entry. 
\line
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CreateSourcePaths({\i defaultPath})}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\par{\i defaultPath}\line
Required. The default path used for source roots when the properties
 for those roots are undefined.  If an empty string is passed,
 an error will occur when a source root property is undefined.
\par\fi0\li0{\b Remarks}\par\li180
During a cabinet install, this method only validates the value of the
 {\uldb SOURCEDIR}{\v Property_SOURCEDIR} property.
\page

#{\footnote MsiDirectoryManager_GetTargetPath}
${\footnote MsiDirectoryManager.GetTargetPath}
+{\footnote MsiDirectoryManager:GetTargetPath}
K{\footnote GetTargetPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetTargetPath Method
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the MsiPath object associated with the named target directory.
 If the name does not exist or if the target path objects have not been created, an empty object is returned.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetTargetPath({\i name})}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\par{\i\b name}\line
Required. Unique name associated with directory row, primary key.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiDirectoryManager_SetTargetPath}
${\footnote MsiDirectoryManager.SetTargetPath}
+{\footnote MsiDirectoryManager:SetTargetPath}
K{\footnote SetTargetPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetTargetPath Method
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Changes the path specification for the MsiPath object associated
 with a named target directory in the in-memory Directory table.
 Also, the path specifications of all other path objects in the table
 that are either
 children of or equivalent to the changed path are updated to reflect
 the change.  The properties for each affected path are also updated.
 In addition, {\uldb RecostDirectory}{\v MsiSelectionManager_RecostDirectory}
 is called for each affected path.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetTargetPath({\i name, path})}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\par{\i\b name}\line
Required. Unique name associated with directory row, primary key.
\par{\i\b path}\line
Required. The complete path specification for the directory.
\par\fi0\li0{\b Remarks}\par\li180
If an error occurs in this method, all updated paths and properties are reverted to
 their previous values, and RecostDirectory is called again for each updated path.
 Therefore, it is safe to treat errors returned by this
 method as non-fatal.
\page

#{\footnote MsiDirectoryManager_GetSourcePath}
${\footnote MsiDirectoryManager.GetSourcePath}
+{\footnote MsiDirectoryManager:GetSourcePath}
K{\footnote GetSourcePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetSourcePath Method
\line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
See {\uldb MsiGetSourcePath}{\v _msi_MsiGetSourcePath@msi.hlp}. The 'name' parameter
 in this method is equivalent to the 'szFolder' parameter in MsiGetSourcePath.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetSourcePath({\i name})}
\par{\i object}\line
Required. The MsiDirectoryManager object.
\par{\i\b name}\line
Required. Unique name associated with directory row, primary key.
\par\fi0\li0{\b Remarks}\par\li180
{\uldb LoadDirectoryTable}{\v MsiDirectoryManager_LoadDirectoryTable}
 must be called with {\i addSourcePath} set to true before
 this method is called.
\line\line
During a cabinet install, this method always returns an MsiPath object representing
 the path defined by the {\uldb SOURCEDIR}{\v Property_SOURCEDIR} property.
\page

#{\footnote MsiHandler_Object}
${\footnote MsiHandler Object}
K{\footnote MsiHandler}
+{\footnote Class:MsiHandler}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiHandler Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiHandler is the class handling the messages sent by the engine. The handler has no interface in the
 direction of the dialogs, since a generic dialog has no need of talking to the handler. The handler in
 response to the actions and messages received from the engine starts wizard sequences, puts up individual
 modal or modeless dialogs, posts progress messages, shows error messages and performs custom actions.
\par
After creating the Handler object, it must be initialized before any other method or property is used.
 This initialization happens through the Initialize method of the Engine.
 If any method or property is attempted on an uninitialized Handler object it will assert.
 Before initialization the Handler object has no access to the Engine or Services,
 therefore it can not create or send a reasonable error message.
 At the end of its life a Handler object has to be terminated before it is destroyed.
 This termination is performed through the Terminate method of the Engine.
\par\li0{\b Methods}\par\li180
{\uldb Break}{\v MsiHandler_Break}\line
{\uldb DoAction}{\v MsiHandler_DoAction}\line
{\uldb Message}{\v MsiHandler_Message}\line
\page

#{\footnote MsiDialogHandler_Object}
${\footnote MsiDialogHandler Object}
K{\footnote MsiDialogHandler}
+{\footnote Class:MsiDialogHandler}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiDialogHandler Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiDialogHandler is the interface of the Handler which creates and deletes dialogs. To get this interface, use the {\uldb GetInterface}{\v MsiBase_GetInterface} method on an existing {\uldb MsiHandler}{\v MsiHandler_Object}.
\par
After creating the Handler object, it must be initialized before any other method or property is used.
 This initialization happens through the Initialize method of the Engine.
 If any method or property is attempted on an uninitialized Handler object it will assert.
 Before initialization the Handler object has no access to the Engine or Services,
 therefore it can not create or send a reasonable error message.
 At the end of its life a Handler object has to be terminated before it is destroyed.
 This termination is performed through the Terminate method of the Engine.
\par\li0{\b Properties}\par\li180
{\uldb Dialog}{\v MsiDialogHandler_Dialog}\line
{\uldb DialogFromWindow}{\v MsiDialogHandler_DialogFromWindow}\line
\par\li0{\b Methods}\par\li180
{\uldb AddDialog}{\v MsiDialogHandler_AddDialog}\line
{\uldb DialogCreate}{\v MsiDialogHandler_DialogCreate}\line
{\uldb RemoveDialog}{\v MsiDialogHandler_RemoveDialog}\line
\page

#{\footnote MsiHandler_Message}
${\footnote MsiHandler.Message}
+{\footnote MsiHandler:Message}
K{\footnote Message}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Message Method
\line\tx360\tab\fs18\b0{\uldb MsiHandler Object}{\v MsiHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Processes various type of messages and notifications.
 See {uldb MsiMessage.Message}{\v MsiMessage_Message}
 for message types and return codes.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Message({\i kind, record})}
\par{\i object}\line
Required. The MsiHandler object.
\par{\i\b kind}\line
Required. The message type, one of imtEnum, as described below:
\par{\i\b record}\line
Required. An MsiRecord object containing message-specific data fields.
\page

#{\footnote MsiHandler_DoAction}
${\footnote MsiHandler.DoAction}
+{\footnote MsiHandler:DoAction}
K{\footnote DoAction}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DoAction Method
\line\tx360\tab\fs18\b0{\uldb MsiHandler Object}{\v MsiHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Request to perform a named action. Normally this is the name of a dialog, 
which is then constructed from information queried from the UI database 
tables. However, actions may be implemented as functions. When the {\b DoAction} 
method is called on the {\b MsiEngine} object and the requested action is not 
found, the call is delegated to its {\b MsiHandler} object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DoAction({\i action})}
\par{\i object}\line
Required. The MsiHandler object.
\par{\i\b action}\line
Required. Name of the action.
\page

#{\footnote MsiHandler_Break}
${\footnote MsiHandler.Break}
+{\footnote MsiHandler:Break}
K{\footnote Break}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Break Method
\line\tx360\tab\fs18\b0{\uldb MsiHandler Object}{\v MsiHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Asynchronous call to terminate execution of a {\b DoAction} or {\b Message} 
method. If a UI window is waiting in a message loop, this call should 
indicate that the loop should terminate and return the status: iesUserExit.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Break}
\par{\i object}\line
Required. The MsiHandler object.
\page

#{\footnote MsiDialogHandler_DialogCreate}
${\footnote MsiDialogHandler.DialogCreate}
+{\footnote MsiDialogHandler:DialogCreate}
K{\footnote DialogCreate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DialogCreate Method
\line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates a blank {\b MsiDialog} object. All internal variables are uninitialized, the dialog object is not ready for any other call 
except {\b WindowCreate}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DialogCreate({\i type})}
\par{\i object}\line
Required. The MsiDialogHandler object.
\par{\i\b type}\line
Required. The {\uldb type}{\v Dialog_Overview} of the desired dialog.
\page

#{\footnote MsiDialogHandler_Dialog}
${\footnote MsiDialogHandler.Dialog}
+{\footnote MsiDialogHandler:Dialog}
K{\footnote Dialog}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Dialog Property
\line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiDialog} object corresponding to the name.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Dialog({\i name})}
\par{\i object}\line
Required. The MsiDialogHandler object.
\par{\i\b name}\line
Required. The string representing the dialog.
\page

#{\footnote MsiDialogHandler_DialogFromWindow}
${\footnote MsiDialogHandler.DialogFromWindow}
+{\footnote MsiDialogHandler:DialogFromWindow}
K{\footnote DialogFromWindow}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DialogFromWindow Property
\line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiDialog} object corresponding to the passed window reference.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DialogFromWindow({\i window})}
\par{\i object}\line
Required. The MsiDialogHandler object.
\par{\i\b window}\line
Required. WIN: The HWND of the window associated with the dialog. MAC: The WindowPtr of the window associated with the dialog.
\page

#{\footnote MsiDialogHandler_AddDialog}
${\footnote MsiDialogHandler.AddDialog}
+{\footnote MsiDialogHandler:AddDialog}
K{\footnote AddDialog}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
AddDialog Method
\line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Adds a dialog to the handler internal tables. It also initializes the dialog with the data 
provided in the record and in the pointers.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .AddDialog({\i dialog, parent, record, controleventtable, controlconditiontable, eventmappingtable})}
\par{\i object}\line
Required. The MsiDialogHandler object.
\par{\i\b dialog}\line
Required. Pointer to the previously created blank dialog.
\par{\i\b parent}\line
Pointer to the parent dialog. Can be null.
\par{\i\b record}\line
Record of data used to initialize the dialog. Required.
The fields of the record correspond to the columns of the {\uldb Dialog Table}{\v _msi_Dialog_Table@msi.hlp} in the same order.\line
\par{\i\b controleventtable}\line
Pointer to the {\uldb ControlEvent table}{\v _msi_ControlEvent_Table@msi.hlp}. Can be null.
\par{\i\b controlconditiontabel}\line
Pointer to the {\uldb ControlCondition table}{\v _msi_ControlCondition_Table@msi.hlp}. Can be null.
\par{\i\b eventmappingtable}\line
Pointer to the {\uldb EventMapping table}{\v _msi_EventMapping_Table@msi.hlp}. Can be null.
\page

#{\footnote MsiDialogHandler_RemoveDialog}
${\footnote MsiDialogHandler.RemoveDialog}
+{\footnote MsiDialogHandler:RemoveDialog}
K{\footnote RemoveDialog}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveDialog Method
\line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Removes a dialog from the handler internal tables. It also destroys the window and the object corresponding to the dialog.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveDialog({\i dialog})}
\par{\i object}\line
Required. The MsiDialogHandler object.
\par{\i\b dialog}\line
Required. Pointer to the dialog to be removed.
\page

#{\footnote MsiDialog_Object}
${\footnote MsiDialog Object}
K{\footnote MsiDialog}
+{\footnote Class:MsiDialog}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiDialog Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiDialog is the interface of the dialog object visible to the handler. 
\par\li0{\b Properties}\par\li180
{\uldb Control}{\v MsiDialog_Control}\line
{\uldb Handler}{\v MsiEvent_Handler}\line
{\uldb IntegerValue}{\v MsiDialog_IntegerValue}\line
{\uldb StringValue}{\v MsiDialog_StringValue}\line
\par\li0{\b Methods}\par\li180
{\uldb AddControl}{\v MsiDialog_AddControl}\line
{\uldb Attribute}{\v MsiDialog_Attribute}\line
{\uldb ControlCreate}{\v MsiDialog_ControlCreate}\line
{\uldb EventAction}{\v MsiDialog_EventAction}\line
{\uldb Execute}{\v MsiDialog_Execute}\line
{\uldb FinishCreate}{\v MsiDialog_FinishCreate}\line
{\uldb HandleEvent}{\v MsiDialog_HandleEvent}\line
{\uldb PropertyChanged}{\v MsiDialog_PropertyChanged}\line
{\uldb RemoveControl}{\v MsiDialog_RemoveControl}\line
{\uldb Reset}{\v MsiDialog_Reset}\line
{\uldb Visible}{\v MsiDialog_Visible}\line
\page

#{\footnote MsiDialog_Control}
${\footnote MsiDialog.Control}
+{\footnote MsiDialog:Control}
K{\footnote Control}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiControl} object corresponding to the name.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Control({\i name})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b name}\line
Required. The string representing the control.
\page

#{\footnote MsiDialog_StringValue}
${\footnote MsiDialog.StringValue}
+{\footnote MsiDialog:StringValue}
K{\footnote StringValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The string value of the dialog.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .StringValue}
\par{\i object}\line
Required. The MsiDialog object.
\page

#{\footnote MsiDialog_IntegerValue}
${\footnote MsiDialog.IntegerValue}
+{\footnote MsiDialog:IntegerValue}
K{\footnote IntegerValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The integer value of the dialog.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IntegerValue}
\par{\i object}\line
Required. The MsiDialog object.
\page



#{\footnote MsiDialog_Visible}
${\footnote MsiDialog.Visible}
+{\footnote MsiDialog:Visible}
K{\footnote Visible}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Visible Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Depending on the argument, shows or hides the dialog.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Visible = {\i show}}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b show}\line
Required. A Boolean value showing whether to show or hide the dialog. True means show, False means hide.
\page

#{\footnote MsiDialog_ControlCreate}
${\footnote MsiDialog.ControlCreate}
+{\footnote MsiDialog:ControlCreate}
K{\footnote ControlCreate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ControlCreate Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates a blank, uninitialized control of the named type.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ControlCreate({\i type})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b type}\line
Required. The name of the {\uldb control type}{\v Control_Overview}. 
The author can specify a type that does not appear in the above list if there is code for such a custom control.
\page

#{\footnote MsiDialog_Attribute}
${\footnote MsiDialog.Attribute}
+{\footnote MsiDialog:Attribute}
K{\footnote Attribute}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Attribute Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A general method allowing to get or set the value of some attributes of the dialog.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Attribute({\i set, attributename, record})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b set}\line
Required. A Boolean value showing whether to set or get the value of the named attribute. True means set, False means get.
\par{\i\b attributename}\line
The name of the {\uldb attribute}{\v Dialog_Overview} to be set or get. 
\par{\i\b record}\line
Required. The record to be filled in in case of get, or the record of the values to be set. The record contains one field, except in the cases noted in the above table.
\page

#{\footnote MsiDialog_AddControl}
${\footnote MsiDialog.AddControl}
+{\footnote MsiDialog:AddControl}
K{\footnote AddControl}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
AddControl Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Adds a control to the dialog internal tables. It also initializes the control with the data 
provided in the record. For compatibility with older scripts, if the control is NULL, it is equivalent to calling the {\uldb FinishCreate}{\v MsiDialog_FinishCreate} method. 
At least one non-null control has to be added to the dialog, before FinishCreate is called. 
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .AddControl({\i control, record})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b control}\line
Required. The pointer to the previously created blank control, or NULL.
\par{\i\b record}\line
Required. The data used at the initialization of the control. The fields are as follows:\line
Name of the control\line
Type\line
X coordinate\line
Y coordinate\line
Widht\line
Height\line
Attributes\line
Property associated with the control\line
Text\line
Next control in the tab order\line
Help string\line
These fields correspond to those of the {\uldb Control Table}{\v _msi_Control_Table@msi.hlp}.\line
\page

#{\footnote MsiDialog_FinishCreate}
${\footnote MsiDialog.FinishCreate}
+{\footnote MsiDialog:FinishCreate}
K{\footnote FinishCreate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FinishCreate Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Signals to the dialog that we are done adding controls, it 
can resolve the next pointers. At least one non-null control has to be added to the dialog, before this method is called. 
This method has to be called before any other method can be used on the dialog. 
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FinishCreate}
\par{\i object}\line
Required. The MsiDialog object.
\page


#{\footnote MsiDialog_RemoveControl}
${\footnote MsiDialog.RemoveControl}
+{\footnote MsiDialog:RemoveControl}
K{\footnote RemoveControl}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveControl Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Removes a control from the dialog internal tables. It does not change the permanent tables! 
If some change is needed in those, than you have to do it yourself! 
Also it does not check if the removed control was the default button.  
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveControl({\i control})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b control}\line
Required. The pointer to the previously created control.
\page

#{\footnote MsiDialog_Execute}
${\footnote MsiDialog.Execute}
+{\footnote MsiDialog:Execute}
K{\footnote Execute}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Execute Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Runs a modal dialog. It makes the dialog visible, then waits in the message loop to perform the user's commands. 
Returns a record showing the exit status of the dialog.	This method should not be called on a modeless dialog.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Execute}
\par{\i object}\line
Required. The MsiDialog object.
\page

#{\footnote MsiDialog_Reset}
${\footnote MsiDialog.Reset}
+{\footnote MsiDialog:Reset}
K{\footnote Reset}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Reset Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Resets the dialog. It instructs all the controls to restore the original value of the properties they have changed.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Reset}
\par{\i object}\line
Required. The MsiDialog object.
\page

#{\footnote MsiDialog_Handler}
${\footnote MsiDialog.Handler}
+{\footnote MsiDialog:Handler}
K{\footnote HANDLER}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiHandler} object used by the dialog.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Handler}
\par{\i object}\line
Required. The MsiDialog object.
\page

#{\footnote MsiDialog_EventAction}
${\footnote MsiDialog.EventAction}
+{\footnote MsiDialog:EventAction}
K{\footnote EventAction}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
EventAction Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
It finds all the subscribers of the named event and performs the given action on them.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .EventAction({\i eventname, action})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b eventname}\line
Required. The name of the event whose subscribers have to be found.
\par{\i\b action}\line
Required. The action to be performed on the subscribers of the event.
\page

#{\footnote MsiDialog_HandleEvent}
${\footnote MsiDialog.HandleEvent}
+{\footnote MsiDialog:HandleEvent}
K{\footnote HandleEvent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
HandleEvent Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method triggers a control event. For example when a button is pushed that has to start an event, it uses this method to notify the publisher of the event.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .HandleEvent({\i eventname, argument})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b eventname}\line
Required. The name of the event.
\par{\i\b argument}\line
Required. The argument of the event.
\page


#{\footnote MsiDialog_PropertyChanged}
${\footnote MsiDialog.PropertyChanged}
+{\footnote MsiDialog:PropertyChanged}
K{\footnote PropertyChanged}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
PropertyChanged Method
\line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is called when a control changes a property value. The method scans the ControlCondition table to see if some action must be taken in response to this change.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .PropertyChanged({\i property, control})}
\par{\i object}\line
Required. The MsiDialog object.
\par{\i\b property}\line
The name of the property whose value has changed. Can be null.
\par{\i\b control}\line
The name of the control that reports the change. Can be null. This is used to avoid a control being called in response to its own change.
\page


#{\footnote MsiEvent_Object}
${\footnote MsiEvent Object}
K{\footnote MsiEvent}
+{\footnote Class:MsiEvent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiEvent Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiEvent is the interface of the dialog object visible to the controls. 
\par\li0{\b Properties}\par\li180
{\uldb Control}{\v MsiEvent_Control}\line
{\uldb Engine}{\v MsiEvent_Engine}\line
{\uldb Handler}{\v MsiEvent_Handler}\line
{\uldb IntegerValue}{\v MsiEvent_IntegerValue}\line
{\uldb StringValue}{\v MsiEvent_StringValue}\line
\par\li0{\b Methods}\par\li180
{\uldb Attribute}{\v MsiEvent_Attribute}\line
{\uldb ControlActivated}{\v MsiEvent_ControlActivated}\line
{\uldb EventAction}{\v MsiEvent_EventAction}\line
{\uldb HandleEvent}{\v MsiEvent_HandleEvent}\line
{\uldb PropertyChanged}{\v MsiEvent_PropertyChanged}\line
{\uldb PublishEvent}{\v MsiEvent_PublishEvent}\line
{\uldb ReadyToChangeFocus}{\v MsiEvent_ReadyToChangeFocus}\line
{\uldb RegisterControlEvent}{\v MsiEvent_RegisterControlEvent}\line
{\uldb SetFocus}{\v MsiEvent_SetFocus}\line
\page

#{\footnote MsiEvent_Control}
${\footnote MsiEvent.Control}
+{\footnote MsiEvent:Control}
K{\footnote Control}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiControl} object corresponding to the name.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Control({\i name})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b name}\line
Required. The string representing the control.
\page

#{\footnote MsiEvent_Engine}
${\footnote MsiEvent.Engine}
+{\footnote MsiEvent:Engine}
K{\footnote ENGINE}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Engine Property
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiEngine} object used by the event. 
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Engine}
\par{\i object}\line
Required. The MsiEvent object.
\page


#{\footnote MsiEvent_StringValue}
${\footnote MsiEvent.StringValue}
+{\footnote MsiEvent:StringValue}
K{\footnote StringValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The string value of the event.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .StringValue}
\par{\i object}\line
Required. The MsiEvent object.
\page

#{\footnote MsiEvent_IntegerValue}
${\footnote MsiEvent.IntegerValue}
+{\footnote MsiEvent:IntegerValue}
K{\footnote IntegerValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The integer value of the event.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IntegerValue}
\par{\i object}\line
Required. The MsiEvent object.
\page


#{\footnote MsiEvent_Handler}
${\footnote MsiEvent.Handler}
+{\footnote MsiEvent:Handler}
K{\footnote HANDLER}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiHandler} object used by the dialog.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Handler}
\par{\i object}\line
Required. The MsiEvent object.
\page


#{\footnote MsiEvent_PropertyChanged}
${\footnote MsiEvent.PropertyChanged}
+{\footnote MsiEvent:PropertyChanged}
K{\footnote PropertyChanged}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
PropertyChanged Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is called when a control changes a property value. The method scans the ControlCondition table to see if some action must be taken in response to this change.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .PropertyChanged({\i property, control})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b property}\line
The name of the property whose value has changed. Can be null.
\par{\i\b control}\line
The name of the control that reports the change. Can be null. This is used to avoid a control being called in response to its own change.
\page

#{\footnote MsiEvent_ControlActivated}
${\footnote MsiEvent.ControlActivated}
+{\footnote MsiEvent:ControlActivated}
K{\footnote ControlActivated}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ControlActivated Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is called when a control is activated (e.g. a button is pushed). The method scans the ControlEvent table to see if some event is triggered by this control. If an event is found, the argument is formatted using {\uldb FormatText}{\v MsiEngine_FormatText}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ControlActivated({\i control})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b control}\line
The name of the control that was actived.
\page

#{\footnote MsiEvent_RegisterControlEvent}
${\footnote MsiEvent.RegisterControlEvent}
+{\footnote MsiEvent:RegisterControlEvent}
K{\footnote RegisterControlEvent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RegisterControlEvent Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is called by a control to register/unregister as a publisher of some event.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RegisterControlEvent({\i control, toregister, event})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b control}\line
The name of the control registering/unregistering.
\par{\i\b toregister}\line
A Boolean value showing whether the control is registering or unregistering.
\par{\i\b event}\line
The name of the event.
\page

#{\footnote MsiEvent_HandleEvent}
${\footnote MsiEvent.HandleEvent}
+{\footnote MsiEvent:HandleEvent}
K{\footnote HandleEvent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
HandleEvent Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method triggers a control event. For example when a button is pushed that has to start an event, it uses this method to notify the publisher of the event.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .HandleEvent({\i eventname, argument})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b eventname}\line
Required. The name of the event.
\par{\i\b argument}\line
Required. The argument of the event.
\page

#{\footnote MsiEvent_Escape}
${\footnote MsiEvent.Escape}
+{\footnote MsiEvent:Escape}
K{\footnote Escape}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Escape Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is called when the Escape key or the close button is hit on a dialog. The method pushes the designated default button. (see {\uldb Dialog Table}{\v _msi_Dialog_Table@msi.hlp})
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Escape}
\par{\i object}\line
Required. The MsiEvent object.
\page



#{\footnote MsiEvent_PublishEvent}
${\footnote MsiEvent.PublishEvent}
+{\footnote MsiEvent:PublishEvent}
K{\footnote PublishEvent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
PublishEvent Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Finds all the subscribers of an event and notifies them that the event was published.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .PublishEvent({\i eventname, argument})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b eventname}\line
Required. The name of the event whose subscribers have to be found.
\par{\i\b argument}\line
Required. A record representing the argument of the event.
\page

#{\footnote MsiEvent_Attribute}
${\footnote MsiEvent.Attribute}
+{\footnote MsiEvent:Attribute}
K{\footnote Attribute}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Attribute Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A general method allowing to get or set the value of some attributes of the dialog.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Attribute({\i set, attributename, record})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b set}\line
Required. A Boolean value showing whether to set or get the value of the named attribute. True means set, False means get.
\par{\i\b attributename}\line
The name of the {\uldb attribute}{\v Dialog_Overview} to be set or get. 
\par{\i\b record}\line
Required. The record to be filled in in case of get, or the record of the values to be set. The record contains one field, except in the cases noted in the above table.
\page

#{\footnote MsiEvent_EventAction}
${\footnote MsiEvent.EventAction}
+{\footnote MsiEvent:EventAction}
K{\footnote EventAction}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
EventAction Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
It finds all the subscribers of the named event and performs the given action on them.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .EventAction({\i eventname, action})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b eventname}\line
Required. The name of the {\uldb event}{\v ControlEvent_Overview} whose subscribers have to be found.
\par{\i\b action}\line
Required. The action to be performed on the subscribers of the event.
\page

#{\footnote MsiEvent_SetFocus}
${\footnote MsiEvent.SetFocus}
+{\footnote MsiEvent:SetFocus}
K{\footnote SetFocus}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetFocus Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Sets the focus to the named control.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetFocus({\i control})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b control}\line
Required. The name of the control receiving focus.
\page

#{\footnote MsiEvent_ReadyToChangeFocus}
${\footnote MsiEvent.ReadyToChangeFocus}
+{\footnote MsiEvent:ReadyToChangeFocus}
K{\footnote ReadyToChangeFocus}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ReadyToChangeFocus Method
\line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a boolean indicating if the control presently having focus is willing to give it up.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ReadyToChangeFocus}
\par{\i object}\line
Required. The MsiEvent object.
\page



#{\footnote MsiControl_Object}
${\footnote MsiControl Object}
K{\footnote MsiControl}
+{\footnote Class:MsiControl}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiControl Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
MsiControl is the general interface of the control objects. 
\par\li0{\b Properties}\par\li180
{\uldb CanTakeFocus}{\v MsiControl_CanTakeFocus}\line
{\uldb Dialog}{\v MsiControl_Dialog}\line
{\uldb IntegerValue}{\v MsiControl_IntegerValue}\line
{\uldb StringValue}{\v MsiControl_StringValue}\line
\par\li0{\b Methods}\par\li180
{\uldb Attribute}{\v MsiControl_Attribute}\line
{\uldb GetIndirectPropertyFromDatabase}{\v MsiControl_GetIndirectPropertyFromDatabase}\line
{\uldb GetPropertyFromDatabase}{\v MsiControl_GetPropertyFromDatabase}\line
{\uldb HandleEvent}{\v MsiControl_HandleEvent}\line
{\uldb ReadyToLooseFocus}{\v MsiControl_ReadyToLoseFocus}\line
{\uldb SetFocus}{\v MsiControl_SetFocus}\line
{\uldb SetPropertyInDatabase}{\v MsiControl_SetPropertyInDatabase}\line
{\uldb Undo}{\v MsiControl_Undo}\line
{\uldb WindowMessage}{\v MsiControl_WindowMessage}\line
\page

#{\footnote MsiControl_Dialog}
${\footnote MsiControl.Dialog}
+{\footnote MsiControl:Dialog}
K{\footnote Dialog}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Dialog Property
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The {\b MsiEvent} interface of the dialog used by the control.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Dialog}
\par{\i object}\line
Required. The MsiControl object.
\page

#{\footnote MsiControl_StringValue}
${\footnote MsiControl.StringValue}
+{\footnote MsiControl:StringValue}
K{\footnote StringValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The string value of the control.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .StringValue}
\par{\i object}\line
Required. The MsiControl object.
\page

#{\footnote MsiControl_IntegerValue}
${\footnote MsiControl.IntegerValue}
+{\footnote MsiControl:IntegerValue}
K{\footnote IntegerValue}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Database Property
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The integer value of the control.
 Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .IntegerValue}
\par{\i object}\line
Required. The MsiControl object.
\page


#{\footnote MsiControl_CanTakeFocus}
${\footnote MsiControl.CanTakeFocus}
+{\footnote MsiControl:CanTakeFocus}
K{\footnote CanTakeFocus}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CanTakeFocus Property
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A Boolean value showing whether the control can take focus. This value is platform dependent! It can return different values depending on the operating system. Read only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CanTakeFocus}
\par{\i object}\line
Required. The MsiControl object.
\page

#{\footnote MsiControl_Attribute}
${\footnote MsiControl.Attribute}
+{\footnote MsiControl:Attribute}
K{\footnote Attribute}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Attribute Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A general method allowing to get or set the value of some attributes of the control.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Attribute({\i set, attributename, record})}
\par{\i object}\line
Required. The MsiEvent object.
\par{\i\b set}\line
Required. A Boolean value showing whether to set or get the value of the named attribute. True means set, False means get.
\par{\i\b attributename}\line
The name of the {\uldb attribute}{\v Control_Overview} to be set or get. 
\par{\i\b record}\line
Required. The record to be filled in in case of get, or the record of the values to be set. The record contains one field, except in the cases noted in the above table.
\page

#{\footnote MsiControl_HandleEvent}
${\footnote MsiControl.HandleEvent}
+{\footnote MsiControl:HandleEvent}
K{\footnote HandleEvent}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
HandleEvent Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Notifies the publisher of an event that the event has taken place.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .HandleEvent({\i eventname, argument})}
\par{\i object}\line
Required. The MsiControl object.
\par{\i\b eventname}\line
Required. The name of the {\uldb event}{\v ControlEvent_Overview}.
\par{\i\b argument}\line
The argument of the event.
\page

#{\footnote MsiControl_Undo}
${\footnote MsiControl.Undo}
+{\footnote MsiControl:Undo}
K{\footnote Undo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Undo Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is called when the dialog is reset. It resets the property associated with the control to its original value.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Undo}
\par{\i object}\line
Required. The MsiControl object.
\page

#{\footnote MsiControl_SetPropertyInDatabase}
${\footnote MsiControl.SetPropertyInDatabase}
+{\footnote MsiControl:SetPropertyInDatabase}
K{\footnote SetPropertyInDatabase}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetPropertyInDatabase Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Sets the value of the associated property in the database.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetPropertyInDatabase}
\par{\i object}\line
Required. The MsiControl object.
\page

#{\footnote MsiControl_GetPropertyFromDatabase}
${\footnote MsiControl.GetPropertyFromDatabase}
+{\footnote MsiControl:GetPropertyFromDatabase}
K{\footnote GetPropertyFromDatabase}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetPropertyFromDatabase Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Gets the value of the associated property from the database. If the control is not an active control, this method does nothing.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetPropertyFromDatabase}
\par{\i object}\line
Required. The MsiControl object.
\page

#{\footnote MsiControl_GetIndirectPropertyFromDatabase}
${\footnote MsiControl.GetIndirectPropertyFromDatabase}
+{\footnote MsiControl:GetIndirectPropertyFromDatabase}
K{\footnote GetIndirectPropertyFromDatabase}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetIndirectPropertyFromDatabase Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Gets the value of the associated indirect property from the database. If the control is not an active control or of it is not tied to an indirect property, this method does nothing. \line
An indirect property means that the name given points to the name of an other property and the value of this second property is displayed/changed by the control.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetIndirectPropertyFromDatabase}
\par{\i object}\line
Required. The MsiControl object.
\page


#{\footnote MsiControl_SetFocus}
${\footnote MsiControl.SetFocus}
+{\footnote MsiControl:SetFocus}
K{\footnote SetFocus}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetFocus Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Sets the focus to this control.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetFocus}
\par{\i object}\line
Required. The MsiControl object.
\page

#{\footnote MsiControl_WindowMessage}
${\footnote MsiControl.WindowMessage}
+{\footnote MsiControl:WindowMessage}
K{\footnote WindowMessage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
WindowMessage Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A general method notifying the object that the corresponding window received a message. The object can decide to perform some activity instead of the system or in addition to the system, or ignore the message.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .WindowMessage({\i message, wParam, lParam})}
\par{\i object}\line
Required. The MsiControl object.
\par{\i message}\line
Required. An integer identifying the message type.
\par{\i wParam}\line
Required. An integer representing the first argument of the message. Can be null, depending on the type of message.
\par{\i lParam}\line
Required. An integer representing the second argument of the message. Can be null, depending on the type of message.
\page

#{\footnote MsiControl_ReadyToLoseFocus}
${\footnote MsiControl.ReadyToLoseFocus}
+{\footnote MsiControl:ReadyToLoseFocus}
K{\footnote ReadyToLoseFocus}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ReadyToLoseFocus Method
\line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a boolean indicating if the control is willing to give up focus.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ReadyToLoseFocus}
\par{\i object}\line
Required. The MsiControl object.
\page



#{\footnote MsiFoo_Object}
${\footnote MsiFoo Object}
K{\footnote MsiFoo}
+{\footnote Class:MsiFoo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiFoo Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
!!Desciptive text here!!
\par
!!Next paragraph desciptive text here!!
\par\li0{\b Properties}\par\li180
{\uldb SomeProperty}{\v MsiFoo_SomeProperty}\line
\par\li0{\b Methods}\par\li180
{\uldb SomeMethod}{\v MsiFoo_SomeMethod}\line
\page

#{\footnote MsiFoo_SomeMethod}
${\footnote MsiFoo.SomeMethod}
+{\footnote MsiFoo:SomeMethod}
K{\footnote SomeMethod}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SomeMethod Method
\line\tx360\tab\fs18\b0{\uldb MsiFoo Object}{\v MsiFoo_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
!!Desciption here.!!
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SomeMethod({\i arg1, arg2})}
\par{\i object}\line
Required. The MsiFoo object.
\par{\i\b arg1}\line
Required. !!Description of a required argument.!!
\par{\i\b arg2}\line
Optional. !!Description of an optional argument.!!
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiFoo_SomeProperty}
${\footnote MsiFoo.SomeProperty}
+{\footnote MsiFoo:SomeProperty}
K{\footnote SomeProperty}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SomeProperty Property
\line\tx360\tab\fs18\b0{\uldb MsiFoo Object}{\v MsiFoo_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
!!Desciption here.!!
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SomeProperty}
\par{\i object}\line
Required. The MsiFoo object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

}
