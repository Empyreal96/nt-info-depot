{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20

#{\footnote MsiVolume_Object}
${\footnote MsiVolume Object}
K{\footnote MsiVolume}
+{\footnote Class:MsiVolume}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiVolume Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiVolume object represents a disk drive or server share.
 It is not normally created independently by the installer, but as
 needed by the MsiPath objects during resolution of the volume information
 from the remainder of their path. To avoid duplication, a pool of Msi volume
 objects is maintained by the services object, such that the
 {\uldb CreateVolume}{\v MsiServices_CreateVolume} function will return the
 existing MsiVolume object if present.
\par\li0{\b Properties}\par\li180
{\uldb ClusterSize}{\v MsiVolume_ClusterSize}\line
{\uldb DiskNotInDrive}{\v MsiVolume_DiskNotInDrive}\line
{\uldb DriveType}{\v MsiVolume_DriveType}\line
{\uldb FileSystem}{\v MsiVolume_FileSystem}\line
{\uldb FileSystemFlags}{\v MsiVolume_FileSystemFlags}\line
{\uldb FreeSpace}{\v MsiVolume_FreeSpace}\line
{\uldb Path}{\v MsiVolume_Path}\line
{\uldb SerialNum}{\v MsiVolume_SerialNum}\line
{\uldb SupportsLFN}{\v MsiVolume_SupportsLFN}\line
{\uldb TotalSpace}{\v MsiVolume_TotalSpace}\line
{\uldb UNCServer}{\v MsiVolume_UNCServer}\line
{\uldb VolumeID}{\v MsiVolume_VolumeID}\line
{\uldb VolumeLabel}{\v MsiVolume_VolumeLabel}\line
\page

#{\footnote MsiVolume_Path}
${\footnote MsiVolume.Path}
+{\footnote MsiVolume:Path}
K{\footnote Path}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Path Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
String representing the path to the volume. In cases where both a drive letter
 and an UNC path are obtainable, the form preferred by the network type is used
 (currently only Novell NetWare servers prefer drive letter mapping).
 Default property, read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Path}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_VolumeID}
${\footnote MsiVolume.VolumeID}
+{\footnote MsiVolume:VolumeID}
K{\footnote VolumeID}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
VolumeID Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Integer representing the volume. For Windows this maps to the driver letter,
 from A=1 to Z=26, with 0 used to indicate that the volume is not mapped to
 a drive letter. For Mac, this ID is the volume reference number (vRefNum)
 of the mounted volume. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .VolumeID}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_DriveType}
${\footnote MsiVolume.DriveType}
+{\footnote MsiVolume:DriveType}
K{\footnote DriveType}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DriveType Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Integer enumeration describing the physical type of the volume. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DriveType}
\par{\i object}\line
Required. The MsiVolume object.
\par\fi0\li0{\b Drive Type Enumeration}\par\li180
{\f1 idtUnknown   = 0   } Drive type cannot be determined\line
{\f1 idtAllDrives = 1   } Never returned, used for enumerating drives\line
{\f1 idtRemovable = 2   } Drive contains removable media\line
{\f1 idtFixed     = 3   } Hard disk drive\line
{\f1 idtRemote    = 4   } Network server share\line
{\f1 idtCDROM     = 5   } CD_ROM drive\line
{\f1 idtRAMDisk   = 6   } RAM disk\line
{\f1 idtFloppy    = 2   } Eventually, floppies should be distinguished from other removables
\page

#{\footnote MsiVolume_SupportsLFN}
${\footnote MsiVolume.SupportsLFN}
+{\footnote MsiVolume:SupportsLFN}
K{\footnote SupportsLFN}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SupportsLFN Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Boolean indicating whether the volume supports long file names.
 If False is returned, only 8.3 file names may be used. The value
 is always False for the Mac. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SupportsLFN}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_FreeSpace}
${\footnote MsiVolume.FreeSpace}
+{\footnote MsiVolume:FreeSpace}
K{\footnote FreeSpace}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FreeSpace Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The amount of free space on the volume in units of 512 bytes.
 For a compressed drive, this is the expected uncompressed size. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FreeSpace}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_TotalSpace}
${\footnote MsiVolume.TotalSpace}
+{\footnote MsiVolume:TotalSpace}
K{\footnote TotalSpace}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
TotalSpace Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The total capacity of the volume, in units of 512 bytes. For a compressed
 drive, this is the expected uncompressed size. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .TotalSpace}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_ClusterSize}
${\footnote MsiVolume.ClusterSize}
+{\footnote MsiVolume:ClusterSize}
K{\footnote ClusterSize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ClusterSize Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The number of bytes in a cluster, the basic unit of allocation for the volume.
 This is a physical parameter and may not be appropriate to use for compressed
 volumes or directories. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ClusterSize}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_FileSystem}
${\footnote MsiVolume.FileSystem}
+{\footnote MsiVolume:FileSystem}
K{\footnote FileSystem}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FileSystem Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a string designating the type of file system used on the volume. On the
 Mac, an empty string is always returned. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FileSystem}
\par{\i object}\line
Required. The MsiVolume object.
\par\fi0\li0{\b Returned File System Types}\par\li180
{\f1 FAT}\line
{\f1 NTFS}\line
{\f1 HPFS}\line
\page

#{\footnote MsiVolume_FileSystemFlags}
${\footnote MsiVolume.FileSystemFlags}
+{\footnote MsiVolume:FileSystemFlags}
K{\footnote FileSystemFlags}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FileSystemFlags Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns an bitfield integer value with various flags about the filesystem.  
 Read Only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FileSystemFlags}
\par{\i object}\line
Required. The MsiVolume object.
\par\fi0\li0{\b Returned File System Flags}\par\li180

{\f1 0x00000001: Volume uses case sensitive filenames}\line
{\f1 0x00000002: Volume preserves case on filenames}\line
{\f1 0x00000004: Volume stores data as UNICODE}\line
{\f1 0x00000008: Volume supports security}\line
{\f1 0x00000010: Volume supports compression}\line
{\f1 0x00008000: Volume is compressed}\line
\page

#{\footnote MsiVolume_VolumeLabel}
${\footnote MsiVolume.VolumeLabel}
+{\footnote MsiVolume:VolumeLabel}
K{\footnote VolumeLabel}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
VolumeLabel Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a string representing the disk label associated with the volume. On the
 Mac, the volume name is always returned. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .VolumeLabel}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_UNCServer}
${\footnote MsiVolume.UNCServer}
+{\footnote MsiVolume:UNCServer}
K{\footnote UNCServer}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
UNCServer Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
String representing the UNC path for the volume. For local drives and
 networks that do not support UNC, an empty string will be returned. For
 the Mac, an empty string is always returned. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .UNCServer}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_SerialNum}
${\footnote MsiVolume.SerialNum}
+{\footnote MsiVolume:SerialNum}
K{\footnote SerialNum}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SerialNum Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
A long integer representing the unique ID for the physical volume. For the Mac,
 0 is always returned. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SerialNum}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiVolume_DiskNotInDrive}
${\footnote MsiVolume.DiskNotInDrive}
+{\footnote MsiVolume:DiskNotInDrive}
K{\footnote DiskNotInDrive}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
DiskNotInDrive Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
DiskNotInDrive returns True if the volume media is removable (CDROM, Floppy, removable HD), AND there is
 no disk in the drive. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .DiskNotInDrive}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiPath_Object}
${\footnote MsiPath Object}
K{\footnote MsiPath}
+{\footnote Class:MsiPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiPath Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiPath object represents a full path to a directory on a disk volume.
 Internally, MsiPath creates an MsiVolume object to represent the volume
 associated with the full path.\line
 \line
{\b Windows Path and Filename Syntax}\line
 For Windows, the path supplied when creating an MsiPath object must either
  include a drive letter indicating the volume, or a UNC path.  For example,
  the following are valid paths:\line
\line
    {\f1 C:\\MyDocs\\SubDocs}\line
    {\f1 \\\\MyServer\\MyShare\\MyDocs}\line
\line
When specifying filenames to MsiPath methods such as {\uldb GetFullFilePath}{\v MsiPath_GetFullFilePath},
 the following reserved characters are not allowed, and will generate an error if found anywhere in the
 supplied name:\line
 '\\' (backslash)\line
 '/' (forward slash)\line
 ':' (colon)\line
 '"' (double-quote)\line
 '|' (pipe)\line
 '?' (question mark)\line
 '*' (asterisk)\line
 '<' (less-than sign)\line
 '>' (greater-than sign)\line
\line
Multiple consecutive directory seperators are allowed in a path.  For example, the following are
 valid paths:\line
\line
    {\f1 C:\\MyDocs\\\\SubDocs\\\\\\Personal}\line
    {\f1 \\\\MyServer\\MyShare\\\\MyDocs}\line
\line
Note that multiple directory seperators may not follow a drive letter, though they may follow
 a \\\\Server\\Share pair.
\line
\par\li0{\b Properties}\par\li180
{\uldb EndSubPath}{\v MsiPath_EndSubPath}\line
{\uldb Exists}{\v MsiPath_Exists}\line
{\uldb Path}{\v MsiPath_Path}\line
{\uldb RelativePath}{\v MsiPath_RelativePath}\line
{\uldb Volume}{\v MsiPath_Volume}\line
{\uldb Writable}{\v MsiPath_Writable}\line
\par\li0{\b Methods}\par\li180
{\uldb AppendPiece}{\v MsiPath_AppendPiece}\line
{\uldb BindImage}{\v MsiPath_BindImage}\line
{\uldb CheckFileVersion}{\v MsiPath_CheckFileVersion}\line
{\uldb CheckLanguageIDs}{\v MsiPath_CheckLanguageIDs}\line
{\uldb Child}{\v MsiPath_Child}\line
{\uldb ChopPiece}{\v MsiPath_ChopPiece}\line
{\uldb ClusteredFileSize}{\v MsiPath_ClusteredFileSize}\line
{\uldb Compare}{\v MsiPath_Compare}\line
{\uldb ComputeFileChecksum}{\v MsiPath_ComputeFileChecksum}\line
{\uldb EnsureExists}{\v MsiPath_EnsureExists}\line
{\uldb FileDate}{\v MsiPath_FileDate}\line
{\uldb FileExists}{\v MsiPath_FileExists}\line
{\uldb FileInUse}{\v MsiPath_FileInUse}\line
{\uldb FileSize}{\v MsiPath_FileSize}\line
{\uldb FileWritable}{\v MsiPath_FileWritable}\line
{\uldb FindFile}{\v MsiPath_FindFile}\line
{\uldb GetFileAttribute}{\v MsiPath_GetFileAttribute}\line
{\uldb GetFileChecksum}{\v MsiPath_GetFileChecksum}\line
{\uldb GetFileOriginalChecksum}{\v MsiPath_GetFileOriginalChecksum}\line
{\uldb GetFileVersionString}{\v MsiPath_GetFileVersionString}\line
{\uldb GetFullFilePath}{\v MsiPath_GetFullFilePath}\line
{\uldb GetFullUNCFilePath}{\v MsiPath_GetFullUNCFilePath}\line
{\uldb GetImportModulesEnum}{\v MsiPath_GetImportModulesEnum}\line
{\uldb GetLangIDStringFromFile}{\v MsiPath_GetLangIDStringFromFile}\line
{\uldb GetSelfRelativeSD}{\v MsiPath_GetSelfRelativeSD}\line
{\uldb SubFolders}{\v MsiPath_SubFolders}\line
{\uldb ReadResource}{\v MsiPath_ReadResource}\line
{\uldb Remove}{\v MsiPath_Remove}\line
{\uldb RemoveFile}{\v MsiPath_RemoveFile}\line
{\uldb SetFileAttribute}{\v MsiPath_SetFileAttribute}\line
{\uldb SetVolume}{\v MsiPath_SetVolume}\line
{\uldb SupportsLFN}{\v MsiPath_SupportsLFN}\line
{\uldb TempFileName}{\v MsiPath_TempFileName}\line
{\uldb UpdateResource}{\v MsiPath_UpdateResource}\line
{\uldb VerifyFileChecksum}{\v MsiPath_VerifyFileChecksum}\line

\page

#{\footnote MsiPath_Path}
${\footnote MsiPath.Path}
+{\footnote MsiPath:Path}
K{\footnote Path}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Path Property
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a string representing the path. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Path}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
The returned string contains the full path represented by the
 path object, including the volume designation.  See the description
 of the {\uldb MsiPath}{\v MsiPath_Object} object for a full description
 of the path syntax.
\page

#{\footnote MsiPath_RelativePath}
${\footnote MsiPath.RelativePath}
+{\footnote MsiPath:RelativePath}
K{\footnote RelativePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RelativePath Property
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a string representing the path without the volume. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RelativePath}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
The returned string contains the path represented by the
 path object, without the volume designation.  See the description
 of the {\uldb MsiPath}{\v MsiPath_Object} object for a full description
 of the path syntax.
\page

#{\footnote MsiPath_Volume}
${\footnote MsiPath.Volume}
+{\footnote MsiPath:Volume}
K{\footnote Volume}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Volume Property
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns the MsiVolume object representing the root of this path. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Volume}
\par{\i object}\line
Required. The MsiPath object.
\page

#{\footnote MsiPath_SetVolume}
${\footnote MsiPath.SetVolume}
+{\footnote MsiPath:SetVolume}
K{\footnote SetVolume}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetVolume method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Assigns a new MsiVolume object to this MsiPath object. The path (as returned by the Path
 property) will be updated to reflect the new root volume.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetVolume(volume)}
\par{\i object}\line
Required. The MsiPath object.
\par{\i volume}\line
The MsiVolume object to be assigned to this MsiPath object. 
\page

#{\footnote MsiPath_Exists}
${\footnote MsiPath.Exists}
+{\footnote MsiPath:Exists}
K{\footnote Exists}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Exists Property
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Boolean indicating whether the directory tree associated with the path object
 currently exists on the associated volume. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Exists}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
None.
\page

#{\footnote MsiPath_Writable}
${\footnote MsiPath.Writable}
+{\footnote MsiPath:Writable}
K{\footnote Writable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Writable Property
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Boolean indicating whether the directory represented by the path is writable (i.e.
 file-creation privileges are available in this directory). Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Writable}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
If the directory associated with the path does not exist, a run-time error will be generated.
\page

#{\footnote MsiPath_EndSubPath}
${\footnote MsiPath.EndSubPath}
+{\footnote MsiPath:EndSubPath}
K{\footnote EndSubPath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
EndSubPath Property
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a string representing the last sub-path of the path. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .EndSubPath}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
The returned string will not contain any directory separator characters,
\page


#{\footnote MsiPath_AppendPiece}
${\footnote MsiPath.AppendPiece}
+{\footnote MsiPath:AppendPiece}
K{\footnote AppendPiece}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
AppendPiece Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The AppendPiece methods appends the given string to the current path,
 delimiting appropriately with directory separator characters.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .AppendPiece({\i subDir})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b subDir}\line
Required. The name of the subdirectory to append. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
AppendPiece allows multiple subdirectories to be appended at once.  Also, a leading
 and/or trailing directory separator is optional.  Thus, the following examples are 
 all legal, and functionally identical:\line
 \line
services.AppendPiece("subdir1\\subdir2")\line
services.AppendPiece("\\subdir1\\subdir2")\line
services.AppendPiece("subdir1\\subdir2\\")\line
services.AppendPiece("\\subdir1\\subdir2\\")\line
\page

#{\footnote MsiPath_ChopPiece}
${\footnote MsiPath.ChopPiece}
+{\footnote MsiPath:ChopPiece}
K{\footnote ChopPiece}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ChopPiece Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The ChopPiece method removes the last subdirectory segment from the
 current path.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ChopPiece}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
None.
\page

#{\footnote MsiPath_FileExists}
${\footnote MsiPath.FileExists}
+{\footnote MsiPath:FileExists}
K{\footnote FileExists}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FileExists Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The FileExists method returns True if a file of the specified name exists in the
 directory associated with the path object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FileExists({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file to check for.  See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
None.
\page

#{\footnote MsiPath_GetFullFilePath}
${\footnote MsiPath.GetFullFilePath}
+{\footnote MsiPath:GetFullFilePath}
K{\footnote GetFullFilePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFullFilePath Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetFullFilePath method takes a file name as an argument, and
 returns a string that represents the full path to that file, 
 incorporating the path associated with the path object and the given
 file name.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFullFilePath({\i strFile})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b strFile}\line
Required. The name of the file to append to the current path. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.  If an empty string is passed in strFile, just the path itself (terminated 
 with a backslash) will be returned.
\par\fi0\li0{\b Remarks}\par\li180
None.
\page

#{\footnote MsiPath_GetFullUNCFilePath}
${\footnote MsiPath.GetFullUNCFilePath}
+{\footnote MsiPath:GetFullUNCFilePath}
K{\footnote GetFullUNCFilePath}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFullUNCFilePath Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetFullUNCFilePath method takes a file name as an argument, and returns a string that
 represents the full path to that file, incorporating the path associated with the path
 object and the given file name.  If the volume associated with the path object represents
 a network connection, the UNC name of the volume will be used in the returned full path
 (even if the path object was originally created using a mapped drive letter designation).
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFullUNCFilePath({\i strFile})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b strFile}\line
Required. The name of the file to append to the current path. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.  If an empty string is passed in strFile, just the path itself (terminated 
 with a backslash) will be returned.
\par\fi0\li0{\b Remarks}\par\li180
None.
\page

#{\footnote MsiPath_GetFileAttribute}
${\footnote MsiPath.GetFileAttribute}
+{\footnote MsiPath:GetFileAttribute}
K{\footnote GetFileAttribute}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileAttribute Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetFileAttribute method returns the Boolean state of a specified attribute
 for a file or directory.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileAttribute({\i file, attribute})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file or directory. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax. If the file name is null, the attribute of the directory
 will be used.
\par{\i\b attribute}\line
Required. An integer enumeration value specifying the attribute to queried.
 See the remarks below for a list of acceptable values.
\par\fi0\li0{\b Remarks}\par\li180
The following attributes can be queried by the GetFileAttribute method:\line\line
{\f1 ifaArchive    = 0} \tab The file is an archive file (Windows only).\line
{\f1 ifaDirectory  = 1} \tab The "file or directory" is an directory.\line
{\f1 ifaHidden     = 2} \tab The file is hidden.  (Note: For Macintosh, this attribute\line
\tab \tab is True if the 'fInvisible' Finder flag is set).\line
{\f1 ifaNormal     = 3} \tab True only if no other attribute is set (Windows only).\line
{\f1 ifaReadOnly   = 4} \tab The file is read-only. Applications can read the file but cannot\line
 \tab \tab write to it or delete it.  (Note: For Macintosh, this attribute is True if the \line
 \tab \tab file is locked).\line
{\f1 ifaSystem     = 5} \tab The file is part of the operating system or is used exclusively\line
 \tab \tab by it (Windows only).\line
{\f1 ifaTemp       = 6} \tab The file is being used for temporary storage (Windows only).\line
{\f1 ifaCompressed = 7} \tab The file or directory is compressed. For a file, this means that all\line
 \tab \tab of the data in the file is compressed. For a directory, this means that\line
 \tab \tab compression is the default for newly created files and subdirectories.\line
 \tab \tab (Windows only).\line
\line
If any attribute enumeration value other than one of those listed is specified , a run-time error will
 be generated. \line\line
 See also:  {\uldb SetFileAttribute}{\v MsiPath_SetFileAttribute}
\page

#{\footnote MsiPath_SetFileAttribute}
${\footnote MsiPath.SetFileAttribute}
+{\footnote MsiPath:SetFileAttribute}
K{\footnote SetFileAttribute}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SetFileAttribute Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The SetFileAttribute method sets or clears a specified attribute for a file or directory.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SetFileAttribute({\i file, attribute, state})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax. If the file name is null, the attribute of the directory
 will be set.
\par{\i\b attribute}\line
Required. An integer enumeration value specifying the attribute to be set or cleared.
 See the remarks below for a list of acceptable values.
\par{\i\b state}\line
Required. Boolean indicating whether the attribute is to be set or cleared.
\par\fi0\li0{\b Remarks}\par\li180
The following attributes can be set or cleared by the SetFileAttribute method:\line\line
{\f1 ifaArchive    = 0} \tab The file is an archive file (Windows only).\line
{\f1 ifaHidden     = 2} \tab The file is hidden.  (Note: For Macintosh, setting this attribute\line
\tab \tab sets the 'fInvisible' Finder flag).\line
{\f1 ifaReadOnly   = 4} \tab The file is read-only. Applications can read the file but cannot\line
 \tab \tab write to it or delete it.  (Note: For Macintosh, setting or clearing this \line
 \tab \tab attribute locks or unlocks the file).\line
{\f1 ifaSystem     = 5} \tab The file is part of the operating system or is used exclusively\line
 \tab \tab by it (Windows only).\line
{\f1 ifaTemp       = 6} \tab The file is being used for temporary storage (Windows only).\line
{\f1 ifaCompressed = 7} \tab This is a read-only attribute, and cannot be set by SetFileAttribute.\line
\line
If the specified file does not exist, or if any attribute enumeration value other than one
 of those listed is specified, a run-time error will be generated. \line\line
  See also:  {\uldb GetFileAttribute}{\v MsiPath_GetFileAttribute}
\page

#{\footnote MsiPath_FileSize}
${\footnote MsiPath.FileSize}
+{\footnote MsiPath:FileSize}
K{\footnote FileSize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FileSize Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The FileSize method retrieves the size, in bytes, of the specified file.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FileSize({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
The returned byte count represents the logical size of the file; it does not account for
 the number of physical clusters (Mac: allocation blocks) allocated for the file.
\page

#{\footnote MsiPath_FileDate}
${\footnote MsiPath.FileDate}
+{\footnote MsiPath:FileDate}
K{\footnote FileDate}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FileDate Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Retrieves the date and time that the specified file was created (Mac) or last written to (Windows). 
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FileDate({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
The value returned by the FileDate method is compatible with the VBA Date data type.
\page

#{\footnote MsiPath_RemoveFile}
${\footnote MsiPath.RemoveFile}
+{\footnote MsiPath:RemoveFile}
K{\footnote RemoveFile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
RemoveFile Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The RemoveFile method deletes a file existing in the directory associated with
 the MsiPath object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .RemoveFile({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file to be deleted. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
If the specified file does not exist, RemoveFile does nothing (no error is generated).
\page

#{\footnote MsiPath_EnsureExists}
${\footnote MsiPath.EnsureExists}
+{\footnote MsiPath:EnsureExists}
K{\footnote EnsureExists}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
EnsureExists Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The EnsureExists method attempts to create the full path associated
 with the path object. Returns the number of folders actually created.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .EnsureExists}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
EnsureExists attempts to create each subdirectory associated with the
 path object, if it doesn't already exist. For example, if the path is 
 "c:\\dirA\\dirB\\dirC\\", the directory "dirA" will be created on the "c:"
 drive, then "c:\\dirA\\dirB" will be created, and so on, until the entire 
 directory tree exists.  If any subdirectory cannot be created, a 
 run-time error will be generated.
\page

#{\footnote MsiPath_Remove}
${\footnote MsiPath.Remove}
+{\footnote MsiPath:Remove}
K{\footnote Remove}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Remove Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The Remove method attempts to delete the empty directory associated with the path object.  If
 the directory is not empty, however, Remove does nothing. If the directory is empty but still
 cannot be deleted, a run-time error occurs.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Remove}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
Currently, Remove attempts to delete only the "outermost" directory; none of the parent
 directories associated with the path are deleted.\line\line
\page

#{\footnote MsiPath_FileWritable}
${\footnote MsiPath.FileWritable}
+{\footnote MsiPath:FileWritable}
K{\footnote FileWritable}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FileWritable Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The FileWritable method returns True if the specified file exists, AND that file
 can be opened for write-access.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FileWritable({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
None.
\page

#{\footnote MsiPath_FileInUse}
${\footnote MsiPath.FileInUse}
+{\footnote MsiPath:FileInUse}
K{\footnote FileInUse}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FileInUse Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The FileInUse method returns True if a file with the given name
 exists in the directory associated with the Path object,
 AND that file is 'in use' by another process.

\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FileInUse({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
Returns an error record if the specified file doesn't exist.
\page

#{\footnote MsiPath_GetFileChecksum}
${\footnote MsiPath.GetFileChecksum}
+{\footnote MsiPath:GetFileChecksum}
K{\footnote GetFileChecksum}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileChecksum Method (C++ interface)
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetFileChecksum method computes the checksum of the specified file, and also returns the original
 checksum stored in the Portable Executable (PE) header of the file (if the file is of the PE format).

\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileChecksum({\i const ICHAR* szFileName,DWORD* pdwHeaderSum, DWORD* pdwComputedSum})}
\par{\i object}\line
Required. The IMsiPath object.
\par{\i\b szFileName}\line
Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par{\i\b pdwHeaderSum}\line
Required. A pointer to the variable that receives the original checksum stored in the file header, or
 zero if the file cannot be identified as an executable.
\par{\i\b pdwComputedSum}\line
Required. A pointer to the variable that receives the computed checksum.
\par\fi0\li0{\b Remarks}\par\li180
Returns an error record only if an unexpected error occurs.  If the specified file does not have a PE
 header section (i.e. is not a PE .exe or .dll file), zero will be returned in pdwHeaderSum, but no
 error record will be returned.
\page

#{\footnote MsiPath_ComputeFileChecksum}
${\footnote MsiPath.ComputeFileChecksum}
+{\footnote MsiPath:ComputeFileChecksum}
K{\footnote ComputeFileChecksum}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ComputeFileChecksum Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The ComputeFileChecksum method computes and returns the checksum of the specified file.

\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ComputeFileChecksum({\i strFileName})}
\par{\i object}\line
Required. The IMsiPath object.
\par{\i\b strFileName}\line
Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Returns}\par\li180
The computed checksum is returned as the function result.
\page

#{\footnote MsiPath_GetFileOriginalChecksum}
${\footnote MsiPath.GetFileOriginalChecksum}
+{\footnote MsiPath:GetFileOriginalChecksum}
K{\footnote GetFileOriginalChecksum}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileOriginalChecksum Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetFileOriginalChecksum method returns the original checksum stored in the Portable Executable (PE) header
 of the specified file.

\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileOriginalChecksum({\i strFileName})}
\par{\i object}\line
Required. The IMsiPath object.
\par{\i\b strFileName}\line
Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Returns}\par\li180
The original checksum stored in the PE header of the file is returned as the function result.  If the
 file is not an executable (i.e. has no PE header, or the header is corrupt), then zero is returned.
\page

#{\footnote MsiPath_VerifyFileChecksum}
${\footnote MsiPath.VerifyFileChecksum}
+{\footnote MsiPath:VerifyFileChecksum}
K{\footnote VerifyFileChecksum}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
VerifyFileChecksum Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The GetFileChecksum method computes the checksum of the specified file, and also returns the original
 checksum stored in the Portable Executable (PE) header of the file (if the file is of the PE format).

\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileChecksum({\i const ICHAR* szFileName,DWORD* pdwHeaderSum, DWORD* pdwComputedSum})}
\par{\i object}\line
Required. The IMsiPath object.
\par{\i\b szFileName}\line
Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par{\i\b pdwHeaderSum}\line
Required. A pointer to the variable that receives the original checksum stored in the file header, or
 zero if the file cannot be identified as an executable.
\par{\i\b pdwComputedSum}\line
Required. A pointer to the variable that receives the computed checksum.
\par\fi0\li0{\b Remarks}\par\li180
Returns an error record only if an unexpected error occurs.  If the specified file does not have a PE
 header section (i.e. is not a PE .exe or .dll file), zero will be returned in pdwHeaderSum, but no
 error record will be returned.
\page

#{\footnote MsiPath_UpdateResource}
${\footnote MsiPath.UpdateResource}
+{\footnote MsiPath:UpdateResource}
K{\footnote UpdateResource}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
UpdateResource Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The UpdateResource method enables the caller to modify an existing resource in a specified
 file.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .UpdateResource({\i file, resType, resID, data})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file to be modified. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par{\i\b resType}\line
Required. An integer value representing the resource type to be modified.  See the remarks
 below for additional details.
\par{\i\b resID}\line
Required. An integer value representing the ID of the resource to be modified.
\par{\i\b data}\line
Required. A string containing the data to be written to the specified resource.  Note that
 although this parameter is a string, resource data is not limited to printable characters;
 any values that can fit in each byte of the string are permissible.
\par\fi0\li0{\b Remarks}\par\li180
The integer representing the resource type can be any user-defined value desired; alternatively,
 to update a "standard" resource type, the following enumeration values are available:\line
 \line
{\f1 RT_ACCELERATOR:}\tab Accelerator table\line
{\f1 RT_BITMAP:}\tab Bitmap resource\line
{\f1 RT_DIALOG:}\tab Dialog box\line
{\f1 RT_FONT:}\tab Font resource\line
{\f1 RT_FONTDIR:}\tab Font directory resource\line
{\f1 RT_MENU:}\tab Menu resource\line
{\f1 RT_RCDATA:}\tab Application-defined resource (raw data)\line
{\f1 RT_STRING:}\tab String-table entry\line
{\f1 RT_MESSAGETABLE:}\tab Message-table entry\line
{\f1 RT_CURSOR:}\tab Hardware-dependent cursor resource\line
{\f1 RT_GROUP_CURSOR:}\tab Hardware-independent cursor resource\line
{\f1 RT_ICON:}\tab Hardware-dependent icon resource\line
{\f1 RT_GROUP_ICON:}\tab Hardware-independent icon resource\line
{\f1 RT_VERSION:}\tab Version resource\line
\line
UpdateResource cannot be used to create new resource entries within a file; it can only update
 existing resources.  If a resource of the specified type and ID does not exist in the file, a
 run-time error will be generated.\line
 \line
See also:  {\uldb ReadResource}{\v MsiPath_ReadResource}
\page


#{\footnote MsiPath_ReadResource}
${\footnote MsiPath.ReadResource}
+{\footnote MsiPath:ReadResource}
K{\footnote ReadResource}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ReadResource Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The ReadResource method enables the caller to read from a file the contents of a specified
 resource.  The data from the resource is returned to the caller as a string.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ReadResource({\i file, resType, resID})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file to read. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par{\i\b resType}\line
Required. An integer value representing the resource type to be read.  See the remarks
 below for additional details.
\par{\i\b resID}\line
Required. An integer value representing the ID of the resource to be read.
\par\fi0\li0{\b Remarks}\par\li180
The integer representing the resource type can be any user-defined value desired; alternatively,
 to read a "standard" resource type, the following enumeration values are available:\line
 \line
{\f1 RT_ACCELERATOR:}\tab Accelerator table\line
{\f1 RT_BITMAP:}\tab Bitmap resource\line
{\f1 RT_DIALOG:}\tab Dialog box\line
{\f1 RT_FONT:}\tab Font resource\line
{\f1 RT_FONTDIR:}\tab Font directory resource\line
{\f1 RT_MENU:}\tab Menu resource\line
{\f1 RT_RCDATA:}\tab Application-defined resource (raw data)\line
{\f1 RT_STRING:}\tab String-table entry\line
{\f1 RT_MESSAGETABLE:}\tab Message-table entry\line
{\f1 RT_CURSOR:}\tab Hardware-dependent cursor resource\line
{\f1 RT_GROUP_CURSOR:}\tab Hardware-independent cursor resource\line
{\f1 RT_ICON:}\tab Hardware-dependent icon resource\line
{\f1 RT_GROUP_ICON:}\tab Hardware-independent icon resource\line
{\f1 RT_VERSION:}\tab Version resource\line
\line
If a resource of the specified type and ID does not exist in the file, a
 run-time error will be generated.\line
\line
See also:  {\uldb UpdateResource}{\v MsiPath_UpdateResource}

\page

#{\footnote MsiPath_ClusteredFileSize}
${\footnote MsiPath.ClusteredFileSize}
+{\footnote MsiPath:ClusteredFileSize}
K{\footnote ClusteredFileSize}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ClusteredFileSize Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Rounds a file size, in bytes, to a multiple of the volume cluster size, 
 to indicate the amount of disk space required. The returned value is expressed in
 units of 512 bytes. (!!Compressed volumes??.!!
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ClusteredFileSize({\i size})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b size}\line
Required. The size of the file in bytes.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiPath_GetFileVersionString}
${\footnote MsiPath.GetFileVersionString}
+{\footnote MsiPath:GetFileVersionString}
K{\footnote GetFileVersionString}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetFileVersionString Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a string representation of a file's version. If a file with the given name 
does not exist in the directory associated with the path object, or that file has 
no version information, an empty string will be returned.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetFileVersionString({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
The format of the returned version string depends on the platform:\line\line
{\ul Windows:}\line
The version string will be of the form "a.b.c.d", where each letter
 represents the string equivalent of an integer ranging from 0 to 65535.\line\line
{\ul Mac:}\line
The version string will be of the form:\line
 <majorRev>.<minorRev>.<bugFixRev>.<stage>.<nonRelRev>\line
See the {\uldb CheckFileVersion}{\v MsiPath_CheckFileVersion} function for further
 explanation of each version field.
\page

#{\footnote MsiPath_CheckFileVersion}
${\footnote MsiPath.CheckFileVersion}
+{\footnote MsiPath:CheckFileVersion}
K{\footnote CheckFileVersion;icfvExistNoVersion;icfvExistLower;icfvExistEqual}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CheckFileVersion Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Checks a file against supplied version and language strings and returns an enumeration
 indicating whether the actual file's version is newer, older or the same as the
 supplied version.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CheckFileVersion({\i strFilename, strVersion, strLanguage})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b strFilename}\line
Required. The name of the file. CheckFileVersion will look for a file of this name in the directory
 associated with the MsiPath object, and check that file's version against the string supplied in the
 'version' parameter. See the {\uldb MsiPath}{\v MsiPath_Object} main topic for filename syntax.
\par{\i\b strVersion}\line
Required. Version string to compare against the existing file. This string must be of the form "a.b.c.d", 
 with each field containing a 16-bit numeric value. Omitted fields are assumed to be the least
 significant (eg d then c then b then a) and are parsed as zeros. Thus, "2.1" is equivalent to "2.1.0.0".
 If this string is empty, a version number of "0.0.0.0" (i.e. an unversioned file) is assumed.
\par{\i\b strLanguage}\line
Required.  A string containing containing identifiers as decimal numbers. If more than one language is supported, 
 the identifiers should be separated by commas.  See {\uldb GetLangIDStringFromFile}{\v MsiPath_GetLangIDStringFromFile}
 for more information about the language string format.

\par\fi0\li0{\b Return Types}\par\li180
{\f1 icfvNoExistingFile:}\tab No existing file with the specified name was found in the directory\line
\tab \tab associated with the path object.\line
{\f1 icfvExistingLower:}\tab The existing file's version is lower than the given version.\line
{\f1 icfvExistingEqual:}\tab The existing file's version is equal to the given version.\line
{\f1 icfvExistingHigher:}\tab The existing file's version is higher than the given version.\line
{\f1 icfvVersStringError:}\tab A syntax error was found in the version string.\line
\par\fi0\li0{\b Remarks}\par\li180
If the strVersion parameter is an empty string, and the existing file is versioned, icfvExistingHigher will
 always be returned.
\par
If a valid string is supplied in strVersion, and the existing file is unversioned, icfvExistingLower will
 always be returned.
\par
If a valid string is supplied in strVersion, and the existing file is of the same version, the languages specified in the
 strLanguage parameter will be compared against the languages supported by the existing file.  If the existing file
 supports the same set of languages as those specified in strLanguage (or if strLanguage is an empty string, and the
 existing file has no language information either), icfvExistingEqual will be returned.  If strLanguage specifies
 any languages that the existing file does not support, icfvExistingLower will be returned.
\par
If strVersion is an empty string, and the existing file is also unversioned, the 'LastModified' and 'Created' dates
 of the existing file will be compared.  If they differ by more than two seconds (i.e. the file has been modified
 since it was installed), icfvExistingHigher will be returned.  Otherwise, icfvExistingLower will be returned.
\page

#{\footnote MsiPath_GetImportModulesEnum}
${\footnote MsiPath.GetImportModulesEnum}
+{\footnote MsiPath:GetImportModulesEnum}
K{\footnote GetImportModulesEnum}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetImportModulesEnum Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is undocumented.
\page

#{\footnote MsiPath_GetLangIDStringFromFile}
${\footnote MsiPath.GetLangIDStringFromFile}
+{\footnote MsiPath:GetLangIDStringFromFile}
K{\footnote GetLangIDStringFromFile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetLangIDStringFromFile Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a string containing a file's language identifiers as decimal numbers. 
If more than one language is supported, the identifiers will be separated by commas.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .GetLangIDStringFromFile({\i file})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file.  GetLangIDStringFromFile will look for a file of this name in the
 directory associated with the MsiPath object.  See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par\fi0\li0{\b Remarks}\par\li180
On the Win32 platform, The language IDs returned by GetLangIDStringFromFile are 16-bit values, expressed as
 a decimal number.  Each ID consists of the combination of a primary language ID in bits 0-9,
 and a sublanguage ID in bits 10-15.  For example, the primary language ID for German is
 0000000111 (binary), with a sublanguage ID of 000001 (binary). Thus, the full LANGID is:\line 
\line \tab 000001 + 0000000111 = 0x0407, or 1031 decimal.\line
\line
Similarly, the LANGID for U.S. English works out to be 1033, so for a file that supports
 U.S. English and German, GetLangIDStringFromFile will return "1033, 1031".\line
\line
On the Macintosh platform, the language ID returned by GetLangIDStringFromFile is the 'region code'
 found in the version resource of the file.
\page

#{\footnote MsiPath_GetSelfRelativeSD}
${\footnote MsiPath.GetSelfRelativeSD}
+{\footnote MsiPath:GetSelfRelativeSD}
K{\footnote GetSelfRelativeSD}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
GetSelfRelativeSD Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method is undocumented.
\page

#{\footnote MsiPath_CheckLanguageIDs}
${\footnote MsiPath.CheckLanguageIDs}
+{\footnote MsiPath:CheckLanguageIDs}
K{\footnote CheckLanguageIDs}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CheckLanguageIDs Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Checks a file against a set of language IDs, and returns an enumeration indicating 
the relationship between the file languages and the supplied languages.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CheckLanguageIDs({\i file, ids})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. The name of the file. CheckLanguageIDs will look for a file of this name in the directory
 associated with the MsiPath object, and check that file's supported languages against the languages
 specified in the "ids" parameter.  See the {\uldb MsiPath}{\v MsiPath_Object}
 main topic for filename syntax.
\par{\i\b ids}\line
Required. A string specifying the list of integer language IDs to check for. If more than one 
ID is supplied, they must be separated by commas.  For example: "1031, 1033, 2057"
\par\fi0\li0{\b Return Types}\par\li180
{\f1 iclExistNoFile:}\tab No existing file with the specified name in the directory\line
\tab \tab associated with the path object.\line
{\f1 iclExistNoLang:}\tab The existing file has no language information.\line
{\f1 iclExistSubset:}\tab The specified language set encompasses every language\line
\tab \tab supported in the existing file, plus additional languages\line
\tab \tab not supported by the existing file.\line
{\f1 iclExistEqual:}\tab The specified language set is identical to the language\line
\tab \tab set supported by the existing file.\line
{\f1 iclExistIntersect:}\tab The specified language set and the language set\line
\tab \tab supported by the existing file have at least one language\line
\tab \tab in common, and each set also encompasses at least one \line
\tab \tab language not supported by the other.\line
{\f1 iclExistSuperset:}\tab The existing file supports at least one language not\line
\tab \tab encompassed by the specified language set.\line
{\f1 iclExistNullSet:}\tab The specified language set and the language set supported\line
\tab \tab by the existing file have no languages in common.\line
{\f1 iclExistLangNeutral:}\tab The existing file returns a language-neutral LANGID, \line
\tab \tab but the specified language set supports one or more \line
\tab \tab specific languages.\line
{\f1 iclNewLangNeutral:}\tab The specified language set contains a language-neutral\line
\tab \tab LANGID, but the existing file supports one or more specific\line
\tab \tab languages.\line
{\f1 iclExistLangSetError:}\tab The existing file returns a language-neutral LANGID,\line
\tab \tab but also contains one or more non-neutral IDs.\line
{\f1 iclNewLangSetError:}\tab The specified language set contains a language-neutral\line
\tab \tab LANGID, but also contains one or more non-neutral IDs.\line
{\f1 iclLangStringError:}\tab The specified language set string contains a syntax \line
\tab \tab error.  Possible errors include non-numeric characters,\line
\tab \tab empty fields between comma separators, etc.\line
\par\fi0\li0{\b Remarks}\par\li180
A LANGID value is "language-neutral" if the primary language ID (the lower 10 bits) portion 
of the value is all zeros.  If either the existing file or the language set string passed 
in the ids parameter contains a language-neutral LANGID, no other LANGIDs are allowable in 
the set.\line
\line
If both the existing file and the given language set are "language-neutral", iclExistEqual 
will be returned.\line
\line
If an empty string is passed in "ids", and the existing file supports at least one language, 
iclExistNullSet will be returned.\line
\page

#{\footnote MsiPath_Compare}
${\footnote MsiPath.Compare}
+{\footnote MsiPath:Compare}
K{\footnote Compare}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Compare Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The Compare method compares the path associated with the object
 passed as an argument to the path of the current object.
 An enumeration describing the relationship between the two path objects
 is returned.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Compare({\i path})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b path}\line
Required. Another MsiPath object that will supply the path for comparison.
\par\fi0\li0{\b Return Types}\par\li180
{\f1 ipcEqual:}\tab The paths of the two objects are equal.\line
{\f1 ipcParent:}\tab The path of the object passed as an argument is a parent\line 
\tab\tab directory of the current object's path.\line
{\f1 ipcChild:}\tab The current object's path is a parent directory of the path of\line
\tab\tab the object passed as an argument.\line
{\f1 ipcNoRelation}\tab The paths of the two objects are unrelated (i.e. the root\line
\tab\tab directory of each is different).
\page

#{\footnote MsiPath_Child}
${\footnote MsiPath.Child}
+{\footnote MsiPath:Child}
K{\footnote Child}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
Child Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The Child method compares the path associated with the object passed as an argument
 (the "parent" path) to the path of the current object, and returns a string that 
 contains the portion of the current object's path not encompassed by the parent path, 
 i.e. the "child" path.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .Child({\i parent})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b parent}\line
Required. An MsiPath object which represents a path that is a parent of the current
 object's path.
\par\fi0\li0{\b Remarks}\par\li180
The child path returned will always contain a trailing directory separator. For example,
if the path of the current object is:\line
"c:\\Windows\\System\\Drivers\\"\line
\line
and the path of the parent object is:\line
"c:\\Windows\\"\line
\line
the string returned by the Child method will be:\line
"System\\Drivers\\"\line
\line
If the paths of the two MsiPath objects are equal, an empty string will be returned.  If the
 "parent object" represents a path that is not actually a parent of the current object's path,
 a run-time error (1344: "Not a parent") will be thrown.
\page

#{\footnote MsiPath_TempFileName}
${\footnote MsiPath.TempFileName}
+{\footnote MsiPath:TempFileName}
K{\footnote TempFileName}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
TempFileName Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Creates a temporary file in this object's directory, and returns 
the full path to the temporary file.  An optional prefix and/or extension may be supplied
 for use when generating the file name.  The generated file name is of the 8.3 form where
 the characters in the file name not used by the prefix are random hexidecimal numbers.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .TempFileName({\i prefix, extension, fileNameOnly})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b prefix}\line
Optional. The prefix for the file name.  At most the first 8 characters of this string
 are used.  If this argument is not supplied, no prefix is given to the file name (the
 file name will consist entirely of random hexidecimal digits.
\par{\i\b extension}\line
Optional. The extension for the file name.  At most the first 3 characters of this string
 are used.  If this argument is not supplied, the default extension "tmp" is used.
\par{\i\b fileNameOnly}\line
Optional. True to return the temporary file name only.  False to return the full path of the
 temporary file.
\par\fi0\li0{\b Remarks}\par\li180
 None.
\page


#{\footnote MsiPath_FindFile}
${\footnote MsiPath.FindFile}
+{\footnote MsiPath:FindFile}
K{\footnote FindFile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
FindFile Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\tx7000\tab{\b Signature Table}
\par}\li180
The FindFile method attempts to find a match for the file signature passed in, 
and returns True if a file of the specified filter exists. If found, the 
path is changed to the location of the file.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .FindFile({\i record, depth})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b record}\line
Required. The file signature filter. Must be of the same form as a record from the 
{\uldb Signature}{\v _msi_Signature_Table@msi.hlp} table MINUS the key {\i\b Signature} column.
\par{\i\b depth}\line
Optional. The depth to which the file signature is to be searched.
\page

#{\footnote MsiPath_SubFolders}
${\footnote MsiPath.SubFolders}
+{\footnote MsiPath:SubFolders}
K{\footnote SubFolders}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SubFolders Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Returns a collection of strings containing the names of all the sub-folders of the path.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SubFolders}
\par{\i object}\line
Required. The MsiPath object.
\par\fi0\li0{\b Remarks}\par\li180
!!Additional notes!! 
\page

#{\footnote MsiPath_BindImage}
${\footnote MsiPath.BindImage}
+{\footnote MsiPath:BindImage}
K{\footnote BindImage}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
BindImage Method
\line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Binds an executable import address table to the functions imported from DLLS. 
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .BindImage({\i file, dllPath})}
\par{\i object}\line
Required. The MsiPath object.
\par{\i\b file}\line
Required. the executable filename string.
\par{\i\b dllPath}\line
Optional. A string representing the set of {\b ; } separated paths where to get the import DLLS. 
The function prefixes the {\b dllPath} string with the path of the executable and appends it 
with the system path.
\par\fi0\li0{\b Remarks}\par\li180
Applicable only on Windows systems. The service does nothing on Mac.
\page

#{\footnote MsiPath_SupportsLFN}
${\footnote MsiPath.SupportsLFN}
+{\footnote MsiPath:SupportsLFN}
K{\footnote SupportsLFN}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
SupportsLFN Property
\line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Boolean indicating whether the volume this path is on supports long file names.
 If False is returned, only 8.3 file names may be used. Read-only.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .SupportsLFN}
\par{\i object}\line
Required. The MsiVolume object.
\page

#{\footnote MsiFileCopy_Object}
${\footnote MsiFileCopy Object}
K{\footnote MsiFileCopy}
+{\footnote Class:MsiFileCopy}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiFileCopy Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiFileCopy object is used to copy files from a specified source directory to a specified
 destination directory.  The MsiFileCopy object is created by calling the 
 {\uldb CreateCopier}{\v MsiServices_CreateCopier} function.
\par\li0{\b Methods}\par\li180
{\uldb CopyTo}{\v MsiFileCopy_CopyTo}\line
{\uldb ChangeMedia}{\v MsiFileCopy_ChangeMedia}\line
\page

#{\footnote MsiFileCopy_CopyTo}
${\footnote MsiFileCopy.CopyTo}
+{\footnote MsiFileCopy:CopyTo}
K{\footnote CopyTo}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CopyTo Method
\line\tx360\tab\fs18\b0{\uldb MsiFileCopy Object}{\v MsiFileCopy_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
Copies a file from a source path to a destination path. File parameters are
 supplied as an MsiRecord object.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CopyTo({\i srcPath, destPath, paramRec})}
\par{\i object}\line
Required. The MsiFileCopy object.
\par{\i\b srcPath}\line
Required. The MsiPath object representing the source directory.
\par{\i\b destPath}\line
Required. The MsiPath object representing the destination directory. This directory must exist.
 If it does not, a run-time error will be generated.
\par{\i\b paramRec}\line
Required. An MsiRecord object containing file parameters as follows:\line
  Field 1: For compressed files, the Diamond cabinet identifier.  For uncompressed files,\line
      the source file name.\line
  Field 2: The destination file name.\line
  Field 3: The file attributes to set - an integer containing bit flags:\line
    Bit 0:	Read Only\line
    Bit 1:	Hidden\line
    Bit 2:	System\line
    (all other bits are ignored)\line
  Field 4: Unclustered size of file, in bytes.
\par\fi0\li0{\b Remarks}\par\li180
When uncompressing files from cabinets, note that the {\uldb ChangeMedia}{\v MsiFileCopy_ChangeMedia}
 method must first be called to designate the proper source cabinet before calling CopyTo.\line
 \line
 (Windows Only)\line
 New files created by the CopyTo function will always have the archive bit set, which is the standard
  for new files created by any application.  Thus, there is no separate bit in field 3 of the record
  passed to CopyTo for setting the archive bit.
\page

#{\footnote MsiFileCopy_ChangeMedia}
${\footnote MsiFileCopy.ChangeMedia}
+{\footnote MsiFileCopy:ChangeMedia}
K{\footnote ChangeMedia;Cabinet files,compressed}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ChangeMedia Method
\line\tx360\tab\fs18\b0{\uldb MsiFileCopy Object}{\v MsiFileCopy_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The method is used to request a change in source media. For compressed files in particular, this method
 signals that the source of compressed data (as used by the {\uldb CopyTo}{\v MsiFileCopy_CopyTo} method)
 needs to change from one cabinet file to another.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ChangeMedia({\i srcPath, keyFileName})}
\par{\i object}\line
Required. The MsiFileCopy object.
\par{\i\b srcPath}\line
Required. The MsiPath object representing the media source directory.
\par{\i\b keyFileName}\line
Required. The name of a 'key' file on the source media. See the remarks below.
\par\fi0\li0{\b Remarks}\par\li180
After a cabinet Copier object has been created (via the MsiServices
 {\uldb CreateCopier}{\v MsiServices_CreateCopier} method), ChangeMedia must be
 called to designate the source cabinet file before the {\uldb CopyTo}{\v MsiFileCopy_CopyTo}
 method is called, and again each time a file compressed in a cabinet other than the
 current cabinet is to be copied.  Also, note that for files that are split across cabinets,
 the CopyTo method will return with an error record (imsgNeedNextCabinet, error number 1390)
 when the file data contained in the current cabinet has finished copying.  In this case,
 the ChangeMedia method should be called with the name of the next cabinet, and then CopyTo
 should be called again with the same file, to allow the second part of the split file to
 finish copying (this procedure should be repeated as necessary to complete copying of files
 that may be split across more than two cabinets).\line
\line
When copying files from cabinets, the name supplied in the keyFileName parameter MUST be the name of the
 cabinet file to be opened.  If a valid cabinet file with this name is not found in the directory specified
 by the srcPath object, an error will be returned.
 \par
 If ChangeMedia is being called for a non-cabinet MsiFileCopy object, the keyFileName is ignored.
 \par
{\b Cabinets stored in a Database stream}\par
 If the keyFileName name is preceded by a '#' character, this indicates that the source media is a a cabinet
  that is stored in a stream within the .MSI database. In this case, ChangeMedia will attempt to open
  and copy from a stream within the MsiStorage object that was passed to the CreateCopier method.  The
  name of the stream is the value in keyFileName (without the leading '#').
\par
{\b Cabinets stored in a Launcher resource}\par
 If the keyFileName name is preceded by an '@'character, this indicates that the source media
  is a cabinet stored within a resource of the launching executable file. In this case, ChangeMedia will
  attempt to find and load the cabinet from a resource whose resource name is the same as the value in
  keyFileName (without the leading '@'), and whose integral resource type is RT_INSTALL_DIMCAB (42).\line
  \line
 NOTE!  The functionality of copying files from cabinets within a module resource is not available via
  automation.  This is because there is no standard way for an automation controller to initialize an
  MsiFileCopier object with a valid module handle, which is required by ChangeMedia to be able to locate
  module resources.  Thus, this functionality is only available when running the Installer via a
  host launcher that has direct access to the Installer COM interfaces.
\page

#{\footnote MsiFilePatch_Object}
${\footnote MsiFilePatch Object}
K{\footnote MsiFilePatch}
+{\footnote Class:MsiFilePatch}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
MsiFilePatch Object
\line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
The MsiFilePatch object is used to patch existing files in place.
 The MsiFilePatch object is created by calling the 
 {\uldb CreatePatcher}{\v MsiServices_CreatePatcher} function.
\par\li0{\b Methods}\par\li180
{\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}\line
{\uldb ContinuePatch}{\v MsiFilePatch_ContinuePatch}\line
{\uldb CancelPatch}{\v MsiFilePatch_CancelPatch}\line
{\uldb CanPatchFile}{\v MsiFilePatch_CanPatchFile}\line
\page

#{\footnote MsiFilePatch_ApplyPatch}
${\footnote MsiFilePatch.ApplyPatch}
+{\footnote MsiFilePatch:ApplyPatch}
K{\footnote ApplyPatch}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ApplyPatch Method
\line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method applies a patch to a target file, producing an output file.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ApplyPatch(targetPath,targetFile,outputPath,outputFile,patchPath,patchFile,perTick)}
\par{\i object}\line
Required. The MsiFilePatch object.
\par{\i targetPath}\line
Required. An MsiPath object specifying the location of the file to be patched.
\par{\i targetName}\line
Required. The name of the target file.
\par{\i outputPath}\line
Required. An MsiPath object specifying the location of the output file.
\par{\i outputName}\line
Required. The name of the output file.
\par{\i patchPath}\line
Required. An MsiPath object specifying the location of the patch file.
\par{\i patchName}\line
Required. The name of the patch file.
\par{\i perTick}\line
Optional. The number of bytes to patch. This method will return control to the caller
 after these number of bytes have been patched, or the file is completely patched, whichever
 occurs first.  Note that the actual patch application will continue in a seperate thread
 after this method returns, if necessary.  This method may return after more than the given number of
 bytes has been patched.  If this method completes before the file has been patched,
 an error is thrown indicating
 how many bytes have been patched. The caller should call {\uldb ContinuePatch}{\v MsiFilePatch_ContinuePatch}
 to resume the patch application. If the file has been compeletely patched and no errors
 have occured, no error is thrown. Ommitting or passing 0 for this value causes this method to patch the
 entire file before returning.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiFilePatch_ContinuePatch}
${\footnote MsiFilePatch.ContinuePatch}
+{\footnote MsiFilePatch:ContinuePatch}
K{\footnote ContinuePatch}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
ContinuePatch Method
\line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method continues a patch application initiated by {\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .ContinuePatch()}
\par{\i object}\line
Required. The MsiFilePatch object.
\par\fi0\li0{\b Remarks}\par\li180
This method will patch at least as many bytes as specified in the {\i perTick} parameter to
 {\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}, or the remainder of the file, whichever is less.
 If the entire file is not patched and error is thrown indicating the number of bytes patched.  In
 this case, this method should be called again to resume the patch application.
\page

#{\footnote MsiFilePatch_CancelPatch}
${\footnote MsiFilePatch.CancelPatch}
+{\footnote MsiFilePatch:CancelPatch}
K{\footnote CancelPatch}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CancelPatch Method
\line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method cancels a patch application initiated by {\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}.
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CancelPatch()}
\par{\i object}\line
Required. The MsiFilePatch object.
\par\fi0\li0{\b Remarks}\par\li180
\page

#{\footnote MsiFilePatch_CanPatchFile}
${\footnote MsiFilePatch.CanPatchFile}
+{\footnote MsiFilePatch:CanPatchFile}
K{\footnote CanPatchFile}
\pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b
CanPatchFile Method
\line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object}
\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects}
\tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp}
\par}\li180
This method determines if an existing file can be patched.  
\par\li0{\b Syntax}\par\li500\fi-320
{\i object}{\b .CanPatchFile(targetPath,targetName,patchPath,patchName)}
\par{\i object}\line
Required. The MsiFilePatch object.
\par{\i targetPath}\line
Required. An MsiPath object representing the location of the file being checked.
\par{\i targetFile}\line
Required. The name of the file being checked.
\par{\i patchPath}\line
Required. An MsiPath object representing the location of the patch file.
\par{\i patchFile}\line
Required. The name of the patch file.
\par\fi0\li0{\b Return Types}\par\li180
{\f1 icpCanPatch:}\tab Can patch file to update.\line
{\f1 icpCannotPatch:}\tab File cannot be patched.\line
{\f1 icpUpToDate:}\tab File is already up-to-date. Patch is unecessary.
\page

}

