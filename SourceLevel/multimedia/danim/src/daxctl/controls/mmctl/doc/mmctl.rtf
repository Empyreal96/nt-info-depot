{\rtf1\ansi \deff0\deflang1033

{\fonttbl
{\f0\froman Times New Roman;}
{\f2\fswiss Arial;}
{\f19\fmodern\fcharset0\fprq1 Courier New;}
}

{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue127;
\red0\green127\blue127;
\red0\green127\blue0;
\red127\green0\blue127;
\red127\green0\blue0;
\red127\green127\blue0;
\red127\green127\blue127;
\red192\green192\blue192;
}


{\stylesheet
{\s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 header;}
{\s251\sb160\sa40\sl-280\keepn \b\f2\lang1033 heading 4;}
{\s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 heading 3;}
{\s253\li-1800\sb160\sa60\sl-380\keepn \b\f0\fs34\lang1033 heading 2;}
{\s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 heading 1;}
{\*\cs10 \additive Default Paragraph Font;}
{\sa160\sl240 \fs21\lang1033 Normal;}
{\s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Ex;}
{\s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 header rule;}
{\s45\li-1800\sa180\sl-440\keepn\tx0 \b\f2\fs40\up8\lang1033 Rh1;}
{\s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Rmh;}
{\s50\sl-240\keepn \f0\fs21\lang1033 Term1;}
{\s53\li280\sl-240\keepn \f0\fs21\lang1033 Term2;}
{\s54\li280\sa80\sl-240 \f0\fs21\lang1033 Def1;}
{\s55\li560\sa80\sl-240 \f0\fs21\lang1033 Def2;}
{\s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 Rule;}
{\s93\sl240 \fs21\lang1033 
Index Link;}
{\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 Table Text;}
}

\paperw12240\paperh15840\margl3330\margr1530\margt-2540\margb-2220\gutter420 
\facingp\deftab280\widowctrl\ftnbj 

\sectd \binfsxn1\binsxn1\linex0\headery1990\footery360\endnhere\titlepg 

{\headerl \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 4}}{\expnd50  }Autodoc Output - 10/22/96\par 
\pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 \par }

{\headerr \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
\tab Autodoc Output - 10/22/96{\expnd50   }
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 3}}
\par \pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 
\par }
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 User's Guide For\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\fs48\i\b Multimedia Controls}

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Software Development Kit\par 
\pard\plain \par
\pard\plain \s93\sl240 \fs21\lang1033 
1. About The MM Controls Project\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2. Using The MM Controls SDK\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3. SDK Part A: The Theatre Control Ensemble\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4. SDK Part B: Writing Lightweight Controls & Containers\par 
\pard\plain \s93\sl240 \fs21\lang1033 
5. The ActiveX Control Architecture And MM Controls Extensions\par 
\pard\plain \par
\pard\plain \sa160\sl240 \fs21\lang1033 To report bugs, {\b mailto:MMCtl}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For more information, see {\b http://consweb/tech/mmctl/}
.\par 
\pard\plain \par
\pard\plain \par
\pard\plain \sa160\sl240 \fs21\lang1033 Help file built: 10/22/96\par 
\pard\plain \s93\sl240 \fs21\lang1033 
About Autodoc\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 1. About The MM Controls Project\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
1.1. MM Controls: Introduction And Goals\par 
\pard\plain \s93\sl240 \fs21\lang1033 
1.2. MM Controls Requirements Beyond ActiveX\par 
\pard\plain \s93\sl240 \fs21\lang1033 
1.3. Lessons Learned (So Far)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
1.4. Related Efforts\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 1.1. MM Controls: Introduction And Goals\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The Multimedia Controls project is an effort within the Interactive 
Media Technologies group in the Interactive Media (formerly Consumer) Division. 
MM Controls begun in late 1995 with the following goals:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab 1. {\i Represent IMD-specific requirements for the ActiveX control 
architecture to Sweeper and Forms3. }
 IMD products tend to be 
more media-rich and require more customized user interfaces than 
other ActiveX clients.  Also, since animation plays a large role 
in many IMD products, it's important to ensure that, in the long term, 
animation capabilities are integrated fully into MS ActiveX containers; 
black-box monolithic Shockwave-style animation isn't flexible enough.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab 2. {\i Promote the ActiveX control architecture throughout IMD.}
 
Initially, many IMD product groups viewed the OLE Controls 
architecture as too heavyweight to use as a way of dividing large 
conventional CD-ROM applications into smaller components.  But 
with OC96/ActiveX (with a push in the right direction) this is 
no longer necessarily the case.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab 3. {\i As needed, provide the tools for building lightweight 
"multimeda-enabled" ActiveX controls.}
  MFC is insufficient for 
building lightweight controls, and other toolkits (MarcWan, ATL) aren't 
yet focussed on (a) helper DLLs to reduce average control size, 
and (b) palette negotiation and other MM-specific issues.  Until 
they are (and to help demonstrate requirements), the MM Controls 
project provides an SDK to meet these needs.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab 4. {\i Become obsolete!}
  Once the above goals have been met by 
platform-provided tools and technologies, we can focus purely on 
building above the platform.  (Of course, we'll ensure that 
any clients of MM Controls have a smooth transition path toward 
future Sweeper/Forms3 solutions.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 It is important to emphasize that MM Controls does not attempt to 
create any new standards -- we simply want to make ActiveX work for IMD.\par 

The MM Controls {\b Stage} and {\b Sprite} controls help drive 
goal #1 (see {\b 1.2. MM Controls Requirements Beyond ActiveX}
 and 
{\b 3. SDK Part A: The Theatre Control Ensemble}
), and (by example) 
goal #2.  The MM Controls SDK (see 
{\b 4. SDK Part B: Writing Lightweight Controls & Containers}
 
addresses goal #3.  To work toward goal #4, the MM Controls team is working 
with Sweeper and Forms3 to ensure that the standard system components and 
tools will obviate the need for the MM Controls SDK.\par 

Current MM Controls clients include Sundance '97 (a multimedia electronic 
greeting cards authoring tool) and the Blue Ribbon ActiveMusic control 
(which generates interactive music).\par 

For more information, see: {\b http://consweb/tech/mmctl/}
\par 

{\b IMPORTANT}
:  If you want to use MM Controls, please {\b mailto:EricLe}
 
first so we can make sure we can support your project.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 1.2. MM Controls Requirements Beyond ActiveX\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The ActiveX Controls architecture defines how a visible (windowed 
or windowless) or invisible control can be embedded in a container. 
In addition to the requirements of ActiveX, MM Controls has the following 
needs:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Palette negotiation and optimization:}
  A container needs to 
query each control for its ideal palette of colors, and then 
{\i efficiently}
 merge the colors into a single palette.  Various 
proposed methods are either too simplistic (e.g. single 
container-defined palette) or too slow (e.g. octree or median-cut 
based methods using color histograms).  Our proposed solution is 
O({\i n}
) (for {\i n}
 total colors) and is prototyped in {\b Stage} 
using {\b OCImg}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Compositing via DIBSection/DirectDraw:}
  OC96 allows for off-screen 
composition, but having controls draw into an HDC is insufficient 
(e.g. too slow) for some applications (e.g. when the control is an 
animated sprite).  Our proposed solution is to adopt conventions for 
drawing into off-screen DIBSection or DirectDraw buffers.  We have 
partially prototyped this proposal in {\b Sprite} and {\b HostLW}, 
also using {\b OCImg}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Audio transfer to container:}
  Various controls may produce 
audio (either MIDI-style music or waveform data), which the container 
needs to have control over (e.g. to choose which audio sources to 
mute, which to mix, which to apply effects to, etc.).  Our experience 
with the sibling AudioMan project helps us understand how to solve 
this problem, though no prototyping in this area has been done as 
of 5/96.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Animation event negotiation:}
  When multiple overlapping controls 
are animating, it's important to coalesce the redraw requests in order 
to achieve best performance.  {\b HostLW}, {\b Stage}, and {\b Sprite} 
prototype a simple {\b IAnimate} interface, but a more sophisticated 
"animation event negotion" mechanism is needed (and a first draft has 
been proposed).  We hope the SPAM animation team can help us here.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Nested windowless conainers:}
  Certain multimedia applications 
require that a container of windowless controls itself be windowless 
(and enabled for DIBSection/DirectDraw compositing) since an HWND 
gets in the way of compositing.  OC96 leaves some issues (e.g. 
activation sequence, grab handle drawing) ambiguous in this case; 
{\b Stage} prototypes this concept.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Design-time/run-time segmentation:}
  The design-time (authoring) 
features of a control are not needed during run-time, and we don't want 
Internet end users to have to download any unnecessary code (or enable 
features they didn't pay for), so it's important to allow for separate 
design-time and run-time versions of control DLLs.  Forms3 has 
recently proposed a solution; we will likely be the first to try 
it out.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Design-time UI:}
  Our controls need to be able to provide a rich 
design-time (authoring) user interface.  For example, the {\b Line} 
sample allows the author to drag and resize the line or its endpoints, 
as well as displaying context menu items and a property page.  Some 
of these features are not yet fully enabled in the OC96 spec.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For more information about how we've addressed these issues, see 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 1.3. Lessons Learned (So Far)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 MM Controls has been very much a hands-on, "try by doing" project. 
We started with the idea of seeing how far we could stretch OC96, understanding 
that we may have to "stretch" the rules to meet our goals.\par 

So far, this is what we learned:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i OC96 (mostly) works!}
  It's true we had to extend the OC96/ActiveX 
rules a bit see {\b 1.2. MM Controls Requirements Beyond ActiveX}
 and 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
, 
but for the most part OC96 appears to be a well-designed architecture 
that allows for the kind of subsetting and supersetting we need. 
As a result, our controls are valid ActiveX controls, though to get 
some features you need to use them in an enhanced container 
(such as {\b HostLW} or {\b OCTest}
).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Very small ActiveX controls are possible.}
  By paying careful 
attention to what functionality is required and what can be left out, 
we've written some very small controls.  Our smallest is TinyAuto, 
which is under 10KB without using any helper DLLs (including the 
C runtime).  Our other controls use a 30KB helper DLL ({\b OCHelp}
) to 
achieve small size with much richer functionality than TinyAuto; 
these controls can be as small as 10K.  The memory footprint of these 
controls tends to be small as well -- most of them are windowless.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i High performance compositing is possible with windowless controls.}
 
For example, {\b Sprite} directly manipulates the container's frame 
buffer (when asked to draw) without knowing any specific details about 
the container, and by this method it appears that {\b Sprite} can be 
made as fast as any component with hard-codeded intimate knowledge of 
its container.  In other words, packaging a component as an ActiveX 
controls doesn't introduce any significant performance penalties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i more to come...}
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 1.4. Related Efforts\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following projects at Microsoft are similar or related to 
MM Controls:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ActiveX Controls And Containers:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Sweeper:}
  Owns the Internet Explorer browser, and the 
Internet Control Pack, as well as all Internet-related underlying 
system technologies.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For more information, see {\b http://ohserv/}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i Forms3 ("forms cubed"):}
  Owns the future (IE5?) HTML browser & 
editor technology, as well as 2D layout container(s).  Hopefully, 
{\b Stage} will be replaced entirely by a future version of the 
Forms3 form container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For more information, see {\b http://forms3/}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Writing ActiveX Controls:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i MFC (Microsoft Foundation Classes):}
  Like the MM Controls SDK, 
MFC provides a way to write ActiveX controls.  Currently MFC supports 
only windowed (not windowless) controls.  MFC controls can be 
relatively small (though not as small as a control developed using the 
MM Controls SDK), though the MFC support DLL and memory footprint are 
signficantly larger.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For more information, see Visual C++.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i MarcWan/Sweeper Base Control:}
  Provides C++ base classes for 
developing ActiveX controls.  Controls are relatively small, though 
the "housekeeping" functionality is not currently pulled out into a 
separate DLL, so a set of controls using this base control may be 
larger than a set created using the MM Controls SDK.  On the other 
hand, the Sweeper Base Control pretty much defines correct control 
behavior.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For more information, see {\b http://ohserv/}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i ATL (ActiveX Template Library):}
  Provides C++ class templates 
for developing controls.  Control size and cababilities are similar 
to the Sweeper Base Control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For more information, see {\b http://ohserv/}
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 2. Using The MM Controls SDK\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.1. Setting Up The SDK\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.2. Building Samples\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.3. Building The SDK\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.4. Using OCTest (ActiveX Control Test Container)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.5. Using OCAuthor (VB-Based ActiveX Control Test Container)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.6. Support, Feedback, More Information\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 2.1. Setting Up The SDK\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To set up the MM Controls SDK, run 
{\b file://imt/drop/mmctl/current/setup.exe}
.\par 

If you just want to set up the controls, helper DLLs, and test application, 
and you don't need the entire SDK, run 
{\b file://imt/drop/mmctl/current/setup.exe}
.  (This will install 
enough components to run MM Controls demos.)\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 2.2. Building Samples\par 
\pard\plain \s93\sl240 \fs21\lang1033 
Currently, the sample ActiveX controls and containers assume you are using 
VC4 (Microsoft Visual C++ 4.0).\par 

There are no special environment variables etc. you need to set up to use 
the MM Controls SDK, since each dependent header file, .lib file, etc. 
is referred to by a releative pathname instead of assuming a particular 
INCLUDE path.  However, it's a good idea to do an Update All Dependencies 
in VC4 on any project before building that project for the first time.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 2.3. Building The SDK\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The MM Controls SDK components are pre-built, and the .pdb files are 
provided for debugging, so normally the information in this section is not 
necessary.  The source code of the MM Controls SDK is provided primarily as 
a debugging aid.  However, should you need to (e.g. to test a new 
compiler -- forking the code is not a good reason!) it's possible to build 
the SDK from the provided source code:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab As with the samples, the SDK assumes VC4.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The makefile in the root of the MM Controls SDK builds all components; 
see the comments in the makefile for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Note that in order to build {\b OCImg}
, you need to have the MKImg20 
project enlisted in a peer directory of the MMCtl directory (so both 
directories have the same parent), since {\b OCImg}
 makes use of the 
MKImg20*.lib static link libraries.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 2.4. Using OCTest (ActiveX Control Test Container)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
OCTest is a simple Windows application that internally uses the {\b SiteLW} 
object provided in the {\b OCMisc}
 helper library (part of the MM Controls SDK) 
to contain a single OLE/ActiveX control.\par 

For more information, see {\b OCTest}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 2.5. Using OCAuthor (VB-Based ActiveX Control Test Container)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b OCAuthor}
 is a simple Visual Basic application provided to demonstrate 
the usage of the {\b OCEdit} control.  {\b OCAuthor}
 operates in much the 
same way as {\b OCTest}
.\par 

For more information, see {\b OCAuthor}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 2.6. Support, Feedback, More Information\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b For more information:}
 {\b http://consweb/tech/mmctl/}
.\par 

Your feedback is important to us!  We can't achieve our goals unless we know 
how well our technology and prototypes apply to a variety of application types, 
so we're particularly interested in knowing how MM Controls works (or doesn't 
work) for you.  To provide feedback, {\b mailto:MMCtl}
 or 
{\b mailto:Ericle}
.\par 

To report bugs, {\b mailto:MMCtl}
.\par 

To receive status reports about MM Controls, you can join the MMCtl alias. 
To do so, {\b mailto:EricLe}
 and ask to be added to the MMCtl alias.\par 

You can also access our RAID bug database: 
{\b file://imt/drop/mmctl/mmctlro.rdq}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3. SDK Part A: The Theatre Control Ensemble\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.1. Introduction\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.2. Stage Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.3. Sprite Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.4. HostLW Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.5. ABAuto (Audio Mixer) Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.6. Animate Control (Coming Soon)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.7. Theatre Control (Coming Soon)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
3.8. OCEdit Control\par 
\pard\plain \par
\pard\plain \par
\pard\plain \sa160\sl240 \fs21\lang1033 {\b See Also:}
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.4. Using OCTest (ActiveX Control Test Container)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
2.5. Using OCAuthor (VB-Based ActiveX Control Test Container)\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.1. Introduction\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 In order to achieve our goal of representing the needs of media-rich 
applications to Sweeper and Forms3, we started working on a prototype control, 
{\b Stage}, which is a windowless control that can contain (and position in 
2D space with z-ordering) other windowless controls.  (The demo version of 
{\b Stage} also supports animation, though eventually all animation support 
will move to a separate {\b Animate} control.)  We also created {\b Sprite} 
to test bitmap and palette embedding and transparent/translucent blitting 
and {\b HostLW} to allow {\b Stage} to be embedded in IE3 (which doesn't yet 
support windowless controls).\par 

The name "Theatre Control Ensemble" defines the collection of controls 
which comprise our animation-related ActiveX control-based prototyping work.\par 

Before too long it became clear that a subset of the Theatre ensemble can meet 
the needs of a specific application: Sundance '97 (a multimedia electronic 
greeting card application).  In fact, the ideal container for Sundance 
would be the Forms3 control container, but it won't be ready for use by 
Sundance in the time frame needed.  So {\b Stage} will be used initially, 
and then {\b Stage} will be replaced by the Forms3 form object when it's 
ready.\par 

This helps underscore a goal for our controls and containers: they are 
specifically designed to be "pin-compatible" with MS ActiveX standards. 
(We do extend the standards in a few areas where they're lacking; see 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
 
for more information.)\par 

Although Sundance is the driving client for the Theatre ensemble, we are 
willing to allow the control to be used in other applications provided such 
an application can get by being a non-driving client (i.e. having limited 
control over the feature set).  If you're interested in becoming a client 
of MM Controls, please {\b mailto:EricLe}
.\par 

The following sections describe the functionality of each control in detail.\par 

Note that one control, {\b OCEdit}, is a bit of an oddball because it's 
not intended for use in IE3 at all -- rather it's designed to be used in 
Visual Basic, to implement a simple ActiveX control editor much like OCTest.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.2. Stage Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Stage} is a lightweight windowless ActiveX control which is itself 
a container for lightweight windowless controls.  {\b Stage} is analogous 
to a Visual Basic or Forms3 form, in the sense that {\b Stage} contains 
controls.  However, {\b Stage} is a small (under 50KB for non-demo runtime 
version) container, and it supports palette negotiation (via {\b OCImg}
), 
animation event negotiation (see 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
), 
and other animation-related features, and {\b Stage} controls can be 
nested arbitrarily.\par 

For more information, see: {\b Stage}.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.3. Sprite Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Sprite} is a lightweight windowless ActiveX control which 
displays a multi-frame bitmap and provides a mechanism for cycling 
through the frames to simulate animation.  Parts of the bitmap can be 
transparent, and the bitmap can be displayed at a given 
opacity/translucency level (simulated by drawing an irregular pattern of 
a given percentage of pixels).\par 

For more information, see: {\b Sprite}.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.4. HostLW Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HostLW} is a lightweight windowed ActiveX control which can embed a 
lightweight windowless ActiveX control.  Can be used to allow IE3 to host 
windowless controls.\par 

For more information, see: {\b HostLW}.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.5. ABAuto (Audio Mixer) Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ABAuto} is a lightweight invisible ActiveX control which accesses 
the AudioBoy mixer to allow playing multiple waveform audio files at once.\par 

For more information, see: {\b ABAuto}.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.6. Animate Control (Coming Soon)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b Animate} control has not yet been implemented.  It is planned 
to be the core animation "engine" which drives animation in {\b Stage}. 
(In the current demo version of {\b Stage}, simple animation features are 
temporarily hard-coded into {\b Stage}.)  When used in conjunction with 
the {\b Stage} and {\b Theatre} controls, {\b Animate} will allow a web page 
author to create simple animations using any HTML editor.\par 

If you're interested in {\b Animate}, please {\b mailto:EricLe}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.7. Theatre Control (Coming Soon)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b Theatre} control has not yet been implemented.  It is planned 
to be a high-level easy-to-use animation control.  When used in conjunction 
with the {\b Stage} and {\b Animate} controls, {\b Theatre} will allow a web page 
author to create simple animations using any HTML editor.\par 

{\b Theatre} is currently planned as a demonstration/prototype control, 
not as a pacakaged product.\par 

If you're interested in {\b Theatre}, please {\b mailto:EricLe}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 3.8. OCEdit Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Among controls in the Theatre Control Ensemble, {\b OCEdit} is a bit of 
an oddball because it's not intended for use in IE3 at all.  Instead, {\b OCEdit} 
is designed to be used in Visual Basic, to implement a simple ActiveX control 
editor much like OCTest.\par 

For more information, see {\b OCEdit}.\par 

A sample Visual Basic application, {\b OCAuthor}
, is provided to demonstrate 
the usage of {\b OCEdit}.  For more information, see {\b OCAuthor}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4. SDK Part B: Writing Lightweight Controls & Containers\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.1. Introduction\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2. Writing Controls -- Step By Step\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.3. Sample Controls\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.4. Writing Control Containers\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5. OCHelp Reference\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.6. OCImg Reference\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7. OCMisc Reference\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.1. Introduction\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 As described in {\b 1.1. MM Controls: Introduction And Goals}
, 
one of the goals of the MM Controls is to make it easy to develop very 
lightweight "multimedia-enabled" ActiveX controls.  This section 
describes the following components of the MM Controls SDK designed to 
satisfy these goals:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b OCHelp}
 is a small helper DLL (also available in static-link form) 
that provides the common functionality which many/most controls 
must implement.  By centralizing this functionality in a single 
small DLL, individual controls can be much smaller.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b OCImg}
 is a small DLL that implements certain kinds of 
graphics-intensive operations needed by many "multimedia-enabled" 
controls.  OCImg is actually a subset of the MKImage library, 
packaged as a DLL (instead of as a static-link library) to help 
minimize the amount of code that would need to be downloaded for 
Internet controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b OCMisc}
 is a static-link library of helper functions that 
provide ActiveX control-related functionality that may be useful to 
some containers and/or controls, but isn't likely to be useful to most 
or all controls.  For example, {\b OCMisc}
 provides the {\b SiteLW} 
object, which helps an application or control be an ActiveX control 
container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following sections contain both tutorial-style and reference-style 
information that should help you implement ActiveX controls and containers.\par 

{\b Important:}
 The emphasis of the MM Controls SDK is on {\i windowless}
 
controls and containers, although basic support for {\i windowed}
 controls 
and containers is also provided.  If you find the windowed control/container 
support lacking, please {\b mailto:EricLe}
 -- no promises, but we'd like 
to see if we can help.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2. Writing Controls -- Step By Step\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This section (and the subsections listed below) describe how you can 
implement an ActiveX windowed or windowless control optionally based on the 
{\b OCHelp}
 helper library and one of the minimal sample controls provided in 
this SDK.  The resulting control should be small enough to be downloaded for use 
on HTML web pages.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.1. Getting Started: Creating A Minimal Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.2. Adding Support For Persistence And Simple IDispatch\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.3. Adding Support For Properties And Methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.4. Adding Support For Events\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.5. Adding Support For Accessing Container's Ambient Properties\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.6. Adding Support For Property Pages\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.7. Adding Support For Context Menu Items\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.8. Adding A Control To An Existing DLL\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.9. Other Useful OCHelp Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.A. OCImg -- Helpers For Palette & Bitmap Manipulation\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2.B. OCMisc -- Helpers For Implementing ActiveX Containers\par 
\pard\plain \par
\pard\plain \sa160\sl240 \fs21\lang1033 Any control built by the procedures described in this section is 
implemented in a COM (component object model) self-registering in-process 
server DLL.  The control is (by default) "lightweight" in the sense that a 
subset of ActiveX interfaces may be implemented (and for those interfaces 
that are implemented, a subset of methods may be implemented and others will 
do nothing or return E_NOTIMPL).\par 

A control based on {\b OCHelp}
 should (hopefully) function identically to one 
produced using MFC, ATL, or the Sweeper base control.  The advantage of 
using {\b OCHelp}
 is that it collects common helper functionality into a single 
small DLL (much smaller than MFC) that need be downloaded only once and can 
then be shared among multiple controls.  The emphasis here is primarily on 
making controls very small, and to enable very lightweight windowless controls. 
Another goal is to make controls relatively easy to implement.\par 

Three kinds of controls, described below, can be built following the 
procedures in this section.  For each type of control, one or two "skeleton" 
controls (see the next section) is provided in this SDK -- you can use a 
skeleton control as the basis for a new ActiveX control you implement.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab A {\i lightweight invisible control}
 (also known as an "OLE automation 
server"), like the TinyAuto or MiniAuto skeleton controls.  Such a 
control has no visible appearance, and is typically used to provide 
some kind of service to e.g. VBS code.  This control may be 
embedded in VB4, in HTML (in IE3 and above), in {\b HostLW}, and in 
{\b Stage}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab A {\i lightweight windowless control}
, like the TinyOC skeleton control: 
This control follows the OC96 specifications for windowless controls. 
The control is visible but does not create an HWND to display itself. 
(This allows the control to have transparent or translucent parts, and 
efficiently animate inside an appropriate container such as 
{\b HostLW} or future versons of IE.)  This control may be embedded in 
{\b HostLW} and in {\b Stage}, and in HTML (in IE3 and above) and VB4 
via {\b HostLW}, but such a control cannot be directly embedded in VB4 
and IE3.  Future versions of IE (IE5?) will allow direct embedding of 
windowless controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab A {\i lightweight windowed control}
, like the CircOC skeleton control: 
This is the same type of control produced by the Sweeper ActiveX 
control framework.  The control is visible and uses an HWND to display 
itself.  Such controls may be embedded in HTML (in IE3 and 
above), and in {\b HostLW}, but currently cannot be directly embedded 
in {\b Stage}.  In theory, CircOC can be embedded in VB4, but currently 
that doesn't work because of the excessive demands VB4 places on a 
control (e.g. full type library support), but if VB4 compatibility is 
important to you it's probably possible to add the necessary features.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 All the skeleton controls (and, by default, any control you build 
based on a skeleton control) have the following in common:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The controls have been built using VC 4.0 and tested using Win95. 
They should work on NT as well, but haven't been extensively tested 
on that platform.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab None of the controls requires the C/C++ runtime (either in static-link 
or dynamic-link form) or the MFC runtime.  This is done to keep the 
controls as small as possible.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab All the controls (except those based TinyAuto, described in the next 
section) rely on the {\b OCHelp}
 helper DLL provided in this SDK.  If you 
choose, you can use the static-link version of {\b OCHelp}
 instead, 
so you don't need to rely on the {\b OCHelp}
 DLL.  This will make your 
control larger, but the combined size of your control and the {\b OCHelp}
 
DLL may be smaller.  (Also, in doing so you lose the advantage of 
having {\b OCHelp}
 downloaded only once and shared among multiple 
controls.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 (You might ask: why isn't a {\i base class}
 provided instead of a DLL 
full of {\i helper functions}
?  The reason is that base classes tend to 
assume you want a given fixed set of functionality; {\b OCHelp}
's 
approach is more "a la carte" -- your control's size is only affected 
by functionality you use.  Also, base classes tend to break the controls 
that use them more often than is the case with helper functions, 
because of the complex interdependencies introduced by shared data 
members.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Currently, none of the controls requires the Internet (Sweeper) SDK 
or any of its runtime DLLs (though you can choose to use these features 
if you wish).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab A control may optionally have properties and methods, accessible to 
C++, VBS, VB, and (presumably) Javascript programs.  (Most testing 
to date has been done using VBS.  Some testing has been done using 
VB4.  No testing has been done using Javascript.  This information 
may be out of date -- check with EricLe if this is important to you.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab A control may optionally implement persistence (loading and saving of 
its state) via {\b IPersistPropertyBag} (for text-based persistence, to 
enable properties stored in e.g. HTML <PARAM>) and/or 
{\b IPersistStream} (for binary stream persistence).  If 
{\b AllocPropertyHelper} is used to implement text-based persistence, 
then an {\b IDispatch} implementation is automatically provided that 
allows the same properties initialized via <PARAM> tags to be 
accessed via VBS code.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab A control may optionally fire events to the container, which typically 
causes script code (e.g. a VBS subroutine) in the container to be 
executed.  Note that although lightweight invisible controls may 
fire events which can be used in VBS in IE3 and above, VB4 will ignore 
these events. 
events.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab For testing purposes, the OCTest application can embed all three 
kinds of controls (though currently support for windowed controls 
is limited, and there's not a lot of value in embedding an invisible 
control unless the control supports a property page that you want 
to test).\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.1. Getting Started: Creating A Minimal Control\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This section describes how to create a minimal ActiveX control 
that's a valid working self-registering in-process server but which doesn't 
do very much (yet).  If you already have a control, you can skip this 
section and jump ahead to later sections which describe how to add specific 
features to your control.\par 

First, choose a "skeleton" control on which your control will be based. 
(See the previous section for definitions of, and capabilities of, 
lightweight invisible, windowless, and windowed controls.)  The MM Controls 
SDK contains these skeleton controls you can use (each located in a directory 
with the same name):\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b TinyAuto}
: A lightweight {\i invisible}
 control that doesn't require 
use of the {\b OCHelp}
 DLL.  This control implements a single test 
property ("Foo", which has constant value 42) using {\b IDispatch}. 
This is pretty much the smallest ActiveX control you can build.  Note 
that if you want to add any feature provided by {\b OCHelp}
 these 
instructions assume you will start with MiniAuto instead of TinyAuto.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b MiniAuto}
: A lightweight {\i invisible}
 control similar to TinyAuto, 
but MiniAuto uses {\b OCHelp}
 to help implement events (which can be 
fired to the container).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b TinyOC}
: A lightweight {\i windowless}
 control that displays a single 
small ellipse which can be animated using the experimental {\b IAnimate} 
interface.  (Animation only works when TinyOC is embedded in the OCTest 
application or the {\b HostLW} control -- IE3 currently doesn't 
directly support animation.)  Uses {\b OCHelp}
.  TinyOC is set up to 
build separate design-time and run-time versions of its DLL.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b CircOC}
: A lightweight {\i windowed}
 control similar to the "Circle" 
control provided in the Internet (Sweeper) SDK, except that CircOC 
uses {\b OCHelp}
 instead of the Sweeper base control.  CircOC is set up 
to build separate design-time and run-time versions of its DLL.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 Note that if you're looking for an IE3-compatible full-featured 
windowed control to start from, see the comments about the "FubarOC" 
sample control below.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 (A different approach would be to start with a more full-featured 
control like {\b Line}, rename it and change its GUIDs, and add and remove 
features as needed -- feel free to do this if you think your control will 
need all the features of a control like {\b Line} anyway.  In fact, the 
"FubarOC" sample control is essentially the CircOC skeleton control that 
has had steps 
{\b 4.2.2. Adding Support For Persistence And Simple IDispatch}
, 
{\b 4.2.3. Adding Support For Properties And Methods}
, and 
{\b 4.2.4. Adding Support For Events}
 already applied to it -- if you're 
looking for an IE3-compatible windowed control to start with, FubarOC might 
be the control for you.  However, the instructions below help you understand 
all the parts of a control, including which are optional and can be left out 
if you need the control to be as small as possible.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Once you've chosen a skeleton control, do the following steps:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Choose a control name.  These instructions assume that your control name 
is 8 characters or less for a control based on TinyAuto or MiniAuto, 
or 5 characters or less (replacing the word "Tiny" or "Circ") for a 
control based on TinyOC or CircOC.  You can probably use longer names 
provided you don't use SLM, but this hasn't been tested.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Copy all the skeleton control's files to a new directory (named 
with the name of your control).  These instructions assume that the 
directory is a subdirectory of your "MMCtl" directory (i.e. your 
control's directory is a sibling of the directory containing the 
skeleton control you used).  You can delete tinyaut4.mak, miniaut4.mak, 
and slm.ini from your directory, if present.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Rename each file whose name starts with "TinyAuto" (if based on 
TinyAuto), "MiniAuto" (if based on MiniAuto), "Tiny" (if based on 
TinyOC), or "Circ" (if based on CircOC) so that it starts with 
the name of your control.  For example, if your control is based 
on TinyOC, and your new control's name is "Fubar", rename 
"TinyOC.def" to "Fubar.def" and rename "TinyOC.mak" to "Fubar.mak".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab Using your favorite tool, make the following substitutions in all 
text files in your control's directory (assuming the name of your 
control is "Fubar"):\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\li1200 {\i If based on TinyAuto:}
 change all "TinyAuto" to "Fubar"\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\li1200 {\i If based on MiniAuto:}
 change all "MiniAuto" to "Fubar"\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\li1200 {\i If based on TinyOC:}
 change all "Tiny" to "Fubar"\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li1200 {\i If based on CircOC:}
 change all "Circ" to "Fubar"\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Run guidgen.exe (provided with VC4) and generate a new class ID 
for your control.  The class ID is stored (in two forms) in 
"control.h" in your control's directory.  If there are any .htm 
files in the directory, change the GUID in the <OBJECT> tag 
to the same GUID; in the case of controls based on TinyOC the 
GUID you need to change in test.htm is the "value" attribute 
of the "_embed" <PARAM> tag (because TinyOC is embedded in 
{\b HostLW} in order to allow it to work in IE3).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 If there is a .odl file in the directory (currently only for controls 
based on MiniAuto), the same GUID needs to be used in the "coclass" 
construct.  Also, a new GUID needs to be generated for the top-level 
"library" construct in the .odl file, and a new GUID needs to be 
generated for the dispinterface in MiniAuto.h.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In VC4 (MSDev), use Open Workspace to open the .mak file.  (If you 
have more than one .mak file, you didn't read the directions 
above :-)  Select Build: Update All Dependencies (check all checkboxes) 
and make sure you don't get any errors.  Then, build the control 
using Build: Rebuild All, and make sure the control builds and 
registers correctly.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 You now have a working (but minimal) ActiveX control.  You can test the 
control in OCTest or (using the provided test.htm) in IE3.  (If your control is 
invisible, OCTest works but is relatively pointless because there's nothing to 
see.)  If your control is based on TinyOC, it must be "wrapped" in {\b HostLW} 
(as shown in TinyOC\\test.htm) before being embedded in IE3 since IE3 does not 
support windowless controls.\par 

All the skeleton controls have at least some amount of default functionality 
that you can delete and replace with your own functionality.  Search for 
the string "TODO" to find these places in the code.\par 

TinyOC and CircOC can build separate design-time and run-time versions, 
depending on the project configuration: configurations with "DT" are 
"design-time" (and may include authoring UI etc.); configurations with "RT" 
are "run-time" (and do not include authoring UI).  You'll usually want to 
develop using the DTDebug configuration, since it has debugging information 
and includes all author-time functionality.\par 

If you care, here's a quick look inside your control (so far):\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b dll.cpp}
: Contains the functions that implement a COM in-process 
self-registering server DLL (with some help from {\b OCHelp}
, or 
{\b autohelp.cpp}
 in the case of controls based on TinyOC). 
{\b _DllMainCRTStartup} is called when the DLL loads, unloads, and 
at various other times.  {\b DllRegisterServer} and 
{\b DllUnregisterServer} are called when an application (such as a 
setup program or regsvr32.exe) are used to register or unregister 
your control with the OS (so that your control can be located by 
COM when {\b CoCreateInstance} is called by a user of your control). 
{\b DllGetClassObject} returns S_FALSE if there are any objects 
implemented by your DLL that are currently alive. 
{\b DllGetClassObject} creates an instance of the class factory object 
for your control, which in turn is used to create an instance of your 
control.  Finally, global {\b new} and {\b delete} operators are 
provided so that you don't need the C runtime; note that these 
operators zero-initialize the memory they allocate (to reduce the need 
for unnecessary initialization).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i If based on TinyAuto:}
 {\b autohelp.cpp}
: This is essentially a 
very stripped-down version of {\b OCHelp}
 that contains only the most 
essential functions needed for implementing a class factory, 
control self-registration, etc.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b control.h}
: Declares the C++ object that implements your control. 
This object is based on each interface that the control supports (via 
multiple inheritence).  Controls based on TinyOC or CircOC support 
COM-style aggregation by implementing both a delegating unknown 
(named {\b IUnknown}) and a non-delegating unknown (named 
{\b INonDelegatingUnknown} -- but this is just {\b IUnknown} renamed 
because C++ won't allow a class to inherit the same interface twice).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b control.cpp}
: Defines the C++ object that implements your control. 
Also defines a function named {\b InitAutoObjectInfo} or 
{\b InitControlInfo}, which is called once when your control's DLL 
loads to initialize information about your control.  If you want to 
change information about your control (such as its "friendly name" 
or its ProgID) here's where you do it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b control.odl}
: (If present -- curently only in MiniAuto.) Used to 
generate a type library, which is stored as a resource in the 
control's DLL.  This is for event support (firing events to the 
control's container).  Note that a .odl file is not required for 
supporting properties and methods (if you use {\b OCHelp}
 helper 
functions {\b DispatchHelpGetIDsOfNames} and {\b DispatchGetArgs}).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b purevirt.c}
: Avoids pulling in the C/C++ runtime.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b debug.h}
 and {\b debug.cpp}
: Defines {\b TRACE}, {\b ASSERT}, and 
{\b VERIFY} macros, the same way they're defined in MFC (but without 
calling MFC).  Also defines {\b DebugIIDName} and {\b DebugCLSIDName} 
(see {\b QueryInterface} in control.cpp for an example) which can 
be used to convert a GUID to an interface ID or class ID string. 
These functions are disabled and compile to zero code in a release 
build.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b *.def}
, {\b *.rc}
: The usual.  Note that the .rc file should 
contain a version resource, especially if you want to be able to 
use the IE3 downloadable code feature.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b For more information:}
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.2. Writing Controls -- Step By Step\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.2. Adding Support For Persistence And Simple IDispatch\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This section describes how your control can use 
{\b AllocPropertyhelper} load property values from an HTML page or a binary 
stream.  Saving is also supported (if the container supports it -- note that 
IE3 doesn't allow saving, but OCTest does).  Also, {\b AllocPropertyHelper} 
provides a "free" (simple) implementation of {\b IDispatch} that allows e.g. 
VBS scripts to access each of the properties exposed by your object. 
(See {\b 4.2.3. Adding Support For Properties And Methods}
 for 
information about how to implement methods as well as properties on your 
control.)\par 

{\b AllocPropertyHelper} works like this: when your control is created, you 
call {\b AllocPropertyHelper} to create a {\b PropertyHelper} object (which 
is aggregated with your control).  In your control's {\b QueryInterface} 
function, you pass requests for {\b IPersistStream}, {\b IPersistStreamInit}, 
{\b IPropertyBag}, and {\b IDispatch} onto {\b AllocPropertyHelper}.  You also 
need to make your control support the helper interface {\b IPersistVariantIO}; 
inside the {\b IPersistVariantIO::DoPersist}
 function you provide the names 
of, and pointers to, all your control's properties, like this:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CFubarOC::DoPersist(IVariantIO* pvio, DWORD dwFlags)\par 

        \{\par 

            HRESULT         hr;\par 

\par 

            // load or save control properties\par 

            if (FAILED(hr = pvio->Persist(0,\par 

                    "Name", VT_LPSTR, &m_achName,\par 

                    "Height", VT_INT, &m_iHeight,\par 

                    "Married", VT_BOOL, &m_fMarried,\par 

                    NULL)))\par 

                return hr;\par 

\par 

            // if any properties changed, redraw the control\par 

            if ((hr == S_OK) && (m_poipsw != NULL))\par 

                m_poipsw->InvalidateRect(NULL, TRUE);\par 

\par 

            // clear the dirty bit if requested\par 

            if (dwFlags & PVIO_CLEARDIRTY)\par 

                m_fDirty = FALSE;\par 

\par 

            return S_OK;\par 

        \}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example assumes that the control's C++ class contains member 
variables named "m_achName" (a character array used as a string), "m_iHeight" 
(an int), and "m_fMarried" (a BOOL).  {\b DoPersist} is called by 
{\b PropertyHelper} in the following circumstances:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab When your control is first loaded.  The value of each property will 
be stored in the associated member variable by the call to 
{\b IVariantIO::Persist}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab When your control is saved.  The value of each property will be 
copied from each member variable and saved (to a binary stream or a 
text-based "property bag") using the associated property name.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab When a property of your control is accessed via {\b IDispatch} 
(e.g. VBS script like "fubar.Height = 5" or "x = fubar.Height"). 
In this case only the member variable associated with the specified 
property is read or written; the others are ignored.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PropertyHelper} provides file format "version safety": if you 
use a newer control with older property data, or vice versa, your control 
shouldn't crash.  The reason is that, assuming you initialize all your 
member variables to reasonable default values, then during loading:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab if the data file contains properties that your control doesn't list 
in the {\b IVariantIO::Persist}
 call, the properties are simply ignored, 
and\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab if the control lists a property that isn't in the data file, the 
property is skipped (so it contains its default value).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This is safer (and easier) than loading or saving a structure 
containing control data.\par 

To add {\b PropertyHelper} support to your control, do the following.  These 
steps are illustrated by the example in {\b AllocPropertyHelper}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, add member variables named {\i m_fDirty} (a BOOL) 
and {\i m_punkPropHelp} (an LPUNKNOWN) to your control's C++ class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, make your control's C++ class be based on 
{\b IPersistVariantIO}, and declare the methods of {\b IPersistVariantIO} 
within the body of the class (you can copy them from the example 
in {\b AllocPropertyHelper}).  In e.g. control.cpp, you also need to 
return {\b IPersistVariantIO} from your {\b QueryInterface} 
(or {\b NonDelegatingQueryInterface}) function.  Also, you need to 
write the methods of {\b IPersistVariantIO}: you can implement 
{\b IPersistVariantIO::DoPersist}
 as shown above; you can return 
E_NOTIMPL for {\b IPersistVariantIO::InitNew}
; you can return 
({\i m_fDirty} ? S_OK : S_FALSE) for {\b IPersistVariantIO::IsDirty}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.cpp, call {\b AllocPropertyHelper} in your constructor 
and save the returned pointer in {\i m_punkPropHelp}.  In your 
destructor, call {\i m_punkPropHelp}->{\i m_punkPropHelp} (if 
non-NULL).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.cpp, in your {\b QueryInterface} (or 
{\b NonDelegatingQueryInterface}) function, call 
{\i m_punkPropHelp}->{\b QueryInterface} in response to queries for 
{\b IPersistStream}, {\b IPersistStreamInit}, {\b IPropertyBag}, and 
{\b IDispatch} (or in response to any unknown interface, as shown in 
the example in {\b AllocPropertyHelper}).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To test persistence, run OCTest and create an instance of your 
control, then do File: Save As to save the control's data in CSV or HTML 
format.  Alternatively, run OCTest and open the supplied "test.htm" file; 
then do File: Save, which should rewrite test.htm with the new properties 
added as <PARAM> tags.\par 

***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.3. Adding Support For Properties And Methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Section 
{\b 4.2.2. Adding Support For Persistence And Simple IDispatch}
, 
describes how you can get "free" properties using {\b AllocPropertyHelper}; 
this section explains how you can add arbitrary properties and methods 
to your control.\par 

{\b OCHelp}
 supports {\i late-bound}
 properties and methods by helping you 
implement {\b IDispatch::GetIDsOfNames}
 and {\b IDispatch::Invoke}
 in your 
control; this method does not provide type information via 
{\b IDispatch::GetTypeInfoCount}
 and {\b IDispatch::GetTypeInfo}
.  This 
means that {\b OCHelp}
 does not directly provide support for implementing 
"dual interfaces" (which allow for both {\i early-bound}
 and {\i late-bound}
 
access).  It's important to understand that {\b OCHelp}
 does not {\i preclude}
 
you from implementing dual interfaces -- you simply need to create a .odl 
file and call {\b CreateStdDispatch} when any of your {\b IDispatch} functions 
is first called, and then forward that and future {\b IDispatch} calls to 
the {\b StdDispatch} object.\par 

(If you're wondering why {\b OCHelp}
 took the late-bound approach: the reason is 
that this approach reduces the size, complexity, and memory footprint of a 
simple control, since no .odl file need be created and the standard type 
library-based {\b IDispatch} object doesn't need to be loaded in memory. 
Also, we think {\b OCHelp}
's approach implements a faster {\b IDispatch}, though 
we haven't tested this extensively.  The major drawback is that {\b OCHelp}
's 
approach doesn't allow for early-bound function calls, which would be even 
faster than {\b OCHelp}
's {\b IDispatch} support, but we felt that the speed of 
script code was less importnat for controls intended for the HTML web pages, 
which is {\b OCHelp}
's primary target.  Also, VBS currently doesn't even support 
early-bound function calls, so the advantage of a dual interface is lost in 
this case anyway.  Finally, controls like {\b Line} provide an interface like 
{\b ILineOC}, which are even more efficient for C++ programs to access than 
the most efficient dual interfaces, because {\b ILineOC} transfers data in 
structure form rather than as individual properties.)\par 

Also, if you already (or plan to) implement property bag persistence using 
the method described section 
{\b 4.2.2. Adding Support For Persistence And Simple IDispatch}
, 
see that section for more information about the "free" {\b IDispatch} 
property support you get.  (If you want to use both the {\b IDispatch} 
provided by {\b AllocPropertyHelper} and custom extra properties and methods, 
just call the {\b IDispatch} returned by {\b AllocPropertyHelper} in your 
{\b IDispatch::GetIDsOfNames}
 and {\b IDispatch::Invoke}
 functions instead 
of returning DISP_E_UNKNOWNNAME or DISP_E_MEMBERNOTFOUND.)\par 

To add {\b IDispatch} support to your control, do the following.  These 
steps are illustrated by {\b IDispatch} methods in MiniAuto\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, make your control's C++ class be based on 
{\b IDispatch}, and declare the methods of {\b IDispatch} 
within the body of the class (you can copy them from 
MiniAuto\\control.h).  In e.g. control.cpp, you also need to 
return {\b IDispatch} from your {\b QueryInterface} 
(or {\b NonDelegatingQueryInterface}) function.  Also, you need to 
write the methods of {\b IDispatch} -- for now, copy the methods from 
MiniAuto\\control.cpp -- the instructions below expain how to 
modify {\b IDispatch::Invoke}
.  (For more information about how 
{\b IDispatch::GetIDsOfNames}
 works, see the {\b OCHelp}
 function 
{\b DispatchHelpGetIDsOfNames}, though you shouldn't need to modify 
the default implementation copied from MiniAuto.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, define DISPID_ constants corresponding to each 
of the methods and properties you want to define.  You also need to 
define METH_PROP_NAMES to contain a list of property & method names, 
corresponding to the DISPID_ values, with each name terminated by 
'\\n'.  For an example, see the definition of DISPID_* and 
METH_PROP_NAMES in MiniAuto\\MiniAuto.h.  (Note that this example 
leaves DISPID zero unused, since it has special meaning.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.cpp, in your defininition of {\b IDispatch::Invoke}
, 
follow the example shown in the {\b Invoke} function copied from 
MiniAuto, and define one {\b case} in the {\b switch} statement for each 
property or method you want to implement.  A given {\b case} will 
be executed whenever e.g. VBS script code accesses (reads, writes, or 
calls) that property or method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 {\b OCHelp}
 helps you with one aspect of the implementation of 
{\b Invoke}: "parsing" the arguments and coercing them to the desired 
parameter types.  To do this, call {\b DispatchGetArgs}.  For example 
"DispatchGetArgs({\i pdispparams}, 0, VT_INT, &{\i m_iFoo}, 0)" 
will assume that {\i pdispparams} (passed to {\b Invoke}) contains 
a single argument, which is coerced to type "int" and stored 
in variable {\i m_iFoo}.  Note that VT_INT in this example refers to 
the type of {\i m_iFoo} -- the actual passed argument can be of any 
type that can be coerced to VT_INT.  See {\b DispatchGetArgs} for more 
information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If you need to return a string from a property or method call, the 
{\b OCHelp}
 function {\b VariantFromString} may help.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To test {\b IDispatch} support, you can write VBS code as shown in 
MiniAuto\\test.htm.  In the case of controls based on TinyAuto or MiniAuto, 
you can also test the control in VB4, by loading the control using 
VB's "CreateObject" function and accessing properties and methods through 
a VB variable of type Object.\par 

***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.4. Adding Support For Events\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A control can notify its container (e.g. an HTML page) that an 
event has occurred.  This is done by having the control "fire" an event, 
which just means that the control calls a function provided by the 
container (typically in the container's code, e.g. VBS script).  {\b OCHelp}
 
helps a control implement support for firing events, including implementation 
of {\b IProvideClassInfo}, {\b IConnectionPointContainer}, {\b IConnectionPoint}, 
and (via OLE automation helper functions) {\b ITypeLib} and {\b ITypeInfo}.\par 

{\b Note:}
 As of 5/96, event support does not work for windowless 
controls embedded in IE3 via {\b HostLW} and/or {\b Stage}, because {\b HostLW} 
and {\b Stage} do not yet implement event transfer.  This information may be 
out of date -- if you need event support in a windowless control, 
contact EricLe to get current information.\par 

To add event support to your control, do the following.  These 
steps are illustrated by MiniAuto\\control.odl, MiniAuto\\MiniAuto.h, 
MiniAuto\\control.h, and MiniAuto\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, make your control's C++ class be based on 
{\b IConnectionPointContainer}, and declare the methods of 
{\b IConnectionPointContainer} within the body of the class (you can 
copy them from MiniAuto\\control.h).  In e.g. control.cpp, you also 
need to return {\b IConnectionPointContainer} from your 
{\b QueryInterface} (or {\b NonDelegatingQueryInterface}) function. 
Also, you need to implement the methods of 
{\b IConnectionPointContainer} -- but you can just copy the default 
implementation from MiniAuto\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 In e.g. control.h, declare a member variable {\i m_pconpt} of type 
"IConnectionPointHelper *" in your control's C++ class.  In e.g. 
control.cpp, call {\b AllocConnectionPointHelper} (as shown in 
MiniAuto\\control.cpp) in your C++ class's constructor to initialize 
{\i m_pconpt}, replacing "MiniAuto" with the name of your control 
(e.g. "FubarOC").  Also, call {\b FreeConnectionPointHelper} in your 
destructor to free {\i m_pconpt}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, make your control's C++ class be based on 
{\b IProvideClassInfo}, and declare the method of {\b IProvideClassInfo} 
within the body of the class (you can copy them from 
MiniAuto\\control.h).  In e.g. control.cpp, you also need to 
return {\b IProvideClassInfo} from your {\b QueryInterface} 
(or {\b NonDelegatingQueryInterface}) function.  Also, you need to 
implement {\b IProvideClassInfo::GetClassInfo}
 -- but you can just 
copy the default implementation from MiniAuto\\control.cpp 
(and simply change CLSID_CMiniAuto to the class ID of your control). 
(For more information about how {\b IProvideClassInfo::GetClassInfo}
 
works, see the {\b OCHelp}
 function {\b HelpGetClassInfoFromTypeLib}, 
though you shouldn't need to modify the default implementation copied 
from MiniAuto.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, define DISPID_EVENT_ constants corresponding to each 
of the events want to define.  For an example, see the definition of 
DISPID_EVENT_* in MiniAuto\\MiniAuto.h.  (Note that this example 
leaves DISPID zero unused, since it has special meaning.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In e.g. control.h, create a new GUID (using guidgen.exe) corresponding 
to DIID_DFubarOCEvents, replacing "FubarOC" with the name of your 
control.  This should look like the definition of 
_DIID_DMiniAutoEvents and DIID_DMiniAutoEvents in MiniAuto\\MiniAuto.h.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Create a "control.odl" file that's initially a copy of 
MiniAuto\\control.odl.  Change #include "MiniAuto.h" to #include 
"control.h".  Replace all other occurrences of "MiniAuto" with the 
name of your control (e.g. "FubarOC").  Use guidgen.exe to generate 
a new GUID that replaces the GUID above the "library" line. 
Replace the list of "methods:" with your control's actual events; 
the "id()" values must be DISPID_EVENT_ constants as described above. 
Add the control.odl file to your VC4 project (via Insert Files Into 
Project).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Since you're #include-ing "control.h" into your .odl file, you need 
to ensure that anything in your "control.h" other than #define 
statements is surrounded by "#ifndef __MKTYPLIB__ ... #endif". 
This includes statements like DEFINE_GUID(...), but not 
#define _CLSID_... .\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If your control doesn't yet have any resources, create an empty 
resource script as follows in VC4: click File, New, Resource Script, 
OK.  Save the resource script (e.g. to "resource.rc").  Click Window, 
Close All.  Use Insert Files Into Project to add your resource script 
to your project.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In VC4, select View Resource Includes, and in the "Compile-time 
directives" box type the following:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 1 TYPELIB "control.tlb"\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 This makes the type library file generated from control.odl be 
linked into your control's DLL as a resource.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In the .cpp file (e.g. dll.cpp) that contains "#include 
<initguid.h>", add "#include <olectlid.h>" {\i after}
 
<initguid.h>.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Anywhere in your code where you want to fire an event, simply call 
{\i m_pconpt}->{\b FireEvent}, which calls 
{\b IConnectionPointHelper::FireEvent}
.  For example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 m_pconpt->FireEvent(DISPID_EVENT_BAR, VT_INT, i,\par 

            VT_LPSTR, ach, VT_BOOL, f, 0);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 This will invoke the event identified by DISPID_EVENT_BAR, passing 
parameters {\i i}, {\i ach}, and {\i f}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To test event support, you can write VBS event processing subroutines 
(like the "Bar(i, sz, f)" example above) as shown in MiniAuto\\test.htm. 
As of this writing, event support has not been tested in VB4; if it works, 
it will only likely work for controls based on CircOC (and, eventually, maybe, 
windowless controls embedded in HostLWOC).\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.5. Adding Support For Accessing Container's Ambient Properties\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 An "ambient property" is a property (accessible via 
{\b IDispatch::Invoke}
 typically using special predefined DISPID_ constants with 
negative value) that is defined on the site object that contains a given 
control.  Examples of ambient properties are DISPID_AMBIENT_PALETTE (which 
is the color table used by the container) and DISPID_AMBIENT_USERMODE 
(which indicates whether the container is in "design" mode or "run" mode).\par 

To access a container ambient property, a control must call {\b QueryInterface} 
on the {\b IOleClientSite} pointer (passed to {\b IOleObject::SetClientSite}
) 
to acquire a pointer to the {\b IDispatch} interface on the site object.\par 

The container notifies the control of changes in the value of an ambient 
property by calling {\b IOleControl::OnAmbientPropertyChange}
, passing either 
the DISPID of the ambient property whose value has changed, or 
DISPID_UNKNOWN which means that any or all ambient properties may have 
changed.\par 

To add ambient property access to your control, do the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If your control does not yet support {\b IOleObject}, do the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 In e.g. control.h, make your control's C++ class be based on 
{\b IOleObject}, and declare the methods of {\b IOleObject} within 
the body of the class (you can copy them from LineOC\\control.h). 
In e.g. control.cpp, you also need to return {\b IOleObject} from your 
{\b QueryInterface} (or {\b NonDelegatingQueryInterface}) function. 
Also, you need to implement the desired methods of {\b IOleObject}; 
you can copy a sample implementation from LineOC\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 You can return E_NOTIMPL from most {\b IOleObject} methods.  The 
methods you may want to implement are:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b SetClientSite}: Called by the container to pass you a pointer 
to the container's client site.  See LineOC\\control.cpp for an 
example.  You need to declare as member variables any pointers 
you want to maintain on the client site.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b DoVerb}: For visible controls, {\b DoVerb} is called by the 
container to request that your control switch states.  For 
example, {\i iVerb}==OLEIVERB_UIACTIVATE indicates that the 
container wants your control to "UI-activate" (which means e.g. 
acquiring keyboard focus, perhaps because the user tabbed to 
your control).  {\b DoVerb} is also called in response to 
selection of right-mouse context menu items, as described in 
section {\b 4.2.7. Adding Support For Context Menu Items}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b EnumVerbs}, {\b GetUserType}: Also required for supporting 
right-mouse context menu items.  Both can be implemented using 
helper functions, as demonstrated by LineOC\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b GetMiscStatus}: Tells the container things like whether or not 
your control wants to be activated whenever it is visible. 
See the example in LineOC\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For the purposes of adding support for accessing container ambient 
properties, you only need to implement {\b IOleObject::SetClientSite}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If your control does not yet support {\b IOleControl} and you want 
to be notified of ambient property changes, do the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 In e.g. control.h, make your control's C++ class be based on 
{\b IOleControl}, and declare the methods of {\b IOleControl} within 
the body of the class (you can copy them from LineOC\\control.h). 
In e.g. control.cpp, you also need to return {\b IOleControl} from your 
{\b QueryInterface} (or {\b NonDelegatingQueryInterface}) function. 
Also, you need to implement the desired methods of {\b IOleControl}; 
you can copy a sample implementation from LineOC\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 You can return E_NOTIMPL from all methods of {\b IOleControl} but 
in order to receive notification of ambient property changes you 
should implement {\b IOleControl::OnAmbientPropertyChange}
.  See 
LineOC\\control.cpp for an example; this function uses the {\b OCHelp}
 
function {\b DispatchPropertyGet} to retrieve the actual ambient 
property value.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To test ambient property access, load your control into OCTest. 
When you switch from design mode to run (or "preview") mode, your 
control's {\b IOleControl::OnAmbientPropertyChange}
 should be called, and 
you can check the value of ambient property DISPID_AMBIENT_USERMODE to 
see if OCTest is in design mode (zero) or run mode (nonzero).\par 

Similarly, OCTest changes the value of DISPID_AMBIENT_PALETTE whenever 
the ambient palette changes; see {\b IOleControl::OnAmbientPropertyChange}
 
in PalOC\\control.cpp for an example.\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.6. Adding Support For Property Pages\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 In containers (like OCTest) that allow authoring (i.e. that enable 
"design mode"), a control's properties may be edited by a user using one or 
more "property pages" provided by the control.  For example, run OCTest 
and create a new {\b Line} control, then right-click on the line and select 
"Properties...".\par 

A property page (like the one labelled "Line" in the above example) is really 
a simple invisible ActiveX control.  "Invisible," you ask?  Yes -- although 
the property page itself is visible, the ActiveX control that implements the 
property does not implement {\b IViewObject} or any HWND.  Instead, it only 
implements {\b IPropertyPage}, which contains an {\b Activate} method which 
is used to ask the property page to create a child window containing a 
dialog box.  It's this dialog box that you actually see in the "Line" 
property page in the example above.  (The window that contains one or more 
pages, as well as OK, Cancel, and Apply buttons, is called a "property frame".)\par 

{\b OCHelp}
 simplifies the task of implementing a property page for your control: 
much of the "housekeeping" work of maintaining the property page is done 
by {\b OCHelp}
's {\b PropPageHelper} object, allocated using 
{\b AllocPropPageHelper}.  Since property pages are normally available only in 
the design-time version of a control, you may choose to enclose all 
property-page related code in "#ifdef _DESIGN ... #endif", as shown in LineOC.\par 

To add a property page to your control, do the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If your control does not yet support {\b ISpecifyPropertyPages}, do the 
following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 In e.g. control.h, make your control's C++ class be based on 
{\b ISpecifyPropertyPages}, and declare the methods of 
{\b ISpecifyPropertyPages} within the body of the class (you can copy 
them from LineOC\\control.h).  In e.g. control.cpp, you also need to 
return {\b ISpecifyPropertyPages} from your {\b QueryInterface} (or 
{\b NonDelegatingQueryInterface}) function.  Also, you need to 
implement {\b ISpecifyPropertyPages::GetPages}
, but you can simply 
copy the sample implementation from LineOC\\control.cpp (changing 
"CLSID_CLinePP" to a new class ID for your property page, e.g. 
"CLSID_CFubarPP" if your control is named "Fubar").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Copy LineOC\\proppage.cpp and LineOC\\proppage.h to your control's 
directory.  Change all occurrences of "Line" to the name of your 
control (e.g. "Fubar") -- the class ID name of the property page in 
proppage.h should match that specified in 
{\b ISpecifyPropertyPages::GetPages}
 (above).  Use guidgen.exe to 
change the value of the class ID in proppage.h.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab When the property page is displayed, the property page object 
(e.g. FubarPP, defined in proppage.cpp) needs to have a way to 
communicate with the objects it is operating upon (e.g. FubarOC, 
defined in control.cpp).  "Objects" is plural because in theory 
a single property page may operate on a multiple selection, though 
many containers don't support this.  To accomplish this communication, 
you need to define a private interface (e.g. {\b IFubarOC}) on your 
control (e.g. FubarOC) that FubarPP can talk to.  (Careful: don't 
assume you can cast an interface pointer back to a pointer to 
CFubarOC -- it won't work.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 LineOC's private interface is called {\b ILineOC}, and is declared in 
LineOC\\LineOC.h.  The interface is very simple: {\b ILineOC::GetInfo}
 
retrieves a structure containing data (attributes) from the control, 
and {\b ILineOC::SetInfo}
 gives the control new data (attributes). 
In addition to supporting property pages, this interface serves a 
second purpose: it's an efficient way for C++ programs to access 
the functionality of the object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 You need to define an interface like {\b IFubarOC}, and if you haven't 
already you should probably define a .h file (like FubarOC.h) to 
contain "public" definitions.  (On the other hand, control.h contains 
definitions private to your control's DLL.  FubarOC.h would need to 
be #included by any C++ program that wants to access {\b ILineOC}.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In VC4, create a dialog box resource that contains the property page 
(see LineOC for an example).  Make the ID of the property page be 
IDD_PROPPAGE.  Also, define a string resource that contains the name 
of the control to be used on the property page's tab (e.g. "Fubar"), 
and make the ID of that string resource be IDS_PROPPAGE.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab In proppage.cpp, take a look at {\b FubarPPDialogProc}.  This is the 
dialog box procedure that implements your property page.  This is 
pretty much an ordinary dialog box procedure, except that:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\tx1200\fi-360\li1200\emdash\tab you get extra {\b PropPageHelperInfo} * and HRESULT * parameters, and\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\tx1200\fi-360\li1200\emdash\tab you never call {\b EndDialog}, and\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab you receive a WM_PPH_APPLY message when the user hits the "Apply" 
button.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 In WM_INITDIALOG, you get information from the {\b PropPageHelperInfo}, 
including a list of pointers to {\b IFubarOC} interfaces, one pointer 
for each object that the property sheet is operating on, and you 
copy data from these control(s) into your property sheet dialog.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 Similarly, when WM_PPH_APPLY is received, data is copied from the 
property sheet dialog into {\b IFubarOC}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Finally, in order to add the property page object to the list of 
ActiveX objects implemented by your control's DLL, edit e.g. dll.cpp 
or control.cpp (wherever the {\b ControlInfo} structure or array is 
initialized).  If you curently have a single {\b ControlInfo} 
structure (e.g. {\i g_ctlinfo}), change it to an array of two 
elements (e.g. ControlInfo {\i g_actlinfo}[2]).  If it's already an 
array, make it one element larger.  Add the property page object 
to the end of the array as shown in LineOC\\dll.cpp; make sure to 
"link" the previous item of the array to the new last item in the 
array, as shown (by filling in the {\i pNext} field of the previous 
item to point to the new last item which contains information about 
CFubarPP).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To test your property sheet, load your control into OCTest and 
select File: Properties.\par 

***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.7. Adding Support For Context Menu Items\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Some containers (like OCTest) implement context menus on controls 
For example, run OCTest and create a new {\b Line} control, then right-click 
on the line.  The "Close", "Save", and "Properties..." menu items are 
implemented by OCTest; the "Straighten" menu item is a custom command or 
"verb" implemented by the {\b Line} control.  A control can have any number 
of context menu items (though it should probably only have a few, else the 
context menu will become too long).\par 

Coontext menu items probably don't make sense for invisible controls.\par 

Since context menu items are often available only in the design-time version 
of a control, you may choose to enclose all property-page related code 
in "#ifdef _DESIGN ... #endif", as shown in LineOC.\par 

To add context menu support to your control, do the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If your control does not yet support {\b IOleObject}, implement 
{\b IOleObject} as described in section 
{\b 4.2.5. Adding Support For Accessing Container's Ambient Properties}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For the purposes of adding context menu support, you need to 
implement {\b IOleObject::EnumVerbs}
 and {\b IOleObject::GetUserType}
. 
Both can be implemented using helper functions, as demonstrated by 
LineOC\\control.cpp.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 You also need to implement {\b IOleObject::DoVerb}
, as demonstrated by 
LineOC\\control.cpp.  When the user selects the first verb from the 
right-click context menu, {\b DoVerb} is called with {\i iVerb}==0; 
the second verb has {\i iVerb}==1, and so on.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab For each verb you want to add, create a string resource formatted 
like the IDS_VERB_STRAIGHTEN string in LineOC.  Verbs should have 
consecutive string ID numbers (e.g. 100, 101, 102, ...) and the 
number to the left of the "=" in the string itself should be 
consecutively numbered starting from 0 (e.g. "0=Straighten,0,2", 
then "1=Set Color...,0,2", etc.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In dll.cpp or control.cpp (wherever you initialize the control's 
{\b ControlInfo} structure), set the {\i uiVerbStrID} to the ID of the 
first string resource created above.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To test your context menu items, load your control into OCTest and 
right-click on it.\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.8. Adding A Control To An Existing DLL\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 All the skeleton controls except TinyAuto allow for multiple controls 
to be implemented in the same DLL.  This section explains how to add a control 
to an existing DLL, assuming the DLL uses {\b OCHelp}
's {\b RegisterControls} and 
{\b HelpGetClassObject} (see in dll.cpp in the skeletons).\par 

To add a control to your DLL, do the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Edit e.g. dll.cpp or control.cpp (wherever the {\b ControlInfo} 
structure or array is initialized).  If you curently have a single 
{\b ControlInfo} structure (e.g. {\i g_ctlinfo}), change it to an array 
of two elements (e.g. ControlInfo {\i g_actlinfo}[2]).  If it's already 
an array, make it one element larger.  Add the new control's 
{\b ControlInfo} structure to the end of the array; make sure to "link" 
the previous item of the array to the new last item in the array 
(by filling in the {\i pNext} field of the previous item to point to 
the new last item which contains information about the new control).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 For an example of how to do this, see the {\b _DllMainCRTStartup} 
function in dll.cpp in LineOC.  (The second "control" in this case is 
actually a property page, which is really a special kind of control, 
but the registration procedure would be the same for any ordinary 
ActiveX control.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Create new files similar to e.g. control.cpp and control.h to 
define the C++ class that implements the new control.  Don't forget 
to create a GUIDs for the control's class ID.  Add the new 
.cpp file to your VC4 project.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Once the control DLL is registered again (which usually happens 
automatically when the DLL is built), you should be able to access the 
new control from OCTest or any compatible container.\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.9. Other Useful OCHelp Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 In addition to the {\b OCHelp}
 helper functions described in the 
previous section, {\b OCHelp}
 contains the following useful helper functions:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For sending messages between threads:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MsgWndPostToCallback}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Posts a message to a hidden message-passing window.  When the 
window receives the message, it calls a given callback function. 
This can be used to safely pass information between threads.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MsgWndSendToCallback}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Sends a message to a hidden message-passing window.  When the 
window receives the message, it calls a given callback function. 
This can be used to safely pass information between threads.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For advising the container of changes in the control's display, 
including changes in the control's palette (IE3 currently doesn't support 
arbitrary palettes but OCTest does):\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b InitHelpAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Initializes a {\b HelpAdviseInfo} structure, used to help implement 
{\b IViewObject::SetAdvise}
 and {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpSetAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpGetAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b UninitHelpAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Peforms final cleanup of a {\b HelpAdviseInfo} structure, including 
releasing the {\b IAdviseSink} pointer if necessary.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For helping implement hit-testing of windowless objects, required in 
order to fully implement {\b IViewObjectEx}:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpQueryHitPoint}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IViewObjectEx::QueryHitPoint}
 on a control by 
drawing the control into a small bitmap (centered on the point 
being hit-tested) and checking if any pixels were drawn.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For drawing custom control borders, and/or drawing a rectangular 
border with 4 or 8 grab handles:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b CreateBorderBrush}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates and returns a hatch pattern brush used to draw control 
resize borders and grab handles.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DrawControlBorder}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Draws a border used to drag and resize controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Finally, see section {\b 2.A. Utility Functions}
 for a list 
of general-purpose handy utility functions, including memory management, 
UNICODE conversions, HIMETRIC conversions, etc.\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.A. OCImg -- Helpers For Palette & Bitmap Manipulation\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCImg is a small DLL that helps implement certain kinds of 
graphics-intensive controls.\par 

See section {\b 3.1. What Is OCImg.DLL?}
 for more information 
about OCImg.\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.2.B. OCMisc -- Helpers For Implementing ActiveX Containers\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCMisc is a static-link library of helper functions that 
provide OC-related functionality that may be useful to some containers 
and/or controls, but isn't likely to be useful to most or all controls.\par 

See {\b 4.1. What Is OCMisc.LIB?}
 for more information about OCMisc.\par 

 
***********************************************************************\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.3. Sample Controls\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The MM Controls SDK includes the following sample controls that are 
built using the SDK.  The source code for each is contained in a directory 
given the name of the control, with "OC" appendend for windowed and 
windowless controls and "Auto" for invisible controls (also called OLE 
automation servers).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b TinyAuto}
, {\b MiniAuto}
, {\b TinyOC}
, {\b CircOC}
: These are 
"skeleton controls" that are used as a basis for the tutorial-like 
instructions for writing a new ActiveX control.  For more information 
on these skeleton controls, see 
{\b 4.2.1. Getting Started: Creating A Minimal Control}
 and 
{\b 4.2. Writing Controls -- Step By Step}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b FubarOC}
 is a lightweight windowed control that's equivalent to 
CircOC, but with the first few steps of 
{\b 4.2. Writing Controls -- Step By Step}
 already applied to it. 
(The steps that were applied are the steps that make the most sense 
if you want IE3 compatibility.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b LineOC}
 is a lightweight windowless control that displays a line 
segment.  See {\b Line} for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b PalOC}
 is a lightweight windowless control that displays the 
container's ambient palette in a 16x16 grid.  PalOC is also useful 
for demonstrating simple use of {\b OCImg}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.4. Writing Control Containers\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 In addition to providing helper functions for creating 
multimedia-enabled lightweight ActiveX controls, the MM Controls SDK 
provides some functions (in a separate static-link library) to help 
implement ActiveX control containers.  For more information about any of 
the following, see {\b OCMisc}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab To embed an ActiveX control, see {\b AllocSiteLW} and 
{\b CreateControlInstance}, and {\b PickClass}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab To persist a control (load and save its data) in binary stream format 
or HTML or CSV text format, see 
{\b 4.7.4. Persistence Helper Functions}
 as well as 
{\b PersistSiteProperties} and {\b PersistChild}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab For various utility functions, see 
{\b 4.7.A. Miscellaneous Functions}
 and 
{\b 4.7.5. String and Variant Conversion Functions}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This SDK doesn't provide tutorial-like instructions for building an 
ActiveX control because so few people write containers.  However, if you 
need to write a container and would like to discuss the issues related to 
doing so, please {\b mailto:EricLe}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5. OCHelp Reference\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This section contains reference documentation for OCHelp. 
For a more "tutorial" approach, see 
{\b 4.2. Writing Controls -- Step By Step}
.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.1. What Is OCHelp?\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.2. Implementing An In-Process Control DLL\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.3. Implementing Properties And Methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.4. Calling Properties And Methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.5. Firing Events\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.6. Thread Safety And Popup Menus\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.7. Implementing IViewObject\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.8. Implementing IViewObjectEx\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.9. Implementing Persistence and Simple IDispatch\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.A. Utility Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.5.B. Design-Time Functions\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.1. What Is OCHelp?\par 
\pard\plain \s93\sl240 \fs21\lang1033 
OCHelp is a small (currently about 30KB) DLL that makes it possible to 
implement very small controls (under 10KB for relatively simple controls).\par 

OCHelp is available in both static-link and dynamic-link forms:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab The static-link version will increase the size of your control, 
but will eliminate any dependency on the OCHelp DLL.  To use the 
the static-link version of OCHelp, link with one of the following 
libraries:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\tx1200\fi-360\li1200\emdash\tab {\b debug/OCHelpSD.lib}
: the debug version, containing both 
design-time and run-time functions (your control will link with 
whatever it needs).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b release/OCHelpS.lib}
: the release version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab The dynamic-link version can be shared among multiple controls, and is 
the better choice if you plan to ship more than one control, or if 
it's likely that the end-user's machine will already have the OCHelp 
DLL (because the user already viewed a different HTML page or loaded 
a different application that depends on OCHelp).  To use the 
dynamic-link version of OCHelp, link with one of the following 
libraries:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\tx1200\fi-360\li1200\emdash\tab {\b debug/OCHelpDD.lib}
: the design-time debug version, which 
causes your control to use {\b OCHelpDD.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\tx1200\fi-360\li1200\emdash\tab {\b debug/OCHelpRD.lib}
: the run-time debug version, which 
causes your control to use {\b OCHelpRD.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\tx1200\fi-360\li1200\emdash\tab {\b release/OCHelpD.lib}
: the design-time release version, which 
causes your control to use {\b OCHelpD.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b release/OCHelpR.lib}
: the run-time release version, which 
causes your control to use {\b OCHelpR.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 The various versions of the OCHelp DLLs are installed in the 
windows\\system directory when MMCtl is set up.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following sections provide reference documentation for the 
OCHelp API.  For a more "tutorial" approach, see 
{\b 4.2. Writing Controls -- Step By Step}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.2. Implementing An In-Process Control DLL\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions help implement an in-process control DLL, 
specifically assisting with the implementation of {\b DllRegisterServer}, 
{\b DllUnregisterServer}, and {\b DllGetClassObject}.  Also, {\b ControlInfo} 
contains a field which can be used to provide a one-line implementation 
of {\b DllCanUnloadNow}.  These functions allow an arbitrary number of 
controls to be implemented in a DLL.  (Note that an OLE property page is just 
a simplified case of a control, so property pages are supported as well.)\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpGetClassObject}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b DllGetClassObject} (including the class factory 
object it creates) for any number of controls.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b RegisterControls}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Registers or unregisters one or more controls.  Helps implement 
{\b DllRegisterServer} and {\b DllUnregisterServer}.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.3. Implementing Properties And Methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions make it easier to implement {\b IDispatch} 
in your control, which allows other applications (such as VBS) to access 
properties and methods of your controls.  Only late-bound OLE automation 
is supported -- no early-bound or dual interfaces.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DispatchGetArgs}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Retrieves arguments from a DISPPARAMS structure passed to 
{\b IDispatch::Invoke}
.  Arguments are stored in variables that 
are passed to {\b DispatchGetArgs} as a va_list array. 
Used to help implement {\b IDispatch::Invoke}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DispatchGetArgsList}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Retrieves arguments from a DISPPARAMS structure passed to 
{\b IDispatch::Invoke}
.  Arguments are stored in variables that 
are passed to {\b DispatchGetArgsList} as a va_list array. 
Used to help implement {\b IDispatch::Invoke}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DispatchHelpGetIDsOfNames}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IDispatch::GetIDsOfNames}
 given a string that 
contains the list of {\b IDispatch} member names.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b VariantFromString}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Initializes a VARIANT to contain the copy of an LPCTSTR string.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.4. Calling Properties And Methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions make it easier to call {\b IDispatch} to 
access the properties and methods of another object (e.g. to fire events 
from your control to the container, or to access ambient properites of 
the container).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DispatchInvoke}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Calls {\b IDispatch::Invoke}
 on a given {\b IDispatch} object, passing 
arguments specified as a variable-length list of arguments.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DispatchInvokeList}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Calls {\b IDispatch::Invoke}
 on a given {\b IDispatch} object, passing 
arguments specified as a va_list array.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DispatchPropertyGet}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Gets the value of a given property on a given {\b IDispatch} object. 
Used to help call {\b IDispatch::Invoke}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DispatchPropertyPut}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Sets the value of a given property on a given {\b IDispatch} object. 
Used to help call {\b IDispatch::Invoke}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.5. Firing Events\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions make it easier to fire events (e.g. that 
cause VBS code to be executed in the container).  Multicasting is supported. 
Only a single {\b IDispatch}-based event set is supported per control.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocConnectionPointHelper}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocates a {\b ConnectionPointHelper} object, which provides a simple 
implementation of an {\b IDispatch}-based {\b IConnectionPoint}, 
and methods for firing events. 
Also contains helper functions for implementing 
{\b IConnectionPointContainer::EnumConnectionPoints}
 in the case where 
this is only connection maintained by the connection point container.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b FreeConnectionPointHelper}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Frees a {\b ConnectionPointHelper} object allocated using 
{\b AllocConnectionPointHelper}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpGetClassInfoFromTypeLib}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IProvideClassInfo::GetClassInfo}
 using a 
caller-provided type library.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.6. Thread Safety And Popup Menus\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions allow messages to be passed from one thread 
to another by sending or posting window messages to a hidden window.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MsgWndCreate}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates the hidden message-passing window (if it doesn't exist). 
This window is used by {\b MsgWndSendToCallback}, 
{\b MsgWndPostToCallback}, and {\b MsgWndTrackPopupMenuEx}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MsgWndDestroy}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Destroys a hidden message-passing window that was previously created 
by calling {\b MsgWndCreate}.  Before the window is destroyed, all 
pending messages are dispatched in it.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MsgWndPostToCallback}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Posts a message to the control's hidden message-passing window 
(typically created by calling {\b MsgWndCreate} in the control's 
constructor).  When the window receives the message, it calls a given 
callback function.  This can be used to safely pass information 
between threads.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MsgWndSendToCallback}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Sends a message to the control's hidden message-passing window 
(typically created by calling {\b MsgWndCreate} in the control's 
constructor).  When the window receives the message, it calls a given 
callback function.  This can be used to safely pass information 
between threads.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MsgWndTrackPopupMenuEx}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Calls {\b TrackPopupMenuEx} to display a popup menu, and directs 
WM_COMMAND messages to a given callback function.  Can be used by 
a windowless control to display a popup context menu.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.7. Implementing IViewObject\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions help a control writer implement 
{\b IViewObject}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b InitHelpAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Initializes a {\b HelpAdviseInfo} structure, used to help implement 
{\b IViewObject::SetAdvise}
 and {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpSetAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpGetAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b UninitHelpAdvise}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Peforms final cleanup of a {\b HelpAdviseInfo} structure, including 
releasing the {\b IAdviseSink} pointer if necessary.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.8. Implementing IViewObjectEx\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions help a control writer implement 
{\b IViewObjectEx}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpQueryHitPoint}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IViewObjectEx::QueryHitPoint}
 on a control by 
drawing the control into a small bitmap (centered on the point 
being hit-tested) and checking if any pixels were drawn.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.9. Implementing Persistence and Simple IDispatch\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions help implement {\b IPersistPropertyBag}, 
{\b IPersistStreamInit}, and a simple (simplistic?) but very lightweight 
(control code size) {\b IDispatch}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocPropertyBagOnStream}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b PropertyBagOnStream} object which implements 
{\b IPropertyBag} whose properties are contained in a given {\b IStream}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocPropertyBagOnVariantProperty}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b PropertyBagOnVariantProperty} object which implements 
{\b IPropertyBag} whose only property is contained in a given 
{\b VariantProperty}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocPropertyHelper}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocates a {\b PropertyHelper} object which provides an implementation 
of {\b IPersist}, {\b IPersistPropertyBag}, {\b IPersistStream}, 
{\b IPersistStreamInit}, and a simplified implementation of 
{\b IDispatch}, for any object which implements {\b IPersistVariantIO}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocVariantIOOnPropertyBag}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b VariantIOOnPropertyBag} object which provides an 
implementation of {\b IVariantIO} (and {\b IManageVariantIO}) 
that operates on a given {\b IPropertyBag}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocVariantIOToMapDISPID}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b VariantIOToMapDISPID} object which provides an 
implementation of {\b IVariantIO} which is used to map a property name 
to a DISPID (property number) or vice versa.  Can also be used to get 
or set the value of that property.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b LoadPropertyBagFromStream}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Load properties that are stored in an {\b IStream} (in the simple 
tagged binary format written by {\b WriteVariantProperty}) into an 
{\b IPropertyBag} object.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b PersistVariantIO}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Loads or saves a list of property name/value pairs, specified as a 
variable-length list of arguments that's formatted in the same way as 
{\b IVariantIO::Persist}
, to/from an {\b IPropertyBag} object.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b PersistVariantIOList}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Loads or saves a list of property name/value pairs, specified as a 
va_list array that's formatted in the same way as 
{\b IVariantIO::Persist}
, to/from an {\b IPropertyBag} object.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ReadVariantProperty}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Reads a {\b VariantProperty} from an {\b IStream} in a simple tagged 
binary format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b VariantPropertyClear}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Frees data maintained in a {\b VariantProperty} structure.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b VariantPropertyInit}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Initializes a {\b VariantProperty} structure.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b WriteVariantProperty}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in a simple tagged 
binary format.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.A. Utility Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following are general-purpose utility functions.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ANSIToUNICODE}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts an ANSI string to UNICODE.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b CompareUNICODEStrings}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Compares two UNICODE strings.  The comparison is case-insensitive.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b FindCharInString}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Searches a string to find a specific character.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b FindCharInString}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Searches a string from back-to-front to find a specific character.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b FindStringByIndex}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Finds a string with a given index in a list of strings.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b FindStringByValue}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Looks up string in a list of strings and returns the index of the 
string (if found).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpDelete}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Frees memory allocated by {\b HelpNew}.  This is simply a macro 
that calls {\b HelpMemFree} with specific flags.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpMemAlloc}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocates memory using either {\b GlobalAlloc} or the task memory 
allocator retrieved using {\b CoGetMalloc}.  Optionally 
zero-initializes the memory.  Optionally performs simple memory leak 
detection.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpMemFree}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Frees a block of memory previously allocated using {\b HelpMemAlloc}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpMemSetFailureMode}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Sets failure conditions for the memory allocator.  This can be used 
to simulate low-memory conditions and test a system's ability to 
detect and/or handle these conditions.  Only available in DEBUG builds 
of {\b OCHelp}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpNew}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement a version of the "new" operator that doesn't 
use the C runtime.  Zero-initializes the allocated memory. 
This is simply a macro that calls {\b HelpMemAlloc} with specific 
flags.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HIMETRICToPixels}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a width and height from HIMETRIC units to pixels 
(on the default monitor).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b PixelsToHIMETRIC}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a width and height from pixels (on the default monitor) 
to HIMETRIC units.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b TaskMemAlloc}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocates memory using the task memory allocator (see {\b CoGetMalloc}). 
This is simply a macro that calls {\b HelpMemAlloc} with specific 
flags.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b TaskMemFree}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Frees a block of memory previously allocated using {\b TaskMemAlloc}. 
This is simply a macro that calls {\b HelpMemFree} with specific 
flags.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b UNICODEToANSI}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a UNICODE string to ANSI.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b UNICODEConcat}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Concatenates one UNICODE string to another.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b UNICODECopy}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Copies one UNICODE string to another.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.5.B. Design-Time Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following are only available in the design-time version of 
OCHelp.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocPropPageHelper}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocates a {\b PropPageHelper} object which helps a control implement 
a property page.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocVerbEnumHelper}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocates and initializes a verb enumeration helper.  Aids in 
implementing {\b IOleObject::EnumVerbs}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b CreateBorderBrush}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates and returns a hatch pattern brush used to draw control 
resize borders and grab handles.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DrawControlBorder}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Draws a border used to drag and resize controls.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.6. OCImg Reference\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.6.1. What Is OCImg?\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.6.2. Working With Bitmaps\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.6.3. Working With Palettes\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.6.4. Utility Functions\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.6.1. What Is OCImg?\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCImg is a small (30-40KB as of 5/96) DLL that helps implement 
certain kinds of graphics-intensive controls.\par 

OCImg is actually a subset of the MKImage library, packaged as a DLL (instead 
of as a static-link library) to help minimize the amount of code that would 
need to be downloaded for Internet controls.  Specifically, any topic in the 
sections below that is not hyperlinked is not contained in OCImg -- though 
if you think should be, contact the MM Controls team.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.1. What Is MKImage 2.0?\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.2. MKImage Fundamentals\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.3. Using MKImage 2.0\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.4. MKImage Interfaces\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.5. MKImage Structures\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.6. Sample Code\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.7. MKImage HRESULT Codes\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.8. Changes Since MKImage 1.0\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.9. Known Bugs\par 
\pard\plain \s93\sl240 \fs21\lang1033 
A.A. MKImage Code Size\par 
\pard\plain \par
\pard\plain \sa160\sl240 \fs21\lang1033 To use OCImg, link with one of the following libraries:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab {\b debug/OCImgDD.lib}
: the design-time debug version, which 
causes your control to use {\b OCImgDD.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab {\b debug/OCImgRD.lib}
: the run-time debug version, which 
causes your control to use {\b OCImgRD.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab {\b release/OCImgD.lib}
: the design-time release version, which 
causes your control to use {\b OCImgD.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b release/OCImgR.lib}
: the run-time release version, which 
causes your control to use {\b OCImgR.dll}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The various versions of the OCImg DLLs are installed in the 
windows\\system directory when MMCtl is set up.\par 

Since the contents of each of the four variants of the OCImg DLL are still 
in flux, the easiest way to see what functionality from MKImage is included 
in run-time vs design-time versions is to take a look at the .def files 
which define this: {\b OCImg/OCImgD.def}
 and {\b OCImg/OCImgR.def}
, 
respectively.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.6.2. Working With Bitmaps\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Important:}
  The following is documentation from MKImage, 
from which OCImg*.DLL is derived.  Any topic in the sections below that is not 
hyperlinked is not contained in OCImg -- though if you think should be, 
contact the MM Controls team.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.1. Creating And Converting Bitmaps\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.2. Bitmap I/O Via IStream\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.3. Bitmap I/O Convenience Utilities\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.4. Bitmap Clipboard Operations\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.5. Bitmap Drag & Drop Operations\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.6. Bitmap Drawing Operations\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.7. Bitmap Blt And Pixel Access Operations\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.8. Bitmap Filtering Operations\par 
\pard\plain \s93\sl240 \fs21\lang1033 
B.9. Bitmap Information/Utility Functions\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.6.3. Working With Palettes\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Important:}
  The following is documentation from MKImage, 
from which OCImg*.DLL is derived.  Any topic in the sections below that is not 
hyperlinked is not contained in OCImg -- though if you think should be, 
contact the MM Controls team.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
C.1. Creating And Converting Palettes\par 
\pard\plain \s93\sl240 \fs21\lang1033 
C.2. Palette I/O Via IStream\par 
\pard\plain \s93\sl240 \fs21\lang1033 
C.3. Palette Clipboard Operations\par 
\pard\plain \s93\sl240 \fs21\lang1033 
C.4. Palette Utilities\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.6.4. Utility Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Important:}
  The following is documentation from MKImage, 
from which OCImg*.DLL is derived.  Any topic in the sections below that is not 
hyperlinked is not contained in OCImg -- though if you think should be, 
contact the MM Controls team.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
D.1. Initializing MKImage\par 
\pard\plain \s93\sl240 \fs21\lang1033 
D.2. IStream Utilities\par 
\pard\plain \s93\sl240 \fs21\lang1033 
D.3. General-Purpose Utilities\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7. OCMisc Reference\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.1. What Is OCMisc?\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.2. Wrapping Windowless Controls\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.3. Creating Controls\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.4. Persistence Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.5. String and Variant Conversion Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.6. Debugging Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.7. Component Categories\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.8. Implementing Persistence and Simple IDispatch In Containers\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.9. Implementing a File MRU List\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.A. Miscellaneous Functions\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.1. What Is OCMisc?\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCMisc is a static-link library of helper functions that 
provide OC-related functionality that may be useful to some containers 
and/or controls, but isn't likely to be useful to most or all controls. 
Contrast this with {\b OCHelp}
 which contains functionality that is 
required by many/most full-featured controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 To use OCMisc, link with one of the following libraries:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab {\b debug/OCMiscDD.lib}
: the design-time debug version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab {\b debug/OCMiscRD.lib}
: the run-time debug version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \sa0\tx720\fi-360\li720\emdash\tab {\b release/OCMiscD.lib}
: the design-time release version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b release/OCMiscR.lib}
: the run-time release version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following sections provide an overview of the OCMisc API.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.2. Wrapping Windowless Controls\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in wrapping an ActiveX lightweight, windowless 
control inside of an ActiveX windowed control.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocSiteLW}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b SiteLW} object that can host a single lightweight 
windowless ActiveX control.  (Actually {\b SiteLW} can also host a 
windowed control, but support for windowed controls isn't nearly 
as robust.  If you need this functionality, please {\b mailto:EricLe}
.)\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b SiteLW}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Implements {\b ISiteLW}, which implements an ActiveX windowed 
control that hosts an ActiveX lightweight windowless control.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ISiteLW}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Interface to a {\b SiteLW} object, which implements an ActiveX 
windowed control that hosts an ActiveX lightweight windowless 
control.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.3. Creating Controls\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in creating controls.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b CreateControlInstance}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a new instance of a control given either a class ID (in 
string form) or a ProgID.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.4. Persistence Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in implementing streams.\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.4.1. Generic Persistence Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.4.2. CSV (Comma-Separated-Values) Persistence Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
4.7.4.3. HTML Persistence Helper Functions\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.4.1. Generic Persistence Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in implementing streams independent 
of the stream format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b GetStreamLengthToEnd}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Calculates the distance (in bytes) between the current position 
in a stream and the end of the stream.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ReadStreamToMemory}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Read bytes from a stream into memory (which is allocated by this 
function).  Reads either a given number of bytes or until the end 
of the stream.  The returned block of memory is null-terminated.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b LoadFromStream}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Read a stream that contains the class ID and data of an object 
previously saved using {\b IPersistStream::Save}
, and create an object 
that contains the data from the stream.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b SaveToStream}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Save an object that supports {\b IPersistStream} to an 
{\b IStream} in a simple binary tagged file format. 
Can also be used to save just a class ID to a stream (which is 
useful for saving an object that doesn't support any persistence 
interface).\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.4.2. CSV (Comma-Separated-Values) Persistence Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in implementing streams which store that 
contain data in CSV format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b LoadFromCSV}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Read a CSV (Excel-readable comma-delimited) format stream and 
create an object that contains the data from that stream.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b LoadPropertyBagFromCSV}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Load properties that are stored in an {\b IStream} in CSV 
(Excel-readable comma-delimited) format into a given 
{\b IPropertyBag} object.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ReadVariantPropertyFromCSV}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Reads a {\b VariantProperty} that's stored in CSV (Excel-readable 
comma-delimited) format in a memory buffer.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b SaveToCSV}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Save an object that supports {\b IPersistPropertyBag} to an 
{\b IStream} in CSV (Excel-readable comma-delimited) format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b SaveVariantPropertiesToCSV}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Save an {\b IEnumVariantProperty} object to an {\b IStream} in 
CSV (Excel-readable comma-delimited) format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b WriteVariantPropertyToCSV}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in CSV (Excel-readable 
comma-delimited) format.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.4.3. HTML Persistence Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in implementing streams which store that 
contain data in HTML format.  (Actually, only the a single <OBJECT> 
tag within an HTML file can be edited, although the formatting of the 
rest of the file is retained.)\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b LoadFromHTML}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Reads an HTML format stream and creates an object specified by an 
<OBJECT> tag in that stream.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b LoadPropertyBagFromHTML}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Loads properties that are stored in a <OBJECT> tag in an 
{\b IStream} in HTML format into a given {\b IPropertyBag} object.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ReadHTMLTagToVariantIO}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Reads an HTML tag from a memory buffer and returns an {\b VariantIO} 
object that contains the contents of that tag.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ReadHTMLToken}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Reads an HTML token (word, quoted string, etc.) from an ANSI buffer 
and returns it as a BSTR.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b SaveToHTML}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Saves an object that supports {\b IPersistPropertyBag} to an 
{\b IStream} in HTML format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b SaveVariantPropertiesToHTML}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Saves an {\b IEnumVariantProperty} object to an {\b IStream} in 
HTML format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b WriteHTMLTagFromVariantIO}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Writes an HTML tag whose attributes are stored in an {\b VariantIO} 
object to an {\b IStream}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b WriteHTMLToken}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Writes an HTML token (given as an LPOLESTR) to an {\b IStream} 
in ANSI format.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b WriteVariantPropertyToHTML}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in HTML format 
as a "<PARAM>" tag.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.5. String and Variant Conversion Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in converting strings and variants.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b PrintableANSIToUNICODE}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a printable ANSI string to UNICODE.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b UNICODEToPrintableANSI}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a UNICODE string to a printable ANSI string.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b VariantTypeNameToNumber}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a VARTYPE string name to a VARTYPE number.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b VariantTypeNumberToName}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a VARTYPE value to a string name that can serve as the 
name of the type.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b CLSIDToFriendlyName}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Finds the "friendly name" associated with a given class in the 
system registry.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b TCHARFromGUID}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a GUID to a TCHAR-based string representation.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b CLSIDFromTCHAR}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Converts a TCHAR-based string into a CLSID.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.6. Debugging Helper Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions aid in debugging.  They are only available in 
DEBUG builds.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b DebugIIDName}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Finds the name of an interface in the system registration 
database given the interface's IID (for debugging purposes only).\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.7. Component Categories\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 These functions help select controls which implement particular 
component categories.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b PickClass}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Displays a modal "class picker" dialog which lists all the 
registered classes which support a given set of component 
categories and lets the user choose one, returning its CLSID.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.8. Implementing Persistence and Simple IDispatch In Containers\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions (along {\b AllocPropertyHelper} and related 
functions) help a control container implement {\b IPersistPropertyBag}, 
{\b IPersistStreamInit}, and a simple (simplistic?) but very lightweight 
(control code size) {\b IDispatch}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocVariantIO}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b VariantIO} object which provides a property bag 
implementation which supports {\b IPropertyBag} as well as 
{\b IVariantIO}, {\b IManageVariantIO}, and {\b IEnumVariantProperty}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b PersistSiteProperties}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Loads or saves a list of property name/value pairs associated with 
the site of the child of a given object from/to a given {\b IVariantIO} 
object.  Used to help implement persistence in control containers.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b PersistChild}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Loads or saves a child of a given container object from/to a given. 
{\b IVariantIO} object.  Used to help implement persistence in control 
containers.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocChildPropertyBag}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b ChildPropertyBag} object which implements {\b IPropertyBag} 
that provides a child object (contained within a parent object) access 
to the child's properties, which are stored within the parent's 
property bag.  The name of each child's property is prefixed with a 
given string (e.g. "Controls(7).").\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocPropertyBagCompactor}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Creates a {\b PropertyBagCompactor} object which implements 
{\b IPropertyBag}, and which reads and writes its data in a 
more compact way in a second {\b IPropertyBag} by "folding" multiple 
properties with the same period-terminated prefix (e.g. "Foo.X = 42, 
Foo.Y = 'Hello'") into a single property (e.g. "Foo = 'X=42,Y=Hello'").\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AllocBindHostService}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocates an implementation of {\b IServiceProvider} which provides 
the {\b IBindHost} service (SID_IBindHost, IID_IBindHost), which 
provides for relative path name resolution when using functions 
such as {\b URLOpenStream}.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.9. Implementing a File MRU List\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following functions can be used to implement a registry-based 
file MRU list.  The entries in an MRU list are stored as values under a 
given registry key.  The list contains a caller-specified maximum number 
of entries.  When an entry is added to the list, it always becomes the 
"most recent" entry, bumping down less recent entries and, if the list 
is full, bumping the least recent entry off the list.  Entries in an 
MRU list can be retrieved sequentially from most to least recent; entries 
can also be retrieved by index.  Entries can be removed from an MRU 
list either by index or by name, and the entire list can be cleared 
en masse.  Finally, a utility function exists to map an MRU list 
into an application menu.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b OpenMRUList}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Opens a new or existing registry-based MRU list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b CloseMRUList}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Closes a previously opened MRU list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b GetMRUListInfo}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Gets information about an MRU list such as the number of entries 
in the list, the length of the longest entry, and the maximum 
number of entries.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b SetMRUListMaxEntries}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Sets the maximum number of entries in an MRU list, possibly 
truncating the list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b GetNextMRUListEntry}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Retrieves the next entry in an MRU list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b GetIthMRUListEntry}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Retrieves the i-th entry in an MRU list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AtEndOfMRUList}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Tests if {\b GetNextMRUListEntry} has advanced to the end of 
an MRU list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b ResetMRUList}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Resets an MRU list so that the next call to 
{\b GetNextMRUListEntry} will retrieve the first entry.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b AddMRUListEntry}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Adds an entry to the head of an MRU list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b RemoveAllMRUListEntries}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Removes all the entries in an MRU list.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b RemoveIthMRUListEntry}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Removes an MRU list entry by index.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b RemoveMRUListEntry}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Removes an MRU list entry by name.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b MapMRUListToMenu}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Maps an MRU list into an application's menu.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 4.7.A. Miscellaneous Functions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following are miscellaneous functions that don't fit in any 
other category.  In some cases these functions which may become obsolete 
(see the descriptions for more information).  Note that since OCMisc is 
a static link library your application is not penalized for the code size 
of these functions unless you call them.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b FindStringInString}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Finds a string within another string.  The comparison can be either 
case-sensitive or case-insensitive.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b HelpGetClassInfo}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IProvideClassInfo::GetClassInfo}
.  The 
implementation provides very limited class information -- just 
enough to allow firing events to VBS.  {\b Warning:} you should 
probably use {\b HelpGetClassInfoFromTypeLib} instead.  See comments 
for more information.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 {\b GetObjectSafety}\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Determines if an object is safe-for-scripting and/or safe-for-initializing 
vis-a-vis a given set of interfaces.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 5. The ActiveX Control Architecture And MM Controls Extensions\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 (This section is under construction...)\par 

See also {\b 1.2. MM Controls Requirements Beyond ActiveX}
.\par 

(Don't forget the IViewObject::Draw S_FALSE thing.)\par 

TBD...\par 

xxx\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 About Autodoc\par 
\pard\plain \s93\sl240 \fs21\lang1033 
The sources for this Help file were generated by Autodoc, the source code 
documentation tool that generates Print or Help files from tagged 
comments in C, C++, Assembly, and Basic source files.\par 

For more information, contact Eric Artzt ({\b mailto:erica@microsoft.com}
).\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CircOC\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b 4.3. Sample Controls}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FubarOC\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b 4.3. Sample Controls}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LineOC\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b 4.3. Sample Controls}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MiniAuto\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b 4.3. Sample Controls}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCAuthor\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCAuthor is a simple Visual Basic application provided as part of 
the MM Controls SDK that functions as a editor and viewer for 
lightweight windowed and windowless controls.  OCAuthor supports 
saving and editing an <OBJECT> tag in an HTML file. 
Most importantly, OCAuthor is a sample application that 
demonstrates how to use the {\b OCEdit} control to build ActiveX 
control editors in Visual Basic.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 OCAuthor has the following features and restrictions:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCAuthor is a lightweight container that doesn't support all OC96 
site interfaces and methods.  This should not be a problem for a 
well-behaved OC96 control, since controls should not expect every 
site interface to be fully implemented.  However, some controls 
may operate incorrectly, or even crash, when used in OCAuthor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCAuthor can contain only one control at a time.  However, that 
control can be {\b Stage} (or {\b HostLW} containing a {\b Stage}), 
which allows an arbitrary number of controls to be embedded.  Nested 
{\b Stage} controls (i.e. {\b Stage} controls within {\b Stage} controls) 
are supported.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCAuthor can save a control's data in {\b HTML}
 (Hypertext Markup 
Language):  If you create and edit a new control instance (via File 
New) and Save As HTML, OCAuthor saves the control's data 
(including its class ID) as a simple HTML file containing a single 
<OBJECT> tag that contains the data of the control in 
<PARAM> tags.  If you open an existing HTML file, then 
OCAuthor searches for the first <object> tag (with "object" 
spelled in lowercase -- so you can "mark" the one object you want to 
edit by making its tag name lowercas), or, if not found, the first 
<OBJECT> tag (with "OBJECT" spelled in uppercase), and lets you 
edit that object; the rest of the HTML file is left untouched when you 
use File Save.  HTML format is only supported for controls that 
implement {\b IPersistPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCAuthor supports the concept of both "design mode" and "run mode" 
(also called "preview" mode, since it uses the design-time version 
of the loaded control and simply places that control in run mode).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCAuthor will display a property pages for the loaded control if 
the control implements {\b ISpecifyPropertyPages} (typically only 
in design mode).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCAuthor will display a right-click context menu for the control 
if the control implements {\b IOleObject::EnumVerbs}
 (typically only 
in design mode).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In design mode, OCAuthor will display a border with grab handles 
around a control, unless the control returns S_FALSE from 
{\b IViewObject::Draw}
 indicating that it wants to draw its own 
grab handles (see 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
 
for more information about this MM Controls convention).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCAuthor implements {\b IAnimate}, the very simple beginnings of 
an "animation event negotiation" interface that allows an ActiveX 
container to animate contained controls.  See 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
 
for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCAuthor accepts a single command-line parameter, which may be 
any of the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of a control to create a new instance of (e.g. 
"line.line.1").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of a control to create a new instance of (e.g. 
"\{BA6B5D20-8614-11CF-B8ED-0020AF344E0A\}").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The name of an HTML file to open.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCHelp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For information about OCHelp, see: 
{\b 4.5. OCHelp Reference}
 and 
{\b 4.2. Writing Controls -- Step By Step}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCImg\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For information about OCImg, see: 
{\b 4.6. OCImg Reference}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCMisc\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For information about OCMisc, see: 
{\b 4.7. OCMisc Reference}
 and 
{\b 4.4. Writing Control Containers}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCTest\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCTest is a simple Windows application provided as part of the 
MM Controls SDK that functions as a editor and viewer for 
lightweight windowed and windowless controls.  OCTest supports 
saving and editing an <OBJECT> tag in an HTML file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 OCTest is a simple Windows application that internally uses the 
{\b SiteLW} object provided in the OCMisc helper library (part of the 
MM Controls SDK) to contain a single OLE/ActiveX control.\par 

OCTest has the following features and restrictions:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCTest is a lightweight container that doesn't support all OC96 
site interfaces and methods.  This should not be a problem for a 
well-behaved OC96 control, since controls should not expect every 
site interface to be fully implemented.  However, some controls 
may operate incorrectly, or even crash, when used in OCTest.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCTest can contain only one control at a time.  However, that 
control can be {\b Stage} (or {\b HostLW} containing a {\b Stage}), 
which allows an arbitrary number of controls to be embedded.  Nested 
{\b Stage} controls (i.e. {\b Stage} controls within {\b Stage} controls) 
are supported.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCTest can save a control's data in one of three formats:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b HTML}
 (Hypertext Markup Language):  If you create and edit a new 
control instance (via File New) and Save As HTML, OCTest saves 
the control's data (including its class ID) as a simple HTML file 
containing a single <OBJECT> tag that contains the data 
of the control in <PARAM> tags.  If you open an existing 
HTML file, then OCTest searches for the first <object> 
tag (with "object" spelled in lowercase -- so you can "mark" the 
one object you want to edit by making its tag name lowercas), or, 
if not found, the first <OBJECT> tag (with "OBJECT" spelled 
in uppercase), and lets you edit that object; the rest of the 
HTML file is left untouched when you use File Save.  HTML format 
is only supported for controls that implement 
{\b IPersistPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b CSV}
 (Comma-Separated Variable):  This is a simple format that 
Excel understands (helpful for debugging).  Unlike HTML, CSV saves 
the data type (e.g.  VT_I4) of each property, which is useful 
for testing a control's behavior when used with property bags that 
preserve type information.  CSV format is only supported for 
controls that implement {\b IPersistPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b STM}
 ({\b IPersistStream} Binary Format):  This binary format 
consists of a class ID followed by the data saved via the control's 
{\b IPersistStream} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCTest supports the concept of both "design mode" and "run mode" 
(also called "preview" mode, since it uses the design-time version 
of the loaded control and simply places that control in run mode).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCTest will display a property pages for the loaded control if 
the control implements {\b ISpecifyPropertyPages} (typically only 
in design mode).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCTest will display a right-click context menu for the control 
if the control implements {\b IOleObject::EnumVerbs}
 (typically only 
in design mode).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab In design mode, OCTest will display a border with grab handles 
around a control, unless the control returns S_FALSE from 
{\b IViewObject::Draw}
 indicating that it wants to draw its own 
grab handles (see 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
 
for more information about this MM Controls convention).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab OCTest implements {\b IAnimate}, the very simple beginnings of 
an "animation event negotiation" interface that allows an ActiveX 
container to animate contained controls.  See 
{\b 5. The ActiveX Control Architecture And MM Controls Extensions}
 
for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 OCTest accepts a single command-line parameter, which may be 
any of the following:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of a control to create a new instance of (e.g. 
"line.line.1").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of a control to create a new instance of (e.g. 
"\{BA6B5D20-8614-11CF-B8ED-0020AF344E0A\}").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The name of a file (HTML, CSV, STM) to open.  OCTest determines 
the type of the file based on the extension (.htm or .html for HTML 
files, .csv for CSV files, .stm for STM files).\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PalOC\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b 4.3. Sample Controls}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TinyAuto\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b 4.3. Sample Controls}
.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TinyOC\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b 4.3. Sample Controls}
.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABAuto Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A lightweight invisible ActiveX control which accesses the AudioBoy 
mixer to allow playing multiple waveform audio files at once.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b ABAuto::PlayFile}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads a .wave file into memory and plays it, 
then automatically frees it when it's finished playing.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b ABAuto::LoadFile}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads a .wav file into memory and creates 
and returns an {\b ABSound} object to refer to it.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b ABauto::AttachSound}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Creates and returns an {\b ABChannel} 
object (associated with the {\b ABAuto} mixer) and attaches an 
{\b ABSound} object to it.  The sound can then be played, stopped, etc. 
using methods of {\b ABChannel}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b ABAuto} is a sound mixer.  You can load sounds (using e.g. 
{\b ABAuto::LoadFile}
) and play the sounds through the mixer by 
first creating a "channel" for each sound to play through 
(using {\b ABAuto::AttachSound}
) and then controlling the channel 
(using e.g. {\b ABChannel::Play}
, {\b ABChannel::Stop}
, etc.) 
A given sound can be played through multiple channels at once. 
All sounds are mixed.  See {\b ABAuto::LoadFile}
 for an example.\par 

Alternatively, you can play a sound simply by calling 
{\b ABAuto::PlayFile}
, but this doesn't give you as much control 
over the playback.  See {\b ABAuto::PlayFile}
 for an example.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control can be directly embedded in IE3, but not in VB4 
because VB doesn't support embedding of lightweight invisible 
controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of the design-time version of this control is 
"DA3327A0-C543-11CF-B705-00AA00BF27FD"\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab All files played back using {\b ABAuto} must be of the same 
format (e.g. 8 or 16 bit, mono or stero, and same sampling 
rate such as 22050 or 44100 samples per second).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Currently, compressed files are not supported.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CABAuto in 
"ABAuto.h".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "ABAuto.ABAuto.1".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports 
aggregation\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Provides access to the control's properties. 
Does not provide type information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if 
available) on the container-provided site object:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by 
the container.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABAuto::AttachSound Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b {\b ABChannel} AttachSound(}{\b {\b ABSound}} {\i Sound}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates and returns an {\b ABChannel} object (associated with the 
{\b ABAuto} mixer) and attaches a given {\b ABSound} object to it. 
The sound can then be played, stopped, etc.  using methods of 
{\b ABChannel}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b ABChannel} object which can be used to control the 
playback of {\i Sound}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Sound}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The sound to attach to the mixer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b LoadFile} for an example.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABAuto::LoadFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b {\b ABSound} LoadFile(}{\b String} {\i FileName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads a .wav file into memory and creates and returns an {\b ABSound} 
object to refer to it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b ABSound} object which can be played using 
{\b AttachSound} and {\b ABChannel::Play}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i FileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the file to load.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 Assuming "mixer" is an {\b ABAuto} object, the following VBS code plays 
the file "c:\\foo.wav".\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Dim snd ' an ABSound object\par 

Dim chn ' an ABChannel object\par 

Set snd = mixer.LoadFile("c:\\foo.wav")\par 

Set chn = mixer.AttachSound(snd)\par 

chn.Play\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABAuto::PlayFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b  PlayFile(}{\b String} {\i FileName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads a .wav file into memory and plays it, then automatically frees 
it when it's finished playing.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i FileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the file to play.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 Assuming "mixer" is an {\b ABAuto} object, the following VBS code plays 
the file "c:\\foo.wav".\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 mixer.PlayFile "c:\\foo.wav"\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABChannel Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 An AudioBoy channel object.  A channel can have one {\b ABSound} 
associated with it; the channel can then perform playback operations 
such as {\b Play}, {\b Stop}, etc.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b ABChannel::Sound}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The associated {\b ABSound} object.  Read-only.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b ABChannel::Play}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Starts the associated {\b ABSound} object 
playing.  When the sound reaches the end, playing does not stop 
automatically -- so executing {\b Rewind} at this point will cause 
the sound to play again.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b ABChannel::Stop}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Stops playback of the associated {\b ABSound} 
object.  If {\b Play} is subsequently executed, playback continues 
from the point at which it was stopped.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b ABChannel::Rewind}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Rewinds playback to the beginning of the 
{\b ABSound} object.  If the {\b ABChannel} object is in "play" mode 
(i.e.  {\b Play} was previously called, then playback begins 
immediately from the beginning of the sound.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that a given {\b ABSound} object can be associated with multiple 
{\b ABChannel} objects (using {\b ABAuto::AttachSound}
).  Each channel 
will access the sound independently; for example, one channel may be 
playing near the beginning of the sound, while another channel is 
playing near the end of the sound, and a third channel is stopped.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABChannel::Play Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b  Play(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Starts the associated {\b ABSound} object playing.  When 
the sound reaches the end, playing does not stop automatically -- 
so executing {\b Rewind} at this point will cause the sound to 
play again.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b LoadFile} for an example.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABChannel::Rewind Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b  Rewind(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Rewinds playback to the beginning of the {\b ABSound} 
object.  If the {\b ABChannel} object is in "play" mode (i.e. 
{\b Play} was previously called, then playback begins immediately 
from the beginning of the sound.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABChannel::Sound Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b {\b ABSound}}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the {\b ABSound} object associated with the {\b ABChannel}. 
Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 Assuming "mixer" is an {\b ABAuto} object, the following VBS code 
creates a new {\b ABChannel}, {\i chn2}, that is associated with the 
same sound that {\i chn1} (an {\b ABChannel}) is associated with.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Dim chn2 ' an ABChannel\par 

Set chn2 = mixer.AttachSound(chn1.Sound)\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABChannel::Stop Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b  Stop(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Stops playback of the associated {\b ABSound} object. 
If {\b Play} is subsequently executed, playback continues from 
the point at which it was stopped.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABSound Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 An AudioBoy sound object.  Represents a waveform audio sound 
(which may or may not be stored in a file).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b ABSound::NumSamples}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of samples in the sound. 
Files typically contain 11025, 22050, or 44100 samples per second. 
Read-only.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ABSound::NumSamples Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Long}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the number of samples in the sound.  Files typically contain 
11025, 22050, or 44100 samples per second.  Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/ABAUTO.D\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AddMRUListEntry\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AddMRUListEntry(}{\b HMRULIST} {\i hMRUList}{\b , const TCHAR*} {\i szEntry}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Adds an entry to the head of an MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szEntry}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The entry to add.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The maximum number of entries the list may contain is established 
when the list is opened (see {\b OpenMRUList}) or through the last 
call to {\b SetMRUListMaxEntries}.\par 

If {\i szEntry} is already at the head of the list, nothing happens. 
If {\i szEntry} is already in the list, it is moved from its current 
position to the head of the list.  In any event, {\i szEntry} is 
already added to the head of the list, possibly moving less 
recent elements down a slot. 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocBindHostService\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocBindHostService(}{\b LPCTSTR} {\i szContainerFileName}{\b , IServiceProvider * *} {\i ppsp}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates an implementation of {\b IServiceProvider} which provides 
the {\b IBindHost} service (SID_IBindHost, IID_IBindHost), which 
provides for relative path name resolution when using functions 
such as {\b URLOpenStream}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ABHS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szContainerFileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the file that 
relative path names will be relative to.  For example, if 
{\i szContainerFileName} is "c:\\foo\\bar.htm" and the caller 
calls {\b URLOpenStream} to open "blorg.gif", then the file 
"file://c:\\foo\\blorg.gif" will be opened (assuming that 
the {\b IUnknown *} parameter of {\b URLOpenStream} implements 
{\b IServiceProvider} which delegates to *{\i ppsp}).  If 
{\i szContainerFileName} is NULL or "", then file names 
are assumed to be relative to the current directory. 
{\i szContainerFileName} should be under _MAX_PATH characters 
in length.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppsp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the 
newly created object.  NULL is stored in *{\i ppsp} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Whenver the container's file name changes, the old {\b IBindHost} 
servie provider should be freed and {\b AllocBindHostService} should be 
called again to create a new {\b IBindHost} service provider.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocChildPropertyBag\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocChildPropertyBag(}{\b IPropertyBag *} {\i ppbParent}{\b , LPCSTR} {\i szPropNamePrefix}{\b , DWORD} {\i dwFlags}{\b , IPropertyBag * *} {\i pppbChild}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b ChildPropertyBag} object which implements {\b IPropertyBag} 
that provides a child object (contained within a parent object) access 
to the child's properties, which are stored within the parent's 
property bag.  The name of each child's property is prefixed with a 
given string (e.g. "Controls(7).").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ACPB.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppbParent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Parent's property bag.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szPropNamePrefix}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Prefix on the property name of each of the 
child's properties that are stored within the parent's property bag. 
This prefix does not appear on the properties in the returned 
property bag *{\i pppbChild}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pppbChild}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the {\b IPropertyBag} 
pointer to the new {\b ChildPropertyBag} object.  NULL is stored 
in *{\i pppbChild} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocConnectionPointHelper\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocConnectionPointHelper(}{\b IUnknown *} {\i punkParent}{\b , REFIID} {\i riid}{\b , IConnectionPointHelper *} {\i ppconpt}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates a {\b ConnectionPointHelper} object, which provides a simple 
implementation of an {\b IDispatch}-based {\b IConnectionPoint}. 
Also contains helper functions for implementing 
{\b IConnectionPointContainer::EnumConnectionPoints}
 in the case where 
this is only connection maintained by the connection point container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkParent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The parent of the connection point, which 
is the object that implements {\b IConnectionPointContainer}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The dispinterface (interface based on {\b IDispatch}) 
which is the event set that the parent object fires methods of.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppconpt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the pointer to 
the newly-allocated object.  NULL is stored in *{\i ppconpt} on 
error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Important}
 Unlike most COM objects, the parent object needs to 
free the {\b ConnectionPointHelper} object by calling 
{\b FreeConnectionPointHelper}, not {\b Release}.  The reason is that 
the {\b ConnectionPointHelper} object doesn't maintain a reference 
count if its own -- it simply forwards {\b AddRef} and {\b Release} 
calls to {\i punkParent}.  Therefore, calling {\b Release} on 
the {\b ConnectionPointHelper} object will simply cause {\b Release} 
to be called on the parent.\par 

To use the {\b ConnectionPointHelper} object, call 
{\b IConnectionPointHelper::FireEvent}
 to fire events to any object 
connected to the {\b ConnectionPointHelper} object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocPropertyBagCompactor\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocPropertyBagCompactor(}{\b IPropertyBag *} {\i ppbCompact}{\b , DWORD} {\i dwFlags}{\b , IPropertyBag * *} {\i pppb}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b PropertyBagCompactor} object which implements 
{\b IPropertyBag}, and which reads and writes its data in a 
more compact way in a second {\b IPropertyBag} by "folding" multiple 
properties with the same period-terminated prefix (e.g. "Foo.X = 42, 
Foo.Y = 'Hello'") into a single property (e.g. "Foo = 'X=42,Y=Hello'").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/APBC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppbCompact}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Compacted property bag. 
{\b PropertyBagCompactor} will save compacted properties to this 
property bag (if {\i dwFlags} doesn't include PBC_ISLOADING) 
or load compacted properties from this property bag (if {\i dwFlags} 
includes PBC_ISLOADING).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PBC_ISLOADING\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 *{\i pppb} will be used to load data, i.e. 
(*{\i pppb})->Read() will be called.  If this flag is not 
set, then *{\i pppb} will be used to save data, i.e. 
(*{\i pppb})->Write() will be called.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the {\b IPropertyBag} 
pointer to the new {\b PropertyBagCompactor} object.  This "virtual 
property bag" contains the uncompacted properties.  When writing into 
this property bag, write a property with name and value equal to NULL 
in order to "flush" the compacted property bag (i.e. complete writing 
its contents).  NULL is stored in *{\i pppb} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The returned {\b IPropertyBag} must be used either exclusively for 
reading (i.e. only {\b IPropertyBag::Read}
 is called) or exclusively 
for writing (i.e. only {\b IPropertyBag::Write}
 is called), depending 
on whether PBC_ISLOADING is specified.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocPropertyBagOnStream\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocPropertyBagOnStream(}{\b IStream *} {\i pstream}{\b , DWORD} {\i dwFlags}{\b , IPropertyBag * *} {\i pppb}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b PropertyBagOnStream} object which implements 
{\b IPropertyBag} whose properties are contained in a given {\b IStream}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APBOS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Stream to read from or write to (depending on 
whether the returned {\b IPropertyBag} is used for reading or 
writing).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the {\b IPropertyBag} 
pointer to the new {\b PropertyBagOnStream} object.  NULL is stored 
in *{\i pppb} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The returned {\b IPropertyBag} must be used either exclusively for 
reading (i.e. only {\b IPropertyBag::Read}
 is called) or exclusively 
for writing (i.e. only {\b IPropertyBag::Write}
 is called).  The 
properties are read/written starting from the current position of 
{\i pstream}.  When reading/writing is complete, the current position 
of {\i pstream} will be the end of the properties in the stream.\par 

See {\b VariantPropertyHeader} for a description of the format of 
the data in the {\b IStream}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocPropertyBagOnVariantProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocPropertyBagOnVariantProperty(}{\b VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b , IPropertyBag * *} {\i pppb}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b PropertyBagOnVariantProperty} object which implements 
{\b IPropertyBag} whose only property is contained in a given 
{\b VariantProperty}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APBOVP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Holds the single property that the 
implemented property bag contains.  The caller must allocate *{\i pvp}; 
the {\b PropertyBagOnVariantProperty} object {\i holds onto}
 *{\i pvp} 
for the duration of its lifetime, so the caller is responsible for 
ensuring that *{\i pvp} is valid for the lifetime of this object. 
Both {\i pvp}->{\i bstrPropName} and {\i pvp}->{\i varValue} must 
be valid; at the very least, {\i pvp}->{\i varValue} must contain 
an empty VARIANT (initialized using {\b VariantInit}).  After the 
allocated object is freed, the caller is responsible for freeing 
the contents of *{\i pvp}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the {\b IPropertyBag} 
pointer to the new {\b PropertyBagOnVariantProperty} object.  NULL is 
stored in *{\i pppb} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If the returned {\b IPropertyBag} is written to, all properties are 
ignored except the property named {\i pvp}->{\i bstrPropName}, 
whose value is saved to {\i pvp}->{\i varValue}.  If the property bag 
is read from, {\b IPropertyBag::Read}
 will return E_FAIL for all 
properties except {\i pvp}->{\i bstrPropName}, whose returned value is 
{\i pvp}->{\i varValue}.\par 

{\b PropertyBagOnVariantProperty} is really only useful in specialized 
applications which want to efficiently set or get a single property 
value from an object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocPropertyHelper\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocPropertyHelper(}{\b LPUNKNOWN} {\i punkOuter}{\b , IPersistVariantIO *} {\i ppvio}{\b , REFCLSID} {\i rclsid}{\b , DWORD} {\i dwFlags}{\b , LPUNKNOWN *} {\i ppunk}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates a {\b PropertyHelper} object which provides an implementation 
of {\b IPersist}, {\b IPersistPropertyBag}, {\b IPersistStream}, 
{\b IPersistStreamInit}, and a simplified implementation of 
{\b IDispatch}, for any object which implements {\b IPersistVariantIO}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The {\b IUnknown} of the parent object 
object (presumably the same object that implements 
{\b IPersistVariantIO}).  Will be used as the controlling unknown of 
{\b PropertyHelper}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface used to access the 
properties of the parent object.  Note that this interface is 
{\i not}
 {\b AddRef}d by {\b AllocPropertyHelper}, since doing so 
would likely cause a circular reference count.  Therefore it is 
the caller's responsibility to ensure that {\i ppvio} remain valid 
for the lifetime of the {\b PropertyHelper} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The class of the containing object (the object 
which implements {\b IPersistVariantIO}).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the non-delegating 
{\b IUnknown} of the allocated {\b PropertyHelper} object.  NULL is 
stored in *{\i ppunk} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b PropertyHelper} for more information.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how a control might use 
{\b AllocPropertyHelper}.  This example control is aggregatable, though 
the control need not be aggregatable to use {\b AllocPropertyHelper}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 // control implementation\par 

class CMyControl : public INonDelegatingUnknown, public IOleControl,\par 

\tab public IPersistVariantIO ...\par 

\{\par 

\par 

///// general control state\par 

protected:\par 

\tab BOOL            m_fDirty;       // TRUE iff control needs saving\par 

\tab IUnknown *      m_punkPropHelp; // aggregated PropertyHelper object\par 

\tab ...\par 

\par 

///// construction, destruction\par 

public:\par 

\tab CMyControl(IUnknown *punkOuter, HRESULT *phr);\par 

\tab virtual ~CMyControl();\par 

\par 

///// non-delegating IUnknown implementation\par 

protected:\par 

\tab ULONG           m_cRef;         // object reference count\par 

\tab STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, LPVOID *ppv);\par 

\tab STDMETHODIMP_(ULONG) NonDelegatingAddRef();\par 

\tab STDMETHODIMP_(ULONG) NonDelegatingRelease();\par 

\par 

///// delegating IUnknown implementation\par 

protected:\par 

\tab LPUNKNOWN       m_punkOuter;    // controlling unknown\par 

\tab STDMETHODIMP QueryInterface(REFIID riid, LPVOID *ppv)\par 

\tab   \{ return m_punkOuter->QueryInterface(riid, ppv); \}\par 

\tab STDMETHODIMP_(ULONG) AddRef()\par 

\tab   \{ return m_punkOuter->AddRef(); \}\par 

\tab STDMETHODIMP_(ULONG) Release()\par 

\tab   \{ return m_punkOuter->Release(); \}\par 

\par 

///// IOleControl implementation\par 

protected:\par 

\tab STDMETHODIMP GetControlInfo(LPCONTROLINFO pCI);\par 

\tab STDMETHODIMP OnMnemonic(LPMSG pMsg);\par 

\tab STDMETHODIMP OnAmbientPropertyChange(DISPID dispid);\par 

\tab STDMETHODIMP FreezeEvents(BOOL bFreeze);\par 

\par 

///// IPersistVariantIO implementation\par 

protected:\par 

\tab STDMETHODIMP InitNew();\par 

\tab STDMETHODIMP IsDirty();\par 

\tab STDMETHODIMP DoPersist(IVariantIO* pvio, DWORD dwFlags);\par 

\par 

...\par 

\};\par 

\par 

CMyControl::CMyControl(IUnknown *punkOuter, HRESULT *phr)\par 

\{\par 

\tab // initialize IUnknown state\par 

\tab m_cRef = 1;\par 

\tab m_punkOuter = (punkOuter == NULL ?\par 

\tab \tab (IUnknown *) (INonDelegatingUnknown *) this : punkOuter);\par 

\par 

\tab // set the control's default properties\par 

\tab ...\par 

\par 

\tab // allocate a PropertyHelper object (to be aggregated with this\par 

\tab // object) to implement persistence and properties\par 

\tab if (FAILED(*phr = AllocPropertyHelper(m_punkOuter, this,\par 

\tab \tab \tab CLSID_CMyControl, 0, &m_punkPropHelp)))\par 

\tab \tab return;\par 

\par 

\tab // other initialization\par 

\tab ...\par 

\par 

\tab *phr = S_OK;\par 

\}\par 

\par 

CMyControl::~CMyControl()\par 

\{\par 

\tab // clean up\par 

\tab if (m_punkPropHelp != NULL)\par 

\tab \tab m_punkPropHelp->Release();\par 

\tab ...\par 

\}\par 

\par 

STDMETHODIMP CMyControl::NonDelegatingQueryInterface(REFIID riid,\par 

\tab LPVOID *ppv)\par 

\{\par 

\tab *ppv = NULL;\par 

\tab if (IsEqualIID(riid, IID_IUnknown))\par 

\tab \tab *ppv = (IUnknown *) (INonDelegatingUnknown *) this;\par 

\tab else\par 

\tab if (IsEqualIID(riid, IID_IOleControl))\par 

\tab \tab *ppv = (IOleControl *) this;\par 

\tab else\par 

\tab ...\par 

\tab else\par 

\tab \tab return m_punkPropHelp->QueryInterface(riid, ppv);\par 

\par 

\tab ((IUnknown *) *ppv)->AddRef();\par 

\tab return S_OK;\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocPropPageHelper\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocPropPageHelper(}{\b LPUNKNOWN} {\i punkOuter}{\b , PropPageHelperInfo *} {\i pInfo}{\b , UINT} {\i cbInfo}{\b , LPUNKNOWN *} {\i ppunk}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates a {\b PropPageHelper} object which helps a control implement 
a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/PROPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The {\b IUnknown} of the control's property page 
object.  Will be used as the controlling unknown of {\b PropPageHelper}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a {\b PropPageHelperInfo} 
structure allocated within the control's property page object. 
Note that {\b PropPageHelper} will hold onto a pointer to this 
structure.  These fields of {\i pInfo} must be initialized by the 
caller: {\i idDialog}, {\i idTitle}, {\i hinst}, {\i pproc}, {\i iid}, and 
{\i dwUser}.  The other fields will be initialized by {\b PropPageHelper}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size of the structure pointed to by {\i punkOuter} 
(used for version checking).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the non-delegating 
{\b IUnknown} of the allocatedd {\b PropPageHelper} object.  NULL is 
stored in *{\i ppunk} on error.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocSiteLW\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocSiteLW(}{\b HWND} {\i hwnd}{\b , HINSTANCE} {\i hinst}{\b , ISiteLW * *} {\i ppsite}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b SiteLW} object that can host a single lightweight 
windowless ActiveX control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Window into which the site object will display the 
loaded control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hinst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Instance handle of the DLL which contains the 
resources used by {\b SiteLW}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppsite}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the new {\b ISiteLW} 
pointer.  NULL is stored in *{\i ppsite} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The newly-created site object initially has no ActiveX control 
loaded.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocVariantIO\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocVariantIO(}{\b IManageVariantIO * *} {\i ppmvio}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b VariantIO} object which provides a property bag 
implementation which supports {\b IPropertyBag} as well as 
{\b IVariantIO}, {\b IManageVariantIO}, and {\b IEnumVariantProperty}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppmvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the {\b IManageVariantIO} 
pointer to the new {\b VariantIO} object.  NULL is stored in *{\i ppmvio} 
on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that {\b IManageVariantIO} is based on {\b IVariantIO}, so 
the pointer returned in *{\i ppmvio} can be safely cast to 
an {\b IVariantIO} pointer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocVariantIOOnPropertyBag\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocVariantIOOnPropertyBag(}{\b IPropertyBag *} {\i ppb}{\b , IManageVariantIO * *} {\i ppmvio}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b VariantIOOnPropertyBag} object which provides an 
implementation of {\b IVariantIO} (and {\b IManageVariantIO}) 
that operates on a given {\b IPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/AVIOOPB.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Property bag that the new object is to 
operate on.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppmvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the {\b IManageVariantIO} 
pointer to the new {\b VariantIOOnPropertyBag} object.  NULL is stored 
in *{\i ppmvio} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that {\b IManageVariantIO} is based on {\b IVariantIO}, so 
the pointer returned in *{\i ppmvio} can be safely cast to 
an {\b IVariantIO} pointer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocVariantIOToMapDISPID\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b AllocVariantIOToMapDISPID(}{\b char *} {\i pchPropName}{\b , DISPID *} {\i pdispid}{\b , VARIANT *} {\i pvar}{\b , DWORD} {\i dwFlags}{\b , IVariantIO * *} {\i ppvio}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a {\b VariantIOToMapDISPID} object which provides an 
implementation of {\b IVariantIO} which is used to map a property name 
to a DISPID (property number) or vice versa.  Can also be used to get 
or set the value of that property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/AVIOTMD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchPropName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to a caller-allocated buffer 
containing (on entry) either a property name to search for the DISPID 
of, or "" if it's the property name being searched for (if 
*{\i pdispid} contains a non-negative number on entry). 
{\i pchPropName} must remain valid for the lifetime of the 
allocated object.  If {\i pchPropName} is "" on entry, then it must 
have enough space for _MAX_PATH characters.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to a caller-allocated DISPID variable 
containing (on entry) either a DISPID to find the property name of, 
or -1 if it's the DISPID that's being searched for (if {\i pchPropName} 
is non-empty on entry).  *{\i pdispid} must remain valid for the 
lifetime of the allocated object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to a caller-allocated VARIANT variable, 
if either VIOTMD_GETPROP or VIOTMD_PUTPROP are specified in 
{\i dwFlags} -- see those flags for more information.  If provided, 
*{\i pvar} must be initialized by {\b VariantInit} on entry and must 
remain valid for the lifetime of the allocated object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May optionally contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIOTMD_GETPROP\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The value of the property (if found) is 
copied to *{\i pvar}.  The previous value in *{\i pvar} 
is cleared using {\b VariantClear}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIOTMD_PUTPROP\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The value of the property (if found) is 
set to *{\i pvar}, which must contain a valid valu on entry.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the {\b IVariantIO} 
pointer to the new {\b VariantIOToMapDISPID} object.  NULL is stored 
in *{\i ppvio} on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 DISPIDs assigned by this function start at DISPID_BASE (defined in 
ochelp.h) to avoid colliding with the DISPID values assigned by 
{\b DispatchHelpGetIDsOfNames}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 To find the DISPID of property "Foo" implemented by an object {\i ppvio} 
that implements {\b IPeristVariantIO}, do the following.  Error checking 
is not shown.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 char *achPropName = "Foo";\par 

DISPID dispid = -1;\par 

IVariantIO *pvio;\par 

AllocVariantIOToMapDISPID(&szPropName, &dispid, NULL, 0, &pvio);\par 

ppvio->DoPersist(pvio, PVIO_PROPNAMESONLY);\par 

if (dispid != -1)\par 

\tab ... found DISPID <dispid> ...\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 To find the property name of a property with DISPID 7 implemented by an 
object {\i ppvio} that implements {\b IPeristVariantIO}, do the 
following.  Error checking is not shown.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 char achPropName[_MAX_PATH];\par 

achPropName[0] = 0;\par 

DISPID dispid = 7;\par 

IVariantIO *pvio;\par 

AllocVariantIOToMapDISPID(&achPropName, &dispid, NULL, 0, &pvio);\par 

ppvio->DoPersist(pvio, PVIO_PROPNAMESONLY);\par 

if (achPropName[0] != 0)\par 

\tab ... found property name <achPropName>...\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 To set the value of the property with DISPID 7 to 32-bit integer 
value 42, do the following.  Error checking is not shown.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 char achPropName[_MAX_PATH];\par 

achPropName[0] = 0;\par 

DISPID dispid = 7;\par 

IVariantIO *pvio;\par 

VARIANT var;\par 

var.vt = VT_I2;\par 

V_I2(&var) = 42;\par 

AllocVariantIOToMapDISPID(&achPropName, &dispid, &var, VIOTMD_PUTPROP,\par 

\tab &pvio);\par 

ppvio->DoPersist(pvio, 0);\par 

if (achPropName[0] != 0)\par 

\tab ... successfully set property <dispid> to value <var> ...\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AllocVerbEnumHelper\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b IEnumOLEVERB*} {\b AllocVerbEnumHelper(}{\b LPUNKNOWN} {\i punkOuter}{\b , void*} {\i pOwner}{\b , CLSID} {\i clsidOwner}{\b , VERB_ENUM_CALLBACK*} {\i pCallback}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates and initializes a verb enumeration helper.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/ENUMVERB.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 The verb enumeration helper's {\b IEnumOLEVerb} interface or 
NULL if out of memory.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The controlling unknown.  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pOwner}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The verbs' "owner".  That is, the object to which the verbs 
refer.  May not be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i clsidOwner}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The class ID of {\i pOwner}.  When the verb helper is 
allocated, {\i clsidOwner} is passed to {\b OleRegEnumVerbs} to 
get an {\b IEnumOLEVERB} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCallback}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] This function will be called whenever the verb helper is 
asked for verbs via its internal {\b IEnumOLEVERB::Next}
 method. 
{\i pCallback} is passed a pointer to each {\b OLEVERB}.  May not 
be NULL.  {\b VERB_ENUM_CALLBACK} is defined as follows:\par 

typedef HRESULT (VERB_ENUM_CALLBACK)(OLEVERB* pVerb, void* pOwner);\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 To implement {\b IOleObject::EnumVerbs}
, make sure that {\i pObject}'s 
class registers its verbs, define a {\b VERB_ENUM_CALLBACK} 
callback function and implement {\b IOleObject::EnumVerbs}
 by 
calling {\b AllocVerbEnumHelper}.  That's all it takes.\par 

Typically the {\i pCallback} function adjusts the state of 
the verb's menu item based on the state of the {\i pOwner} object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows a typical implementation of 
{\b IOleObject::EnumVerbs}
, and the verb helper callback function:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::EnumVerbs(IEnumOLEVERB** ppEnumOleVerb)\par 

\{\par 

\tab HRESULT hResult;\par 

\tab *ppEnumOleVerb = AllocVerbEnumHelper(NULL, CLSID_CMyControl,\par 

\tab \tab \tab \tab \tab \tab &VerbEnumCallback, this);\par 

\tab hResult = (*ppEnumOleVerb != NULL) ? S_OK : E_OUTOFMEMORY;\par 

\tab return (hResult);\par 

\}\par 

\par 

HRESULT VerbEnumCallback(\par 

OLEVERB* pVerb,\par 

void* pOwner)\par 

\{\par 

\tab int flag;\par 

\tab CMyControl* pMyControl = (CMyControl*)pOwner;\par 

\par 

\tab switch (pVerb->lVerb)\par 

\tab \{\par 

\tab \tab case 0: // verb 0\par 

\tab \tab \tab // if pMyControl indicates that verb 0 should be enabled\par 

\tab \tab \tab //\tab \tab flag = MF_ENABLED;\par 

\tab \tab \tab // else\par 

\tab \tab \tab //\tab \tab flag = MF_GRAYED;\par 

\tab \tab \tab break;\par 

\tab \tab case 1: // verb 1\par 

\tab \tab \tab // if pMyControl indicates that verb 1 should be enabled\par 

\tab \tab \tab //\tab \tab flag = MF_ENABLED;\par 

\tab \tab \tab // else\par 

\tab \tab \tab //\tab \tab flag = MF_GRAYED;\par 

\tab \tab \tab break;\par 

\par 

\tab \tab // etc.\par 

\par 

\tab \tab default:\par 

\tab \tab \tab break;\par 

\tab \}\par 

\tab pVerb->fuFlags |= flag;\par 

\tab return (S_OK);\par 

\}\par 

---------------------------------------------------------------------------\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ANSIToUNICODE\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b ANSIToUNICODE(}{\b LPWSTR} {\i pwchDst}{\b , LPCSTR} {\i pchSrc}{\b , int} {\i cwchDstMax}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts an ANSI string to UNICODE.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/UNICODE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwchDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The buffer that will hold the output UNICODE string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input ANSI string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cwchDstMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The capacity of {\i pwchDst} (in wide characters).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 AtEndOfMRUList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b AtEndOfMRUList(}{\b HMRULIST} {\i hMRUList}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Tests if {\b GetNextMRUListEntry} has advanced to the end of 
an MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns one of the following:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 TRUE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 At the end.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 FALSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Not at the end. 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ChildPropertyBag Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Implements {\b IPropertyBag} that provides a child object (contained 
within a parent object) access to the child's properties, which 
are stored within the parent's property bag.  The name of each child's 
property is prefixed with a given string (e.g. "Controls(7).").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ACPB.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface through which the child object 
accesses its properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocChildPropertyBag} to create a 
{\b ChildPropertyBag} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CloseMRUList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CloseMRUList(}{\b HMRULIST} {\i hMRUList}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Closes a previously opened MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success. 
---------------------------------------------------------------------------\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CLSIDFromTCHAR\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CLSIDFromTCHAR(}{\b const TCHAR*} {\i pszCLSID}{\b , CLSID*} {\i pclsid}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a string into a CLSID.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/TCH2CLSD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszCLSID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A TCHAR-based string representation of the CLSID.  Can't 
be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Set to the resultant class ID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function is a TCHAR equivalent of {\b CLSIDFromString} which 
only works with an OLESTR.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.  The value of {\i pclsid} is indeterminate.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b TCHARFromGUID} 
---------------------------------------------------------------------------\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CLSIDToFriendlyName\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CLSIDToFriendlyName(}{\b REFCLSID} {\i clsid}{\b , TCHAR*} {\i pszFriendlyName}{\b , int} {\i cchMaxFriendlyNameLen}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Finds the "friendly name" associated with a given class in the 
system registry.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/CLSID2FN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i clsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The ID of the target class.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszFriendlyName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If successful, set to the first {\i cchMaxFriendlyNameLen} 
charactes of the friendly name.  Assumed, on entry, to point to 
a buffer of at least {\i cchMaxFriendlyNameLen} characters. 
Cannot be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchMaxFriendlyNameLen}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The maximum number of characters of the friendly name 
to retrieve.  Must be greater than 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Assumes that the system registry is structured as follows:\par 

HKEY_CLASSES_ROOT 
CLSID 
{\i clsid} 
ProgID=<progID> 
: 
<progID>=<friendly name> 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Failure.  {\i pszFriendlyName} is guaranteed to be set 
to an empty string.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CompareUNICODEStrings\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b CompareUNICODEStrings(}{\b LPCWSTR} {\i wsz1}{\b , LPCWSTR} {\i wsz2}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Compares two UNICODE strings.  The comparison is case-insensitive.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CUS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same values as {\b lstrcmpi}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wsz1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 First string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wsz2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Second string.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Currently, neither {\i wsz1} or {\i wsz2} can be longer than 
_MAX_PATH characters.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ConnectionPointHelper Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Contains functions for implementing the {\b ConnectionPointHelper} 
object, which provides a simple implementation of an 
{\b IDispatch}-based {\b IConnectionPoint}.  Also contains helper 
functions for implementing {\b IConnectionPointContainer} in the 
case where this is only connection maintained by the connection 
point container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IConnectionPoint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Standard OLE connection point interface. 
An arbitrary number of connections are supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IConnectionPointHelper}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Contains methods for firing events to 
the objects connected to this object via {\b IConnectionPoint}. 
Also contains helper functions for implementing 
{\b IConnectionPointContainer} in the container object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CreateBorderBrush\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HBRUSH} {\b CreateBorderBrush(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates and returns a hatch pattern brush used to draw control 
resize borders and grab handles.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/BRUSH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the created brush.  The caller is responsible 
for freeing the brush using {\b DeleteObject}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The returned brush is the standard brush for use in drawing 
control borders and grab handles.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CreateControlInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CreateControlInstance(}{\b LPCSTR} {\i szName}{\b , LPUNKNOWN} {\i punkOuter}{\b , DWORD} {\i dwClsContext}{\b , LPUNKNOWN *} {\i ppunk}{\b , CLSID *} {\i pclsid}{\b , BOOL *} {\i pfSafeForScripting}{\b , BOOL *} {\i pfSafeForInitializing}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a new instance of a control given either a class ID (in 
string form) or a ProgID.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/CCI.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The class ID or ProgID of the control to create.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The controlling unknown to use for the 
new object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwClsContext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the context in which the executable 
is to be run. The values are taken from the enumeration CLSCTX. 
A typical value is CLSCTX_INPROC_SERVER.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the pointer to the loaded object. 
NULL is stored in *{\i ppunk} on error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the class ID of the loaded object. 
If {\i pclsid} is NULL then this information is not returned.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfSafeForScripting}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If non-NULL, *{\i pfSafeForScripting} is 
set to TRUE or FALSE depending on whether the control is safe-for-scripting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfSafeForInitializing}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If non-NULL, *{\i pfSafeForInitializing} is 
set to TRUE or FALSE depending on whether the control is safe-for-initializing.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRegMRUList::Init\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRegMRUList}{\b ::Init(}{\b int} {\i cMaxEntries}{\b , HKEY} {\i hKey}{\b , [in] LPCTSTR} {\i pszSubkey}{\b , [in] LPCTSTR} {\i pszListName}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes an MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cMaxEntries}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The maximum number of entries in the list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The list will be opened at the registry path, 
{\i hKey}\\{\i pszSubkey}\\{\i pszListName}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszSubkey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 (See {\i hKey}.)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszListName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 (See {\i hKey}.)\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This must be the first function called on the list after it has 
been created.\par 

If the registry key contains more than {\i cMaxEntries}, it will 
be truncated to {\i cMaxEntries}. 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DebugCLSIDName\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b ifdef _DEBUGLPCSTR} {\b DebugCLSIDName(}{\b REFCLSID} {\i rclsid}{\b , LPSTR} {\i pchName}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Finds the name of an interface in the system registration database 
given the interface's CLSID (for debugging purposes only).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/DEBUG.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to {\i pchName}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Class ID to find the name of.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the class ID name string.  This buffer should be 
large enough to hold _MAX_PATH characters.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If the interface name is not found, a hexadecimal string form of 
{\i rclsid} will be returned 
(e.g. "\{209D2C80-11D7-101B-BF00-00AA002FC1C2\}").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This function is only available in a debug build.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DebugIIDName\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LPCSTR} {\b DebugIIDName(}{\b REFIID} {\i riid}{\b , LPSTR} {\i pchName}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Finds the name of an interface in the system registration database 
given the interface's IID (for debugging purposes only).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/DEBUG.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to {\i pchName}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Interface ID to find the name of.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the class ID name string.  This buffer should be 
large enough to hold _MAX_PATH characters.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If the interface name is not found, a hexadecimal string form of 
{\i riid} will be returned 
(e.g. "\{209D2C80-11D7-101B-BF00-00AA002FC1C2\}").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This function is only available in a debug build.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchGetArgs\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DispatchGetArgs(}{\b DISPPARAMS *} {\i pdp}{\b , DWORD} {\i dwFlags}{\b , (varying)} {\i (arguments)}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves arguments from a DISPPARAMS structure passed to 
{\b IDispatch::Invoke}
.  Arguments are stored in variables that 
are passed to {\b DispatchGetArgs} as a va_list array. 
Used to help implement {\b IDispatch::Invoke}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The structure to retrieve arguments from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DGA_EXTRAOK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Don't return an error code if {\i pdp} contains 
more actual arguments than the number of formal parameters 
specified in {\i (arguments)}.  Instead, just ignore the extra 
arguments in {\i pdp}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DGA_FEWEROK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Don't return an error code if {\i pdp} contains 
fewer actual arguments than the number of formal parameters 
specified in {\i (arguments)}.  Instead, ignore the extra 
parameters.  In this case, the variables pointed to by 
elements of {\i (arguments)} should be pre-initialized to 
default values before this function is called.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i (arguments)}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A list of pointers to variables which will 
receive the values of arguments from {\i pdp}.  These must consist of N 
pairs of arguments followed by a 0 (zero value).  In each pair, the 
first argument is a VARTYPE value that indicates the type of variable 
that the the second argument points to.  (The actual arguments in 
{\i pdp} will be coerced to the types specified in {\i (arguments)}, 
if possible.) The following VARTYPE values are supported:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_INT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an int *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_I2\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a short *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_I4\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a long *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_R4\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a float *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_R8\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a double *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_BOOL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a BOOL * ({\i not}
 a 
VARIANT_BOOL *).  Note that this behavior differs 
slightly from the usual definition of VT_BOOL.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_BSTR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a BSTR *.  The caller 
of {\b DispatchGetArgs} should free this BSTR using 
{\b SysFreeString}.  {\b IMPORTANT}
 This behavior has changed: 
previously the caller was {\b NOT}
 supposed to free this BSTR. 
(Note that the caller must free the BSTR because it may 
have been coerced from e.g. an integer.)\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_LPSTR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an LPSTR that points 
to a char array capable of holding at least _MAX_PATH 
characters including the terminating NULL.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_DISPATCH\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an LPDISPATCH *. 
The caller of {\b DispatchGetArgs} should not call {\b Release} 
on this LPDISPATCH.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_VARIANT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following arguement is a VARIANT *. 
This allows arbitrary parameters to be passed using this 
function.  Note that this behavior differs from the usual 
definition of VT_VARIANT.  The caller of {\b DispatchGetArgs} 
should not call VariantClear on this VARIANT.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows two parameters, an integer and a string, 
being retrieved from {\i pdispparams} and stored into {\i i} and 
{\i ach}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 int i;\par 

char ach[_MAX_PATH];\par 

DispatchGetArgs(pdispparams, 0, VT_INT, &i, VT_LPSTR, ach, 0);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADPARAMCOUNT\cell The number of arguments in {\i pdp} doesn't match the number of 
arguments specified in {\i (arguments)}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADVARTYPE\cell One of the VARTYPE values in {\i (arguments)} is invalid.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_TYPEMISMATCH\cell One of the arguements in {\i pdp} could not be coerced to the type 
of the corresponding parameter in {\i (arguments)}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchGetArgsList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DispatchGetArgsList(}{\b DISPPARAMS *} {\i pdp}{\b , DWORD} {\i dwFlags}{\b , va_list} {\i args}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves arguments from a DISPPARAMS structure passed to 
{\b IDispatch::Invoke}
.  Arguments are stored in variables that 
are passed to {\b DispatchGetArgsList} as a va_list array. 
Used to help implement {\b IDispatch::Invoke}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The structure to retrieve arguments from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DGA_EXTRAOK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Don't return an error code if {\i pdp} contains 
more actual arguments than the number of formal parameters 
specified in {\i args}.  Instead, just ignore the extra 
arguments in {\i pdp}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DGA_FEWEROK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Don't return an error code if {\i pdp} contains 
fewer actual arguments than the number of formal parameters 
specified in {\i args}.  Instead, ignore the extra parameters. 
In this case, the variables pointed to by elements of {\i args} 
should be pre-initialized to default values before this 
function is called.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i args}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A list of pointers to variables which will receive 
the arguments from {\i pdp}.  See {\b DispatchGetArgs} for a description 
of the organizatin of {\i args}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADPARAMCOUNT\cell The number of arguments in {\i pdp} doesn't match the number of 
arguments specified in {\i args}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADVARTYPE\cell One of the VARTYPE values in {\i args} is invalid.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_TYPEMISMATCH\cell One of the arguements in {\i pdp} could not be coerced to the type 
of the corresponding parameter in {\i args}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchHelpGetIDsOfNames\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DispatchHelpGetIDsOfNames(}{\b REFIID} {\i riid}{\b , LPOLESTR *} {\i rgszNames}{\b , UINT} {\i cNames}{\b , LCID} {\i lcid}{\b , DISPID *} {\i rgdispid}{\b , char *} {\i szList}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IDispatch::GetIDsOfNames}
 given a string that 
contains the list of {\b IDispatch} member names.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same return codes as {\b IDispatch::GetIDsOfNames}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 As defined for {\b IDispatch::GetIDsOfNames}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rgszNames}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 As defined for {\b IDispatch::GetIDsOfNames}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cNames}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 As defined for {\b IDispatch::GetIDsOfNames}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lcid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 As defined for {\b IDispatch::GetIDsOfNames}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rgdispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 As defined for {\b IDispatch::GetIDsOfNames}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The list of member names.  Each name in the list 
must be terminated by a newline.  The first member name is assigned 
DISPID value 0, the second 1, and so on.  For example, if {\i szList} 
is "\\nFoo\\nBar\\n", then "Foo" is assigned DISPID value 1 and "Bar" 
is assigned 2 (because, in this example, the first string in {\i szList} 
is "").\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchIDToName\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DISPID} {\b DispatchIDToName(}{\b char *} {\i szList}{\b , DISPID} {\i dispid}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Look up a DISPID in a list of names of methods and properties and 
return the member name (if found).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPID.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to member number {\i dispid} in {\i szList} if found, 
or NULL if not found.  Note that the returned string is terminated 
by a newline character, not a null character -- user {\i ppch} to 
copy the string (see the example below).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The list of member names to look up {\i szName} in. 
{\i szList} consists of the concatenation of each member name, 
where each member name is terminated by a newline character 
(e.g. "Foo\\nBar\\n").\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The member ID to look up.  The first member in 
{\i szList} has DISPID 1; the second 2, and so on.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code stores "Bar" in {\i ach}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 int cch;\par 

char ach[100];\par 

char *sz;\par 

DISPID dispid = 2;\par 

sz = DispatchIDToName("Foo\\nBar\\n", dispid, &cch);\par 

if (sz != NULL)\par 

\tab lstrcpyn(ach, sz, cch + 1);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchInvoke\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DispatchInvoke(}{\b IDispatch *} {\i pdisp}{\b , DISPID} {\i dispid}{\b , WORD} {\i wFlags}{\b , VARIANT *} {\i pvarResult}{\b , (varying)} {\i (arguments)}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Calls {\b IDispatch::Invoke}
 on a given {\b IDispatch} object, passing 
arguments specified as a variable-length list of arguments.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same HRESULT as {\b IDispatch::Invoke}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdisp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to call {\b IDispatch::Invoke}
 on.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ID of the property or method to invoke.  See 
{\b IDispatch::Invoke}
 for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May be one of the following values (see 
{\b IDispatch::Invoke}
 for more information):\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DISPATCH_METHOD\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The member {\i dispid} is being invoked as a 
method.  If a property has the same name, both this and the 
DISPATCH_PROPERTYGET flag may be set.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DISPATCH_PROPERTYGET\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The member {\i dispid} is being retrieved 
as a property or data member.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DISPATCH_PROPERTYPUT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The member {\i dispid} is being changed 
as a property or data member.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the return value from the 
method or property-get call.  If {\i pvarResult} is NULL, the result 
(if any) is discarded.  If {\i pvarResult} is non-NULL, then it is the 
caller's responsibility to call {\b VariantClear}({\i pvarResult}) 
on exit (but the caller doesn't have to call 
{\b VariantInit}({\i pvarResult}) on entry).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i (arguments)}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The arguments to pass to the method or 
property.  These must consist of N pairs of arguments followed by 
a 0 (zero value).  In each pair, the first argument is a VARTYPE 
value that indicates the type of the second argument.  The following 
VARTYPE values are supported:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_INT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an int.  {\b Invoke} 
passes this as VT_I4, so this parameter should be declared 
as a Long in BASIC.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_I2\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a short.  In BASIC 
this parameter should be declared as Integer.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_I4\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a long.  In BASIC 
this parameter should be declared as Long.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_R4\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a float.  In BASIC 
this parameter should be declared as Single.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_R8\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a double.  In BASIC 
this parameter should be declared as Double.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_BOOL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a BOOL ({\i not}
 a 
VARIANT_BOOL).  In BASIC this parameter should be declared 
as Boolean or Integer.  Note that this behavior differs 
slightly from the usual definition of VT_BOOL.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_BSTR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a BSTR.  In BASIC this 
parameter should be declared as String.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_LPSTR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an LPSTR.  {\b Invoke} 
passes this as a BSTR, so this parameter should be declared 
as a String in BASIC.  Note that this behavior differs 
from the usual definition of VT_LPSTR.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_DISPATCH\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an LPDISPATCH.  In 
BASIC this parameter should be declared as an Object.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_VARIANT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following arguement is a VARIANT that is 
passed as-is to {\b Invoke}.  This allows arbitrary parameters 
to be passed using this function.  Note that this behavior 
differs from the usual definition of VT_VARIANT.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Named arguments are not supported by this function.\par 

Don't forget to add a 0 argument to the end of the argument list.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example calls method DISPID_BAR, passing arguments 
42, "Hi There", and TRUE.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 pdisp->DispatchInvoke(pdisp, DISPID_BAR, DISPATCH_METHOD,\par 

\tab VT_INT, 42, VT_LPSTR, "Hi There", VT_BOOL, TRUE, 0);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchInvokeList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DispatchInvokeList(}{\b IDispatch *} {\i pdisp}{\b , DISPID} {\i dispid}{\b , WORD} {\i wFlags}{\b , VARIANT *} {\i pvarResult}{\b , va_list} {\i args}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Calls {\b IDispatch::Invoke}
 on a given {\b IDispatch} object, passing 
arguments specified as a va_list array.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same HRESULT as {\b IDispatch::Invoke}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdisp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to call {\b IDispatch::Invoke}
 on.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ID of the property or method to invoke.  See 
{\b IDispatch::Invoke}
 for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May be one of the following values (see 
{\b IDispatch::Invoke}
 for more information):\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DISPATCH_METHOD\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The member {\i dispid} is being invoked as a 
method.  If a property has the same name, both this and the 
DISPATCH_PROPERTYGET flag may be set.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DISPATCH_PROPERTYGET\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The member {\i dispid} is being retrieved 
as a property or data member.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DISPATCH_PROPERTYPUT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The member {\i dispid} is being changed 
as a property or data member.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the return value from the 
method or property-get call.  If {\i pvarResult} is NULL, the result 
(if any) is discarded.  If {\i pvarResult} is non-NULL, then it is the 
caller's responsibility to call {\b VariantClear}({\i pvarResult}) 
on exit (but the caller doesn't have to call 
{\b VariantInit}({\i pvarResult}) on entry).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i args}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The arguments to pass to the method or property. 
See {\b DispatchInvoke} for a description of the organization of 
{\i args}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Named arguments are not supported by this function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchNameToID\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DISPID} {\b DispatchNameToID(}{\b char *} {\i szList}{\b , char *} {\i szName}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Look up a {\b IDispatch} member name (e.g. the name of a method 
or property) in a list of names and return the DISPID of the 
member name (if found).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPID.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the DISPID of {\i szName} if {\i szName} is found in 
{\i szList}.  Returns -1 if {\i szName} is not found.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The list of member names to look up {\i szName} in. 
{\i szList} consists of the concatenation of each member name, 
where each member name is terminated by a newline character 
(e.g. "Foo\\nBar\\n").\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The member name to look up.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following line of code sets {\i dispid} to 2.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 dispid = DispatchNameToID("Foo\\\\nBar\\\\n", "bar");\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchPropertyGet\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DispatchPropertyGet(}{\b IDispatch *} {\i pdisp}{\b , DISPID} {\i dispid}{\b , VARIANT *} {\i pvarResult}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Gets the value of a given property on a given {\b IDispatch} object. 
Used to help call {\b IDispatch::Invoke}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same HRESULT as {\b IDispatch::Invoke}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdisp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to call {\b IDispatch::Invoke}
 on.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ID of the property.  See {\b IDispatch::Invoke}
 
for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the return value from the 
method or property-get call.  It is the caller's responsibility to 
call {\b VariantClear}({\i pvarResult}) on exit (but the caller doesn't 
have to call {\b VariantInit}({\i pvarResult}) on entry).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Properties with parameters are not supported -- use 
{\b DispatchInvoke} instead.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DispatchPropertyPut\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DispatchPropertyPut(}{\b IDispatch *} {\i pdisp}{\b , DISPID} {\i dispid}{\b , VARTYPE} {\i vt}{\b , (varying)} {\i value}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the value of a given property on a given {\b IDispatch} object. 
Used to help call {\b IDispatch::Invoke}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same HRESULT as {\b IDispatch::Invoke}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdisp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to call {\b IDispatch::Invoke}
 on.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ID of the property.  See {\b IDispatch::Invoke}
 
for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i vt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type of the {\i value} parameter.  The valid values 
for {\i vt} are the same as the VT_ values documented in 
{\b DispatchInvoke}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i value}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The new property value.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Properties with parameters are not supported -- use 
{\b DispatchInvoke} instead.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DrawControlBorder\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b DrawControlBorder(}{\b HDC} {\i hdc}{\b , RECT *} {\i prc}{\b , POINT *} {\i ppt}{\b , POINT *} {\i pptNew}{\b , int *} {\i piHit}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Draws a border used to drag and resize controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/BORDER.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hdc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Device context to draw into.  If {\i hdc} is NULL then 
no drawing is performed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i prc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to draw border.  The border is drawn {\i outside}
 
this border.  If both {\i ppt} and {\i pptNew} are non-NULL, then 
on exit *{\i prc} is modified to contain the border rectangle obtained 
after the mouse is dragged from {\i ppt} to {\i pptNew}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Mouse position.  See {\i prc} and {\i piHit}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pptNew}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 New mouse position.  See {\i prc} and {\i piHit}. 
Note that if {\i pptNew} specifies an invalid mouse move (e.g. it 
would cause the right side of *{\i prc} to be dragged to the left of 
the left side of *{\i prc}) then *{\i pptNew} is adjusted so that 
it is valid.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i piHit}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If {\i pptNew} is NULL, then on exit *{\i piHit} contains 
a "hit test code" that indicates which part of the contro border was 
hit by *{\i ppt}.  If {\i pptNew} is not NULL, then on entry *{\i piHit} 
must contain a hit test code (usually returned from a previous call 
to {\b DrawControlBorder}) indicating which part of the control border 
the user wants to drag.  The hit test codes are as follows:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_HIT_NONE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No part of the border was hit.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_HIT_EDGE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The edge of the border was hit, but no 
grab handle was hit.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_HIT_GRAB({\i i}, {\i j})\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Grab handle ({\i i}, {\i j}) was hit, 
where {\i i} is the horizontal position of the grab handle 
(0=left, 1=middle, 2=right) and {\i j} is the vertical position 
of the handle (0=top, 1=middle, 2=bottom).  See Comments below 
for more information about how to interpret *{\i piHit}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_CORNERHANDLES\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Draw resize grab handles at the corners 
of the border rectangle.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_SIDEHANDLES\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Draw resize grab handles at the sides 
of the border rectangle.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_EDGE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Draw the edge of the border rectangle of the 
border rectangle.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_XORED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Draw the border with an exclusive-or brush.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_INFLATE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 On exit, inflate *{\i prc} enough so that it 
encloses the control border.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You can test if *{\i piHit} refers to a specific category of grab 
handle by computing the value (1 << *{\i piHit}) and peforming a 
bitwise and (&) with any of the following bit masks:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_CORNERHANDLES\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 *{\i piHit} refers to a corner grab handle.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_SIDEHANDLES\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 *{\i piHit} refers to a side grab handle.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_SIZENS\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 *{\i piHit} refers to a vertical (north-south 
resize grab handle (on the left or right sides).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_SIZEWE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 *{\i piHit} refers to a horizontal (west-east) 
resize grab handle (on the left or right sides).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_SIZENESW\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 *{\i piHit} refers to a resize grab handle at 
the north-east or south-west corner.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DCB_SIZENWSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 *{\i piHit} refers to a resize grab handle at 
the north-west or south-east corner.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to use {\b DrawControlBorder} to 
draw a border around a control (which is at position {\i g_rcControl} 
in the client area of a window) and allow the control to be moved 
and resized.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 // globals\par 

HINSTANCE       g_hinst;     // application instance handle\par 

RECT            g_rcControl;// location of simulated control\par 

RECT            g_rcGhost;  // location of ghost (XOR) image of border\par 

POINT           g_ptPrev;   // previous mouse location\par 

int             g_iDrag;    // which part of control border is dragged\par 

\par 

// window procedure of the window that contains the control\par 

LRESULT CALLBACK AppWndProc(HWND hwnd, UINT uiMsg, WPARAM wParam,\par 

\tab LPARAM lParam)\par 

\{\par 

\tab PAINTSTRUCT     ps;\par 

\tab int             iHit;\par 

\tab HDC             hdc;\par 

\tab POINT           ptCursor;\par 

\tab RECT            rc;\par 

\tab LPCTSTR         sz;\par 

\par 

\tab switch (uiMsg)\par 

\tab \{\par 

\par 

\tab case WM_PAINT:\par 

\par 

\tab \tab hdc = BeginPaint(hwnd, &ps);\par 

\par 

\tab \tab // draw the control\par 

\tab \tab ...\par 

\par 

\tab \tab // draw the control border outside <g_rcControl>\par 

\tab \tab DrawControlBorder(hdc, &g_rcControl, NULL, NULL, NULL,\par 

\tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES);\par 

\par 

\tab \tab EndPaint(hwnd, &ps);\par 

\tab \tab return 0;\par 

\par 

\tab case WM_SETCURSOR:\par 

\par 

\tab \tab // set <ptCursor> to the mouse position\par 

\tab \tab GetCursorPos(&ptCursor);\par 

\tab \tab ScreenToClient(hwnd, &ptCursor);\par 

\par 

\tab \tab // set <iHit> to a hit code which indicates which part of the\par 

\tab \tab // control border (if any) <ptCursor> is over\par 

\tab \tab DrawControlBorder(NULL, &g_rcControl, &ptCursor, NULL, &iHit,\par 

\tab \tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES);\par 

\par 

\tab \tab // set the cursor based on <iHit>\par 

\tab \tab if ((1 << iHit) & DCB_SIZENS)\par 

\tab \tab \tab sz = IDC_SIZENS;\par 

\tab \tab else\par 

\tab \tab if ((1 << iHit) & DCB_SIZEWE)\par 

\tab \tab \tab sz = IDC_SIZEWE;\par 

\tab \tab else\par 

\tab \tab if ((1 << iHit) & DCB_SIZENESW)\par 

\tab \tab \tab sz = IDC_SIZENESW;\par 

\tab \tab else\par 

\tab \tab if ((1 << iHit) & DCB_SIZENWSE)\par 

\tab \tab \tab sz = IDC_SIZENWSE;\par 

\tab \tab else\par 

\tab \tab \tab sz = IDC_ARROW;\par 

\tab \tab SetCursor(LoadCursor(NULL, sz));\par 

\tab \tab return TRUE;\par 

\par 

\tab case WM_LBUTTONDOWN:\par 

\par 

\tab \tab // set <ptCursor> to the mouse position\par 

\tab \tab ptCursor.x = (short) LOWORD(lParam);\par 

\tab \tab ptCursor.y = (short) HIWORD(lParam);\par 

\par 

\tab \tab // do nothing if <ptCursor> is not within the control border\par 

\tab \tab if (DrawControlBorder(NULL, &g_rcControl,\par 

\tab \tab \tab \tab &ptCursor, NULL, &g_iDrag,\par 

\tab \tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES) != S_OK)\par 

\tab \tab \tab break;\par 

\par 

\tab \tab // capture the mouse\par 

\tab \tab SetCapture(hwnd);\par 

\par 

\tab \tab // set the initial position of the border "ghost" (the XOR image\par 

\tab \tab // of the border) to be the current position of the control\par 

\tab \tab g_rcGhost = g_rcControl;\par 

\par 

\tab \tab // draw the control border XOR'd\par 

\tab \tab hdc = GetDC(hwnd);\par 

\tab \tab DrawControlBorder(hdc, &g_rcGhost, NULL, NULL, NULL,\par 

\tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES | DCB_XORED);\par 

\tab \tab ReleaseDC(hwnd, hdc);\par 

\par 

\tab \tab // remember the current cursor position\par 

\tab \tab g_ptPrev = ptCursor;\par 

\tab \tab break;\par 

\par 

\tab case WM_MOUSEMOVE:\par 

\par 

\tab \tab // do nothing if we're not dragging\par 

\tab \tab if (GetCapture() != hwnd)\par 

\tab \tab \tab break;\par 

\par 

\tab \tab // set <ptCursor> to the mouse position\par 

\tab \tab ptCursor.x = (short) LOWORD(lParam);\par 

\tab \tab ptCursor.y = (short) HIWORD(lParam);\par 

\par 

\tab \tab // move the control XOR image\par 

\tab \tab hdc = GetDC(hwnd);\par 

\tab \tab DrawControlBorder(hdc, &g_rcGhost,\par 

\tab \tab \tab &g_ptPrev, &ptCursor, &g_iDrag,\par 

\tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES | DCB_XORED);\par 

\tab \tab ReleaseDC(hwnd, hdc);\par 

\par 

\tab \tab // remember the current cursor position\par 

\tab \tab g_ptPrev = ptCursor;\par 

\tab \tab break;\par 

\par 

\tab case WM_LBUTTONUP:\par 

\par 

\tab \tab // do nothing if we're not dragging\par 

\tab \tab if (GetCapture() != hwnd)\par 

\tab \tab \tab break;\par 

\par 

\tab \tab // erase the control border XOR image\par 

\tab \tab hdc = GetDC(hwnd);\par 

\tab \tab DrawControlBorder(hdc, &g_rcGhost, NULL, NULL, NULL,\par 

\tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES | DCB_XORED);\par 

\tab \tab ReleaseDC(hwnd, hdc);\par 

\par 

\tab \tab // stop dragging\par 

\tab \tab ReleaseCapture();\par 

\par 

\tab \tab // move the control to the new location\par 

\tab \tab rc = g_rcControl;\par 

\tab \tab DrawControlBorder(NULL, &rc, NULL, NULL, NULL,\par 

\tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES |\par 

\tab \tab \tab DCB_INFLATE);\par 

\tab \tab InvalidateRect(hwnd, &rc, TRUE);\par 

\tab \tab g_rcControl = g_rcGhost;\par 

\tab \tab rc = g_rcControl;\par 

\tab \tab DrawControlBorder(NULL, &rc, NULL, NULL, NULL,\par 

\tab \tab \tab DCB_EDGE | DCB_CORNERHANDLES | DCB_SIDEHANDLES |\par 

\tab \tab \tab DCB_INFLATE);\par 

\tab \tab InvalidateRect(hwnd, &rc, TRUE);\par 

\tab \tab break;\par 

\par 

\tab ...\par 

\par 

\tab \}\par 

\par 

\tab return DefWindowProc(hwnd, uiMsg, wParam, lParam);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Success.  Also indicates that *{\i ppt} does not fall within 
any portion of the control border.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FindCharInString\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b char *} {\b FindCharInString(}{\b const char *} {\i sz}{\b , char} {\i chFind}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Search a string to find a specific character.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/FINDSTR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the first occurence of {\i chFind} in 
{\i sz}.  Returns NULL if {\i chFind} was not found.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i sz}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 String to search.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i chFind}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Character to find.  May be '\\0' to search for 
the end of the string.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The search is case-sensitive.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FindCharInStringRev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b char *} {\b FindCharInStringRev(}{\b const char *} {\i sz}{\b , char} {\i chFind}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Search a string to find the last occurrence of a specific character.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/FINDSTR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the last occurence of {\i chFind} in 
{\i sz}.  Returns NULL if {\i chFind} was not found.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i sz}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 String to search.  If NULL, the function returns NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i chFind}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Character to find.  May be '\\0' to search for 
the end of the string.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The search is case-sensitive.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FindStringByIndex\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b const char *} {\b FindStringByIndex(}{\b const char *} {\i szList}{\b , int} {\i iString}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Find a string with a given index in a list of strings.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/FINDSTR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to string number {\i iString} in {\i szList} if found, 
or NULL if not found.  Note that the returned string is terminated 
by a newline character, not a null character -- user {\i ppch} to 
copy the string (see the example below).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The list of strings to look up {\i iString} in. 
{\i szList} consists of the concatenation of each string, where each 
string is terminated by a newline character (e.g. "Foo\\nBar\\n").\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iString}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The index of the string to find.  The first string in 
{\i szList} has index 0; the second 1, and so on.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code stores "Bar" in {\i ach}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 int cch;\par 

char ach[100];\par 

char *sz = FindStringByIndex("Foo\\nBar\\n", 1, &cch);\par 

if (sz != NULL)\par 

\tab lstrcpyn(ach, sz, cch + 1);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FindStringByValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b FindStringByValue(}{\b const char *} {\i szList}{\b , const char *} {\i szFind}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Look up string in a list of strings and return the index of the 
string (if found).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/FINDSTR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the index of {\i szFind} if {\i szFind} is found in 
{\i szList}.  The first string in {\i szList} has index 0; the second 1, 
and so on.  Returns -1 if {\i szFind} is not found.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The list of strings to look up {\i szFind} in. 
{\i szList} consists of the concatenation of each string in the list, 
where each string is terminated by a newline character (e.g. 
"Foo\\nBar\\n").\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szFind}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The string to look up.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The search is case-insensitive.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following line of code sets {\i iString} to12.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 iString = FindStringByValue("Foo\\\\nBar\\\\n", "bar");\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FindStringInString\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LPCSTR} {\b FindStringInString(}{\b LPCSTR} {\i szToSearch}{\b , LPCSTR} {\i szToFind}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Finds a string within another string.  The comparison can be either 
case-sensitive or case-insensitive.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/FSIS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the substring within {\i szToSearch} that equals 
{\i szToFind}.  Returns NULL if {\i szToFind} is not found in 
{\i szToSearch}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szToSearch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The string to search.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szToFind}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The string to search for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 FSIS_IGNORECASE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The search is case-insensitive.  If this flag 
is not specified, the search is case-sensitive.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FreeConnectionPointHelper\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b FreeConnectionPointHelper(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Frees a {\b ConnectionPointHelper} object allocated using 
{\b AllocConnectionPointHelper}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b AllocConnectionPointHelper} for information about why you 
should not try to free the {\b ConnectionPointHelper} object 
using {\b Release}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetHalftonePalette\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HPALETTE} {\b GetHalftonePalette(}{\b DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Return a halftone palette by calling CreateHalftonePalette in the way 
appropriate for the current color depth and operating system.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/GHP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetIthMRUListEntry\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b GetIthMRUListEntry(}{\b HMRULIST} {\i hMRUList}{\b , int} {\i iEntry}{\b , TCHAR*} {\i szEntry}{\b , int*} {\i pcchEntryLen}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves the i-th entry in an MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iEntry}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The 0-based index of the desired entry.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szEntry}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If successful, set to the first {\i pcchEntryLen} characters 
of the next entry.  Cannot be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pcchEntryLen}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in/out] On entry, the number of characters of the next entry 
to copy into {\i szEntry}.  On exit, the actual number of characters 
copied.  Cannot be NULL and cannot reference a number less than 1.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure. 
---------------------------------------------------------------------------\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetMRUListInfo\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b GetMRUListInfo(}{\b HMRULIST} {\i hMRUList}{\b , int*} {\i pcEntries}{\b , int*} {\i pcchMaxEntryLen}{\b , int*} {\i pcMaxEntries}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Gets information about an MRU list such as the number of entries 
in the list, the length of the longest entry, and the maximum 
number of entries.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pcEntries}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If non-NULL on entry, set to the number of entries in the 
MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pcchMaxEntryLen}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If non-NULL on entry, set to the length (in characters) 
of the longest entry in the MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pcMaxEntries}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If non-NULL on entry, set to the maximum number of entries 
allowed in the list.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure. 
---------------------------------------------------------------------------\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetNextMRUListEntry\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b GetNextMRUListEntry(}{\b HMRULIST} {\i hMRUList}{\b , TCHAR*} {\i szEntry}{\b , int*} {\i pcchEntryLen}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves the next entry in an MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szEntry}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If successful, set to the first {\i pcchEntryLen} characters 
of the next entry.  Can't be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pcchEntryLen}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in/out] On entry, the number of characters of the next entry 
to copy into {\i szEntry}.  On exit, the actual number of characters 
copied.  Can't be NULL and can't reference a number less than 1.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Each time {\b GetNextMRUListEntry} is called, it retrieves 
the next entry and then advance the current entry pointer. 
Call {\b Reset} to move the current entry pointer to the first 
entry. 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.  A failure may indicate that there are no 
more entries.  Call {\b AtEndOfMRUList} to test for this.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetObjectSafety\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b GetObjectSafety(}{\b BOOL*} {\i pfSafeForScripting}{\b , BOOL*} {\i pfSafeForInitializing}{\b , IUnknown*} {\i punk}{\b , CLSID*} {\i pclsid}{\b , IID*} {\i (interfaces)}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines if an object is safe-for-scripting and/or 
safe-for-initializing vis-a-vis a given set of interfaces.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/OBJSAFE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfSafeForScripting}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If non-NULL, set to TRUE if the object is safe-for-scripting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfSafeForInitializing}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If non-NULL, set to TRUE if the object is safe-for-initializing\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The object's IUnknown interface.  If non-NULL, an attempt 
will be made to assess the object's safety via its {\b IObjectSafety} 
interface.  If NULL, or the the object doesn't support this interface, 
its safety will be assessed using {\i pclsid} and the system registry.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The object's class ID.  If {\i punk} is NULL or the object 
doesn't support {\b IObjectSafety}, then {\i pclsid} will be used 
to look up the object's safety in the system registry (as long 
as {\i pclsid} is also non-NULL).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i (interfaces)}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A variable number of interfaces pointers, the last of which 
must be NULL.  If the object's safety is assessed via 
{\b IObjectSafety} (see {\i punk}) then it's safety is assessed 
vis-a-vis this set of interfaces.  These interfaces are not used 
if the object's safety is examined via the system registry.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If your code uses OCMisc (i.e., #includes ocmisc.h), it should also 
[#include <objsafe.h>] whereever it #includes <initguid.h>.  This will 
cause IID_IObjectSafety to be defined.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to test whether an object is 
safe-for-scripting and safe-for-initializing by checking the system 
registry only:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 BOOL fSafeForScripting;\par 

BOOL fSafeForInitializing;\par 

GetObjectSafety(&fSafeForScripting, &fSafeForInitializing,\par 

\tab NULL, &CLSID_MyObject, NULL);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to test whether an object is 
safe-for-scripting via IDispatch using the object's {\b IObjectSafety} 
interface:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 BOOL fSafeForScripting;\par 

GetObjectSafety(&fSafeForScripting, NULL, punk, NULL,\par 

\tab &IID_IDispatch, NULL);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to test whether an object is 
safe-for-initialzing via IPersistStream, IPersistStreamInit, or 
IPersistPropertyBag using the object's {\b IObjectSafety} interface 
or, if {\b IObjectSafety} is not supported, the registry:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 BOOL fSafeForInitializing;\par 

GetObjectSafety(NULL, &safeForInitializing, punk, &CLSID_MyObject,\par 

\tab &IID_IPersistStream, &IID_IPersistStreamInit,\par 

\tab &IID_IPersistPropertyBag, NULL);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.  The object's safety was assessible and *{\i pfSafeForScripting} 
and/or *{\i pfSafeForInitializing} have been set accordingly.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Failure.  The object's safety couldn't be assessed.  The values 
of *{\i pfSafeForScripting} and *{\i pfSafeForInitializing} are 
indeterminate.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetStreamLengthToEnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b GetStreamLengthToEnd(}{\b IStream *} {\i pstream}{\b , ULONG *} {\i pcb}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Calculates the distance (in bytes) between the current position in a 
stream and the end of the stream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/GSLTE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to use.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pcb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the number of bytes left to read 
in {\i pstream}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The distance between the current position in {\i pstream} and 
the end of {\i pstream} exceeds the capacity of a ULONG.  Or, an I/O 
error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpDelete\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b HelpDelete(}{\b void *} {\i pv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Frees memory allocated by {\b HelpNew}.  This is simply a macro that 
calls {\b HelpMemFree} with specific flags.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The pointer to the memory to free.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b HelpNew} for more information.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpGetAdvise\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b HelpGetAdvise(}{\b DWORD *} {\i pdwAspects}{\b , DWORD *} {\i pdwAdvf}{\b , IAdviseSink * *} {\i ppAdvSink}{\b , HelpAdviseInfo *} {\i pha}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IViewObject::GetAdvise}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/ADVISE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwAspects}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwAdvf}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppAdvSink}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pha}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Caller-allocated structure that was 
previously initialized using {\b InitHelpAdvise}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You must call {\b InitHelpAdvise} before calling {\b HelpGetAdvise} 
and {\b HelpGetAdvise}, and {\b UninitHelpAdvise} when the object 
that contains the {\b HelpAdviseInfo} structure is deleted.\par 

This function fills in *{\i pdwAspects}, *{\i pdwAdvf}, and 
*{\i ppAdvSink} with information from {\i pha}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to use {\b HelpGetAdvise} to help 
implement {\b IViewObject::GetAdvise}
, assuming {\i m_advise} is 
a member variable of type {\b HelpAdviseInfo}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::GetAdvise(DWORD *pdwAspects, DWORD *pdwAdvf,\par 

\tab IAdviseSink **ppAdvSink)\par 

\{\par 

\tab return HelpGetAdvise(pdwAspects, pdwAdvf, ppAdvSink, &m_advise);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpGetClassInfo\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b HelpGetClassInfo(}{\b LPTYPEINFO *} {\i ppti}{\b , REFCLSID} {\i rclsid}{\b , char *} {\i szEventList}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IProvideClassInfo::GetClassInfo}
.  The 
implementation provides very limited class information -- just 
enough to allow firing events to VBS.  {\b Warning:} you should 
probably use {\b HelpGetClassInfoFromTypeLib} instead.  See comments 
for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/HGCI.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppti}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to return the pointer to the 
newly-allocated {\b ITypeInfo} interface.  NULL is stored in 
*{\i ppti} on error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The class ID of the object that is implementing 
{\b IProvideClassInfo}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szEventList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A list of events that can be fired by the 
parent object that is implementing {\b IProvideClassInfo}.  The event 
names are concatenated, and each event name is terminated by a 
newline character.  The first member name is assigned DISPID value 0, 
the second 1, and so on.  For example, if {\i szEventList} is 
"\\nFoo\\nBar\\n", then "Foo" is assigned DISPID value 1 and "Bar" 
is assigned 2 (because the first element is "").  (These DISPID values 
are passed to functions such as {\b IConnectionPointHelper::FireEvent}
 
to invoke events on objects such as VBS scripts connected to the 
parent object.)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b WARNING}
 HelpGetClassInfo makes assumptions about the script 
engine calling it.  Currently, this works with VBS, but the VBS group 
will not guarantee that the assumptions made by HelpGetClassInfo will 
remain valid in the future, so use at your own risk!  Consider using 
{\b HelpGetClassInfoFromTypeLib} instead.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 In the following example, {\b CMyControl}
 is a class that implements 
(among other things) {\b IConnectionPointContainer} and 
{\b IProvideClassInfo}.  The first part of this example shows how 
{\b IProvideClassInfo::GetClassInfo}
 is implemented by {\b CMyControl}
. 
The second part of the example shows how an event is fired, 
assuming {\i m_pconpt} is a {\b IConnectionPointHelper} object. 
(It's not required that you use {\b ConnectionPointHelper}, but 
it's helpful.)\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 // IDispatch IDs for events fired by this object, and the\par 

// corresponding method/property names (the order MUST MATCH)\par 

#define DISPID_EVENT_FOO        1\par 

#define DISPID_EVENT_BAR        2\par 

#define EVENT_NAMES "\\n" \\\par 

\tab \tab \tab \tab \tab "Foo\\n" \\\par 

\tab \tab \tab \tab \tab "Bar\\n"\par 

\par 

STDMETHODIMP CMyControl::GetClassInfo(LPTYPEINFO FAR* ppTI)\par 

\{\par 

\tab return HelpGetClassInfo(ppTI, CLSID_CMyControl, EVENT_NAMES, 0);\par 

\}\par 

\par 

// fire the "Bar" event (which has 3 parameters, which in BASIC\par 

// are of these types: Integer, String, Boolean)\par 

m_pconpt->FireEvent(DISPID_EVENT_BAR, VT_INT, 300 + i,\par 

\tab VT_LPSTR, ach, VT_BOOL, TRUE, 0);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpGetClassInfoFromTypeLib\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b HelpGetClassInfoFromTypeLib(}{\b LPTYPEINFO *} {\i ppti}{\b , REFCLSID} {\i rclsid}{\b , ITypeLib *} {\i plib}{\b , HINSTANCE} {\i hinst}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IProvideClassInfo::GetClassInfo}
 using a 
caller-provided type library.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/TYPELIB.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppti}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to return the pointer to the 
newly-allocated {\b ITypeInfo} interface.  NULL is stored in 
*{\i ppti} on error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The class ID of the object that is implementing 
{\b IProvideClassInfo}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plib}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type library containing events.  Should be 
NULL if {\i plib} is non-NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hinst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The DLL instance containing a type library 
resource.  Should be NULL if {\i plib} is non-NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function accesses type information in the type library specified 
by either {\i plib} (if the type library is already loaded) or 
{\i hinst} (in which case this function loads the type library).\par 

It is assumed that the type library contains a "coclass" typeinfo 
and a an outgoing (source) "dispinterface" typeinfo.  The class ID 
of the "coclass" typeinfo should be {\i rclsid}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 In the following example, {\b CMyControl}
 is a class that implements 
(among other things) {\b IConnectionPointContainer} and 
{\b IProvideClassInfo}.  The first part of this example shows how 
{\b IProvideClassInfo::GetClassInfo}
 is implemented by {\b CMyControl}
. 
The second part of the example shows how an event is fired, 
assuming {\i m_pconpt} is a {\b IConnectionPointHelper} object. 
(It's not required that you use {\b ConnectionPointHelper}, but 
it's helpful.)\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 // in MyControl.h...\par 

\par 

// IDispatch IDs for events fired by this object\par 

#define DISPID_EVENT_BAR        1\par 

#define DISPID_EVENT_LOAD       2\par 

\par 

// class ID\par 

#define _CLSID_CMyControl 3CE08A80-9440-11CF-B705-00AA00BF27FD\par 

#ifndef __MKTYPLIB__\par 

DEFINE_GUID(CLSID_CMyControl, 0x3CE08A80L, 0x9440, 0x11CF,\par 

\tab 0xB7, 0x05, 0x00, 0xAA, 0x00, 0xBF, 0x27, 0xFD);\par 

#endif\par 

\par 

// dispinterface ID for event set\par 

#define _DIID_DMyControlEvents 296CC160-9F5A-11CF-B705-00AA00BF27FD\par 

#ifndef __MKTYPLIB__\par 

DEFINE_GUID(DIID_DMyControlEvents, 0x296CC160L, 0x9F5A, 0x11CF,\par 

\tab 0xB7, 0x05, 0x00, 0xAA, 0x00, 0xBF, 0x27, 0xFD);\par 

#endif\par 

\par 

// in the .odl  file...\par 

\par 

#include <olectl.h>\par 

#includ  "MyControl.h"\par 

\par 

[ uuid(B1179240-9445-11CF-B705-00AA00BF27FD), version(1.0), control ]\par 

library MyControlLib\par 

\{\par 

\tab importlib(STDOLE_TLB);\par 

\tab importlib(STDTYPE_TLB);\par 

\par 

\tab // event dispatch interface for CMyControl\par 

\tab [ uuid(_DIID_DMyControlEvents) ]\par 

\tab dispinterface _DMyControlEvents\par 

\tab \{\par 

\tab \tab properties:\par 

\tab \tab methods:\par 

\tab \tab \tab [id(DISPID_EVENT_BAR)] void Bar(long i, BSTR sz, boolean f);\par 

\tab \tab \tab [id(DISPID_EVENT_LOAD)] void Load();\par 

\tab \};\par 

\par 

\tab // class information for CMyControl\par 

\tab [ uuid(_CLSID_CMyControl), control ]\par 

\tab coclass MyControl\par 

\tab \{\par 

\tab \tab [default, source] dispinterface _DMyControlEvents;\par 

\tab \};\par 

\};\par 

\par 

// in some .cpp file...\par 

\par 

STDMETHODIMP CMyControl::GetClassInfo(LPTYPEINFO FAR* ppTI)\par 

\{\par 

\tab return HelpGetClassInfoFromTypeLib(ppTI, CLSID_CMyControl, NULL,\par 

\tab \tab g_hinst, 0);\par 

\}\par 

\par 

// in some .cpp file...\par 

\par 

// fire the "Bar" event (which has 3 parameters, which in BASIC\par 

// are of these types: Integer, String, Boolean)\par 

m_pconpt->FireEvent(DISPID_EVENT_BAR, VT_INT, 300 + i,\par 

\tab VT_LPSTR, ach, VT_BOOL, TRUE, 0);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpGetClassObject\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b HelpGetClassObject(}{\b REFCLSID} {\i rclsid}{\b , REFIID} {\i riid}{\b , LPVOID *} {\i ppv}{\b , ControlInfo *} {\i pci}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b DllGetClassObject} (including the class factory 
object it creates) for any number of controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/FACTORY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b DllGetClassObject}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b DllGetClassObject}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b DllGetClassObject}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pci}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Information about the control that's 
implemented by the DLL.  See {\b ControlInfo} for more information.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b HelpGetClassObject} can support one control by making a linked list 
out of your {\b ControlInfo} structures -- set each {\i pNext} 
field to the next structure, and set the last {\i pNext} to NULL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to implement {\b DllGetClassObject} 
using {\b HelpGetClassObject}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID *ppv)\par 

\{\par 

\tab return HelpGetClassObject(rclsid, riid, ppv, &g_ctlinfo);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpMemAlloc\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LPVOID} {\b HelpMemAlloc(}{\b DWORD} {\i dwFlags}{\b , ULONG} {\i cb}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates memory using either {\b GlobalAlloc} or the task memory 
allocator retrieved using {\b CoGetMalloc}.  Optionally 
zero-initializes the memory.  Optionally performs simple memory leak 
detection.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the allocated block of memory.  Returns NULL on 
error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_TASKMEM\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The memory is allocated using {\b IMalloc::Alloc}
 
(using the task memory allocator retrieved from 
{\b CoGetMalloc}).  If HM_TASKMEM is not specified, then 
{\b GlobalAlloc} is used to allocate the memory.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_ZEROINIT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The memory is zero-initialized.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_LEAKDETECT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 This DLL will keep track of the allocated 
memory block using a simple leak detection mechanism. 
{\b Important}
: If HM_LEAKDETECT is specified, then the 
returned memory pointer cannot be freed directly by 
{\b GlobalFree} or {\b IMalloc::Free}
 -- it must be freed 
using {\b HelpMemFree}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes of memory to allocate.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function allocates a block of {\i cb} bytes of memory, using 
the allocation function (and optional zero-initialization) specified 
by {\i dwFlags}.\par 

If HM_LEAKDETECT is specified, then an extra few bytes is allocated 
to keep track of leak detection information, and the returned pointer 
actually points several bytes beyond the beginning of the memory block. 
Therefore, {\b HelpMemFree} must be called to free the block of memory.\par 

If HM_LEAKDETECT is {\b not}
 specified, then {\b GlobalFree} or 
{\b IMalloc::Free}
 (depending on {\i dwFlags}) can be called directly 
to free the block of memory.  ({\b HelpMemFree} may also be used to 
free the memory block).\par 

If {\b HelpMemFree} is called, the HM_TASKMEM and HM_LEAKDETECT flags 
(if any) specified for {\b HelpMemAlloc} must also be passed to 
{\b HelpMemFree}.\par 

Leak detection occurs automatically when this DLL unloads: if an 
unfreed block is detected, a message box (in the debug build) or 
an {\b OutputDebugString} message (in the release build) is displayed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpMemFree\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b HelpMemFree(}{\b DWORD} {\i dwFlags}{\b , LPVOID} {\i pv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Frees a block of memory previously allocated using {\b HelpMemAlloc}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_TASKMEM\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The memory was allocated using {\b IMalloc::Alloc}
 
(using the task memory allocator retrieved from 
{\b CoGetMalloc}).  If HM_TASKMEM is not specified, then it 
is assumed that {\b GlobalAlloc} is used to allocate the memory.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_LEAKDETECT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The memory was allocated using {\b HelpMemAlloc} 
with the HM_LEAKDETECT flag specified.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the block of memory that was previously 
allocated using {\b HelpMemAlloc} or a NULL pointer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The HM_TASKMEM and HM_LEAKDETECT flags (if any) specified for 
{\b HelpMemAlloc} must also be passed to {\b HelpMemFree}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpMemSetFailureMode\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b HelpMemSetFailureMode(}{\b LONG} {\i lParam}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets failure conditions for the memory allocator.  This can be used 
to simulate low-memory conditions and test a system's ability to 
detect and/or handle these conditions.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Argument used in conjunction with {\i dwFlags}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags (all of which are mutually exclusive):\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILNEVER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Never fail memory allocation unless memory is truly exhausted. 
{\i ulParam} is ignored.  This is the default failure mode for 
the memory allocator.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILAFTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Begin failing memory allocation after {\i ulParam} allocations have 
been attempted.  If, for example, {\i ulParam} is 100, the next 
100 calls to {\b HelpMemAlloc} will succeed (memory availability 
permitting), but the 101-st, 102-nd, etc. calls will fail.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILUNTIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Start failing memory allocation immediately and continue until 
{\i ulParam} allocations have been attempted.  If, for example, 
{\i ulParam} is 100, the next 100 calls to {\b HelpMemAlloc} will fail, 
but the 101-st, 102-nd, etc. calls will succeed (memory availability 
permitting).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILEVERY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Fail every {\i ulParam}-th attempted memory allocation.  If, 
for example, {\i ulParam} is 3, every third call to {\b HelpMemAlloc} 
will fail.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILRANDOMLY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Simulate random memory allocation failure.  ({\i ulParam} mod 100) 
indicates the percentage chance that a given call to 
{\b HelpMemAlloc} will fail.  (Note: This flag currently has the 
same effect as HM_FAILNEVER.)\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function is only available in DEBUG builds of {\b OCHelp}
.  (There 
is a stub implementation that does nothing in the release builds.) 
Also, this function resets the allocation counter.  So, {\i ulParam} is 
counted relative to the last call to this function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpNew\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void *} {\b HelpNew(}{\b size_t} {\i cb}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement a version of the "new" operator that doesn't 
use the C runtime.  Zero-initializes the allocated memory. 
This is simply a macro that calls {\b HelpMemAlloc} with specific flags.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the allocated block of memory.  Returns NULL on 
error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes to allocate.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to use {\b HelpNew} and {\b HelpDelete} 
to define default "new" and "delete" operators.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 void * operator new(size_t cb)\par 

\{\par 

\tab return HelpNew(cb);\par 

\}\par 

\par 

void operator delete(void *pv)\par 

\{\par 

\tab HelpDelete(pv);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpQueryHitPoint\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b HelpQueryHitPoint(}{\b IViewObject *} {\i pvo}{\b , DWORD} {\i dwAspect}{\b , LPCRECT} {\i prcBounds}{\b , POINT} {\i ptLoc}{\b , LONG} {\i lCloseHint}{\b , DWORD *} {\i pHitResult}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IViewObjectEx::QueryHitPoint}
 on a control by 
drawing the control into a small bitmap (centered on the point 
being hit-tested) and checking if any pixels were drawn.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/QUERYHIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The {\b IViewObject} interface on the control 
being hit-tested.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwAspect}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObjectEx::QueryHitPoint}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i prcBounds}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObjectEx::QueryHitPoint}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ptLoc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObjectEx::QueryHitPoint}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lCloseHint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObjectEx::QueryHitPoint}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHitResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObjectEx::QueryHitPoint}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function helps implement {\b IViewObjectEx::QueryHitPoint}
 
for the object {\i pvo}, by drawing {\i pvo} into a small 
monochrome bitmap centered on {\i ptLoc} {\i pHitResult} is set to 
HITRESULT_HIT if {\i ptLoc} is directly over a non-transparent 
pixel of {\i pvo}; HITRESULT_CLOSE if {\i ptLoc} is within 
{\i lCloseHint} himetric units of a non-transparent pixel of 
{\i pvo}; HITRESULT_OUTSIDE otherwise.\par 

In order for this function to work, {\i pvo} must implement 
DVASPECT_MASK (as the first parameter to IViewObject::Draw), 
which is defined to be the same as DVASPECT_CONTENT except 
that non-transparent parts of the object are drawn black, and 
transparent parts are either left untouched or drawn in 
white.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HelpSetAdvise\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b HelpSetAdvise(}{\b DWORD} {\i dwAspects}{\b , DWORD} {\i dwAdvf}{\b , IAdviseSink *} {\i pAdvSink}{\b , HelpAdviseInfo *} {\i pha}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IViewObject::SetAdvise}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/ADVISE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwAspects}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwAdvf}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAdvSink}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pha}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Caller-allocated structure that was 
previously initialized using {\b InitHelpAdvise}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You must call {\b InitHelpAdvise} before calling {\b HelpSetAdvise} 
and {\b HelpGetAdvise}, and {\b UninitHelpAdvise} when the object 
that contains the {\b HelpAdviseInfo} structure is deleted.\par 

This function updates *{\i pha} with information given by the 
parameters {\i dwAspects}, {\i dwAdvf}, and {\i pAdvSink}.  In particular, 
the {\b IAdviseSink} pointer is stored in {\i pha}->{\i pAdvSink}, 
and you can use this pointer (when non-NULL) to advise the 
view site object of changes in your object's view (e.g. by calling 
{\i pha}->{\i pAdvSink}->OnViewChange()).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to use {\b HelpSetAdvise} to help 
implement {\b IViewObject::SetAdvise}
, assuming {\i m_advise} is 
a member variable of type {\b HelpAdviseInfo}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::SetAdvise(DWORD dwAspects, DWORD dwAdvf,\par 

\tab IAdviseSink *pAdvSink)\par 

\{\par 

\tab return HelpSetAdvise(dwAspects, dwAdvf, pAdvSink, &m_advise);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HIMETRICToPixels\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b HIMETRICToPixels(}{\b int} {\i cx}{\b , int} {\i cy}{\b , SIZE *} {\i psize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a width and height from HIMETRIC units to pixels 
(on the default monitor).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HIMETRIC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cx}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input width in HIMETRIC units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cy}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input height in HIMETRIC units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i psize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The output size in pixels.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HostLW Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowed ActiveX control which can embed a 
lightweight windowless ActiveX control.  Can be used to allow 
IE3 to host windowless controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b HostLW::TickInterval}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of milliseconds between ticks.  The frame rate (ticks per 
second) is approximately 1000 / {\i TickInterval}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b HostLW::ToggleAnimation}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Starts the animation running if it is currently stopped, or stops the 
animation if it is currently running.  Don't confuse this with the 
Play/Stop feature in {\b OCTest}, which affects OCTest's internal 
animation timer and not HostLW's animation timer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b HostLW::RefreshBackground}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Causes the container's background image (e.g. the tiled bitmap in IE) 
to be "re-captured" by HostLW, so that the background of HostLW appears 
to be "transparent" (i.e.  you can see through to the container). 
Normally, if the Capture Background checkbox is set (see below), 
RefreshBackground is called automatically whenever the container's 
background changes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  {\b HostLW::SetMemoryFailureMode}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Available only in the debugging version of HostLW.  This is a debugging 
function which will simulate an out-of-memory condition (i.e. 
{\b HelpMemAlloc} and functions which call it will fail) under specified 
circumstances.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The easiest way to construct an HTML page that uses HostLW 
to embed a windowless control is to run {\b OCTest}, use File New 
to create a new instance of HostLW, and then right-click in 
HostLW and embed a new instance of the desired windowless 
control.  Then, use {\b OCTest}'s File Save As to save the 
HostLW control's data (and the embedded windowless control's data) 
to an HTML file.  You can then edit that HTML file using any 
HTML tools.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 Later, you can open the HTML file in {\b OCTest}, edit the 
embedded windowles control, and save back to HTML -- the contents 
of the HTML file outside of the {\b HostLW} 
<object>...</object> construct will be untouched. 
(If you have more than one <object> tag in the HTML tag, 
you can specify the one you want OCTest to edit by naming the 
{\b HostLW} <object> tag in lowercase and all other 
<OBJECT> tags in uppercase -- only the word "object" itself 
needs to be made lowercase or uppercase.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b HostLW} is still undergoing continuing development, both to 
improve compatibility with all important containers (e.g. 
Nashville, Forms3, etc.)\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control is packaged in both design-time and run-time versions. 
The design time version allows a control to be embedded via 
the right-click context menu.  (There is also a property page, 
which may or may not exist in the final version of {\b HostLW}.) 
The run-time version has no such authoring features, in order to 
reduce code size.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the design-time version of this control is 
"861301A0-99FA-11CF-B705-00AA00BF27FD".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the run-time version of this control is 
"TBD" (currently the same as the design-time version).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b HostLW} implements a property sheet (which can be 
accessed by File Properties in {\b OCTest}) with the following 
properties:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Stretch To Window (unchecked by default): If checked, the 
control loaded into HostLW is sized to occupy the entire 
size of the HostLW control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Off-Screen Buffer (checked by default): If checked, 
then the control loaded into HostLW (if windowless) is 
drawn into an off-screen DIBSection bitmap buffer before 
being drawn.  This makes greatly reduces animation flicker, 
and some controls (e.g. {\b Sprite}) {\i require}
 this 
feature in order to operate correctly (since some controls 
cannot draw directly to the screen and must have an off-screen 
buffer to "compose" into).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Hatched Background (unchecked by default): If checked, and 
if Capture Background is unchecked, then the background 
behind the loaded control is a hatched pattern (mostly useful 
for debugging).  If unchecked, and if Capture Background is 
also unchecked, then the background is a solid color (currently 
always black).  If Capture Background is checked, then 
Hatched Background is ignored.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Always Show Border (unchecked by default): Causes the resize 
border (with grab handles) to be displayed around the control 
even when the control is not UI active (i.e. "selected"). 
This only affects the design-time version of HostLW, since the 
run-time version does not show a resize border.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab No Custom Palette (checked by default): If checked, HostLW 
will not ask the container of HostLW to use the color palette 
of the loaded control, and instead HostLW will simply use 
whatever palette the container of HostLW uses (e.g. the 
halftone palette).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Capture Background (checked by default): If checked, then 
HostLW attempts to use whatever is behind the HostLW control 
(e.g. the tiled background bitmap in IE3) as the background 
for the loaded control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Disable Double-Click Start/Stop (unchecked by default): 
If checked, then double-clicking the HostLW control will not 
toggle (i.e. start and stop) the animation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Auto-Start (unchecked by default): If checked, then animation 
begins as soon as the HostLW control is loaded.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Save Compacted Properties (checked by default): If checked, 
then properties are saved in a compacted form.  For example, 
rather than storing Players(1).Width="17" and 
Players(1).Height="42" as two separate properties (in an 
HTML, CSV, or other file), Save Compacted Properties will 
cause a single property to be saved: 
Players(1)="Width=17,Height=42".  This makes files 
(particularly HTML files) smaller and improves load time.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Tick Interval: The number of milliseconds between frames. 
The frame rate (ticks per second) is approximately 1000 / 
Tick Interval.  Note: {\b OCTest} has its own fixed tick 
rate, which you get if you use OCTest's Play/Stop menu item; 
to avoid this, use {\b HostLW::ToggleAnimation}
 or 
DoubleClick or Alt+DoubleClick to start/stop animation 
instead of using Play/Stop in OCTest.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b HostLW} treats certain keyboard-mouse combinations specially:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Alt+Click advances animation by one frame.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Alt+DoubleClick toggles (i.e. starts and stops) the animation, 
unless the "Disble Double-Click Start/Stop" checkbox in the 
property sheet is checked (see above).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Alt+Ctrl+DoubleClick toggles the animation, regardless of the 
setting of the "Disble Double-Click Start/Stop" checkbox in the 
property sheet.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Alt+Shift+DoubleClick toggles (i.e. turns on/off) display of 
performance statistics during animation, as described under 
"Monitoring performance".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Monitoring performance: As described above, Alt+Shift+DoubleClick 
toggles (i.e. turns on/off) display of performance statistics 
during animation.  When turned on, the following information is 
displayed in the upper-left corner of the HostLW control.  When 
turned off, all statistics are reset to zero.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab E.g. "76:": The current "frame number" since performance 
monitoring was last turned on.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab E.g. "002+008ms": The amount of time (in milliseconds) 
required to process {\b IAnimate::Tick}
 and {\b UpdateWindow} 
(including compositing loop), respectively.  This time 
is the average over the last two frames.  Generally, the 
first number should be very small (e.g. no more than a few 
milliseconds, and certainly a small fraction of the second 
number).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab E.g. "7x": The number of extra WM_PAINT messages, i.e. 
WM_PAINT messages that were not the result of 
{\b IAnimate::Tick}
.  During animation, this number should 
remain constant -- if it increases over time a this may be an 
indication that the loaded control (or some control it 
contains) may be calling {\b UpdateWindow} which can 
significantly reduce performance.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab E.g. "3s": The number of skipped ticks.  Although (by 
definition) frames are nevers skipped, it's possible that 
an animation timer tick may be skipped if a frame is taking 
too long to display.  Typically, ticks are skipped whenever 
the container is in a tight loop (e.g. while dragging the 
IE window) or if the frame rate is too fast for the computer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab E.g. "avg: 012ms": The average number of milliseconds required 
to process a frame (including both {\b IAnimate::Tick}
 and 
{\b UpdateWindow}).  This average is measured since the 
performance monitoring was turned on (i.e. since frame 0).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab E.g. "10f/s": The average number of frames per second being 
displayed.  This average is measured since the performance 
monitoring was turned on (i.e. since frame 0).  Meaningless 
while single-stepping.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab E.g. "012%": The average CPU saturation caused by frame 
display.  If there are no other threads running, this is the 
approximate percentage of CPU time consumed by HostLW. 
When this number reaches approximately 100%, the CPU is 
fully "saturated", meaning that the frame rate cannot be 
further increased.  At this point, HostLW will automatically 
slow the frame rate as needed.  Meaningless while 
single-stepping.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Event support: Since {\b Stage} cannot fire events originating from 
embedded controls via the normal {\b IConnectionPoint} mechanism, 
{\b HostLW} provides a hack workaround.  ({\b Important:}
 This 
workaround is temporary -- expect it to change!)  HostLW implements 
an event named "Event" which can be handled in VBS in the usual 
way.  The "Event" event has three parameters:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\i ctl} (type Variant, containing an Object, i.e. a 
VT_DISPATCH value): the control (or x-object/site aggregated 
with the control) that caused the event;\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\i evname} (type Variant, containing a String, i.e. a 
VT_BSTR value): the name of the event (e.g. "Click");\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\i args} (type Variant, containing an Array of Variants, i.e. a 
VT_ARRAY | VT_BYVAL | VT_VARIANT): the arguments of the 
event.  The first argument is in element 1 of {\i args}, 
the second is in element 2, and so on.  {\i args} may in fact 
have elements with indices below 1, but the event function 
is required to ignore these.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 VBS users: See HostLW\\test.htm for an example of how to use 
the "Event" event.  Typically you'll get the Name property of 
the control that fired the event (via "ctl.Name") and then 
handle the event based on which control fired it.  But: beware 
that {\i ctl} may not have a Name property in all cases, so use 
"On Error Resume Next" before "ctl.Name".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 C++ users: To cause HostLW to fire the "Event" event from within 
a control, you need to do the following.  See HostLW\\control.cpp 
(search for SAFEARRAYBOUND) for an example.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Use {\b SafeArrayCreate} to create an array that contains N+2 
elements of type VT_VARIANT, where N is the number of 
parameters of the event.  The lower bound of the array should 
be -1.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Set element -1 of the array to the {\b IDispatch} pointer of 
the control or site/x-object that caused the event -- don't 
forget to {\b AddRef} this pointer.  Set element 0 of the array 
to a VT_BSTR element containing the string name of the event 
(e.g. "Click").  Set slements 1...N of the array to the 
arguments of the event.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Get the HWND of HostLW, by calling {\b IOleWindow::GetWindow}
 
on the site of your control.  (If the container is not HostLW, 
then the event will be harmlessly ignored.)  Use 
{\b RegisterWindowMessage} to get the message ID of the 
window message named "HostLWEvent".  Use {\b SendMessage} 
to send this message to the container window (hopefully 
the HostLW window); {\i wParam} of the message should be the 
SAFEARRAY pointer allocated above, and {\i lParam} should be 
zero.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab Use {\b SafeArrayDestroy} to free the array.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CHostLWOC in 
"HostLWOC.h".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "HostLW.HostLW.1".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports 
aggregation\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IHostLWOC}: Provides low-level efficient access to the 
properties of a {\b HostLW} control.  See that interface 
for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide 
the client site pointer, invoke control verbs, and get control 
state.  Only {\b SetClientSite}, {\b Close}, {\b DoVerb}, 
{\b EnumVerbs} (design time version only), and {\b GetMiscStatus} 
are implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObject} subset (based on {\b IOleWindow}): Used 
to change control state.  Only {\b InPlaceDeactivate}, 
{\b UIDeactivate}, and {\b SetObjectRects}, are implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of 
ambient property changes.  Only {\b OnAmbientPropertyChange} 
is implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages} (only in the design-time version): 
Used to retrieve information about the control's property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}): 
Used to persist the control's data to/from an {\b IStream}, 
including the data of the embedded control (if any). 
The file format is compatible with past and future versions 
of this control (i.e. adding and removing properties won't 
break the control).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data 
to/from an {\b IPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}:  Provides access to the control's properties. 
Does not provide type information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if 
available) on the container-provided site object:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by 
the container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently 
DISPID_AMBIENT_USERMODE).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HostLW::RefreshBackground Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b  RefreshBackground(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Causes the container's background image (e.g. the tiled bitmap in IE) 
to be "re-captured" by HostLW, so that the background of HostLW appears 
to be "transparent" (i.e.  you can see through to the container). 
Normally, if the Capture Background checkbox is set (see below), 
RefreshBackground is called automatically whenever the container's 
background changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HostLW::SetMemoryFailureMode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b  SetMemoryFailureMode(}{\b Long} {\i param}{\b , Long} {\i flags}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Available only in the debugging version of HostLW.  This is a debugging 
function which will simulate an out-of-memory condition (i.e. 
{\b HelpMemAlloc} and functions which call it will fail) under specified 
circumstances.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i param}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The meaning of this parameter depends on {\i flags}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i flags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May be one of the following values:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILNEVER (value 1)\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Never fail memory allocation unless memory is truly exhausted. 
{\i param} is ignored.  This is the default failure mode for the 
memory allocator.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILAFTER (value 2)\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Begin failing memory allocation after {\i param} allocations 
have been attempted.  If, for example, {\i param} is 100, the 
next 100 calls to HelpMemAlloc will succeed (memory 
availability permitting), but the 101-st, 102-nd, etc. calls 
will fail.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILUNTIL (value 4)\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Start failing memory allocation immediately and continue 
until {\i param} allocations have been attempted.  If, for 
example, {\i param} is 100, the next 100 calls to HelpMemAlloc 
will fail, but the 101-st, 102-nd, etc. calls will succeed 
(memory availability permitting).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 HM_FAILEVERY (value 8)\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Fail every {\i param}-th attempted memory allocation.  If, for 
example, {\i param} is 3, every third call to HelpMemAlloc 
will fail.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HostLW::TickInterval Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Long}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The number of milliseconds between ticks.  The frame rate (ticks per 
second) is approximately 1000 / {\i TickInterval}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following VBS code sets the frame rate to approximately 24 
frames per second (assuming {\i host} is a {\b HostLW} object).\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 host.TickInterval = 1000 / 24\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HostLW::ToggleAnimation Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b  ToggleAnimation(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Starts the animation running if it is currently stopped, or stops the 
animation if it is currently running.  Don't confuse this with the 
Play/Stop feature in {\b OCTest}, which affects OCTest's internal 
animation timer and not HostLW's animation timer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IConnectionPointHelper Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Contains functions for implementing the {\b ConnectionPointHelper} 
object, which provides a simple implementation of an 
{\b IDispatch}-based {\b IConnectionPoint}.  Also contains helper 
functions for implementing {\b IConnectionPointContainer} in the case 
where this is only connection maintained by the connection point 
container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FireEventList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Fire a given {\b IDispatch}-based event on all objects (e.g. VBS) 
connected to this {\b ConnectionPointHelper} object.  Parameters 
for the event are passed as a va_list array.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FireEvent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Fire a given {\b IDispatch}-based event on all objects (e.g. VBS) 
connected to this {\b ConnectionPointHelper} object.  Parameters 
for the event are passed as a varying argument list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT EnumConnectionPoints}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IConnectionPointContainer::EnumConnectionPoints}
 
in the case where this object implements the only connection maintained 
by the connection point container.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FindConnectionPoint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Helps implement {\b IConnectionPointContainer::FindConnectionPoint}
 
in the case where this object implements the only connection maintained 
by the connection point container.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 To allocate an {\b ConnectionPointHelper} object, call 
{\b AllocConnectionPointHelper}.  To free the object, call 
{\b FreeConnectionPointHelper} (not {\b Release} -- see 
{\b AllocConnectionPointHelper} for more information).\par 

This interface is based on {\b IConnectionPoint}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IConnectionPointHelper::EnumConnectionPoints Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT EnumConnectionPoints(}{\b LPENUMCONNECTIONPOINTS *} {\i ppEnum}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IConnectionPointContainer::EnumConnectionPoints}
 
in the case where this object implements the only connection maintained 
by the connection point container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same error codes as 
{\b IConnectionPointContainer::EnumConnectionPoints}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppEnum}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See 
{\b IConnectionPointContainer::EnumConnectionPoints}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 In the following example, {\b CMyControl}
 is a class that is based 
on (among other things) {\b IConnectionPointContainer}.  This example 
shows how to use this {\b EnumConnectionPoints} function to 
implement {\b IConnectionPointContainer::EnumConnectionPoints}
.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::EnumConnectionPoints(\par 

\tab LPENUMCONNECTIONPOINTS *ppEnum)\par 

\{\par 

\tab return m_pconpt->EnumConnectionPoints(ppEnum);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IConnectionPointHelper::FindConnectionPoint Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FindConnectionPoint(}{\b LPENUMCONNECTIONPOINTS *} {\i ppFindConnectionPoint}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helps implement {\b IConnectionPointContainer::FindConnectionPoint}
 
in the case where this object implements the only connection maintained 
by the connection point container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the same error codes as 
{\b IConnectionPointContainer::FindConnectionPoint}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppFindConnectionPoint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See 
{\b IConnectionPointContainer::FindConnectionPoint}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 In the following example, {\b CMyControl}
 is a class that is based 
on (among other things) {\b IConnectionPointContainer}.  This example 
shows how to use this {\b FindConnectionPoint} function to 
implement {\b IConnectionPointContainer::FindConnectionPoint}
.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::FindConnectionPoint(REFIID riid,\par 

\tab LPCONNECTIONPOINT *ppCP)\par 

\{\par 

\tab return m_pconpt->FindConnectionPoint(riid, ppCP);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IConnectionPointHelper::FireEvent Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FireEvent(}{\b DISPID} {\i dispid}{\b , (varying)} {\i (arguments)}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Fire a given {\b IDispatch}-based event on all objects (e.g. VBS) 
connected to this {\b ConnectionPointHelper} object.  Parameters 
for the event are passed as a varying argument list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ID of the event to fire.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i (arguments)}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The arguments to pass to the event. 
These must consist of N pairs of arguments followed by a 0 
(zero value).  In each pair, the first argument is a VARTYPE 
value that indicates the type of the second argument.  Only a 
certain subset of VARTYPEs are supported.  See {\b DispatchInvoke} 
for more information about the format of these arguments.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example fires the event DISPID_EVENT_BAR, which has 
two parameters (which in BASIC would be a Long and a String) -- 
42 and "Hello", respectively, are passed as arguments.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 pconpt->FireEvent(DISPID_EVENT_BAR, VT_INT, 42, VT_LPSTR, "Hello", 0);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IConnectionPointHelper::FireEventList Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FireEventList(}{\b DISPID} {\i dispid}{\b , va_list} {\i args}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Fire a given {\b IDispatch}-based event on all objects (e.g. VBS) 
connected to this {\b ConnectionPointHelper} object.  Parameters 
for the event are passed as a va_list array.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/CONNECT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dispid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ID of the event to fire.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i args}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The arguments to pass.  See 
{\b FireEventList} for information about 
the organization of these arguments.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IEnumVariantProperty Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allows the properties of an object to be enumerated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Next}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieves a specified number of items in the 
enumeration sequence.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Skip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Skips over a specified number of items in the 
enumeration sequence.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Reset}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Resets the enumeration sequence to the beginning.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Clone}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Creates another enumerator that contains the same 
enumeration state as the current one.  Note that {\b VariantIO} does 
not implement this method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b VariantIO} implementation of {\b IEnumVariantProperty} 
has these restrictions:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b Clone} is not supported.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b Reset} is automatically called whenever a property is 
removed from the {\b VariantIO} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IEnumVariantProperty::Clone Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Clone(}{\b IEnumVariantProperty * *} {\i ppenum}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates another enumerator that contains the same enumeration state 
as the current one.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell An unexpected error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppenum}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 On exit, contains the duplicate 
enumerator.  If the function was unsuccessful, this parameter's value 
is undefined.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that {\b VariantIO} does not implement this method.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IEnumVariantProperty::Next Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Next(}{\b unsigned long} {\i celt}{\b , VariantProperty *} {\i rgvp}
{\b , unsigned long *} {\i pceltFetched}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves a specified number of items in the enumeration sequence.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The number of elements returned is {\i celt}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The number of elements returned is not {\i celt}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i celt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of elements being requested.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rgvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Receives an array of size {\i celt} 
(or larger) of the elements to be returned.  The caller is responsible 
for calling {\b SysFreeString} and {\i VariantClear} on the 
{\i bstrPropName} and {\i varValue} fields, respectively, of each 
element returned in {\i rgvp}.  (Alternatively, the caller can simply 
call {\b VariantPropertyClear} on each element returned in {\i rgvp}.)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pceltFetched}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 On return, contains the number of 
elements actually returned in {\i rgelt}.  If {\i pceltFetched} is NULL, 
this information is not returned.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IEnumVariantProperty::Reset Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Reset(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resets the enumeration sequence to the beginning.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 There is no guarantee that the same set of objects will be enumerated 
after the reset, because it depends on the collection being enumerated.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IEnumVariantProperty::Skip Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Skip(}{\b unsigned long} {\i celt}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Skips over a specified number of items in the enumeration sequence.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The number of elements skipped is {\i celt}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The number of elements skipped is not {\i celt}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i celt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of elements that are to be skipped.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IHostLWOC Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Provides low-level efficient access to the properties of a {\b HostLW} 
control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieves control properties.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets control properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This interface is defined in "HostLWOC.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IHostLWOC::GetInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetInfo(}{\b HostLWOCInfo *} {\i pInfo}{\b , UINT} {\i cbInfo}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves control properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell This object supports an earlier version of the {\b HostLWOCInfo} 
structure than is specified by {\i cbInfo}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer.  Information retrieved by 
{\b GetInfo} will be stored in this buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pInfo} 
(used for version checking).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IHostLWOC::SetInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetInfo(}{\b HostLWOCInfo *} {\i pInfo}{\b , UINT} {\i cbInfo}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets control properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell This object supports an earlier version of the {\b HostLWOCInfo} 
structure than is specified by {\i cbInfo}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer containing information that 
is to be stored in the control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pInfo} 
(used for version checking).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If you only want to change some of the fields of {\i pInfo}, call 
{\b GetInfo} first to initialize {\i pInfo} and then change the 
desired fields and call {\b SetInfo}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ILineOC Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Provides low-level efficient access to the properties of a {\b Line} 
control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieves control properties.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets control properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This interface is defined in "LineOC.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ILineOC::GetInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetInfo(}{\b LineOCInfo *} {\i pInfo}{\b , UINT} {\i cbInfo}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves control properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell This object supports an earlier version of the {\b LineOCInfo} 
structure than is specified by {\i cbInfo}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer.  Information retrieved by 
{\b GetInfo} will be stored in this buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pInfo} 
(used for version checking).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ILineOC::SetInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetInfo(}{\b LineOCInfo *} {\i pInfo}{\b , UINT} {\i cbInfo}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets control properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell This object supports an earlier version of the {\b LineOCInfo} 
structure than is specified by {\i cbInfo}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer containing information that 
is to be stored in the control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pInfo} 
(used for version checking).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If you only want to change some of the fields of {\i pInfo}, call 
{\b GetInfo} first to initialize {\i pInfo} and then change the 
desired fields and call {\b SetInfo}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IManageVariantIO Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Based on {\b IVariantIO}.  Allows the caller to control how the methods 
of the {\b IVariantIO} object operate (e.g. whether the {\b IVariantIO} 
object is in loading mode or saving mode).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetMode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the mode of the {\b IVariantIO} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetMode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Gets the mode of the {\b IVariantIO} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT DeleteAllProperties}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes all property/value pairs from 
the {\b VariantIO} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IManageVariantIO::DeleteAllProperties Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT DeleteAllProperties(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes all property/value pairs from the {\b VariantIO} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IManageVariantIO::GetMode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetMode(}{\b DWORD *} {\i *pdwFlags}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Gets the mode of the {\b IVariantIO} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i *pdwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the flag specifying the current mode of 
the {\b IVariantIO} object.  See {\b SetMode} for a description of 
these flags.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When a {\b VariantIO} object is created, its initial mode is such that 
none of the flags in {\i dwFlags} are specified.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IManageVariantIO::SetMode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetMode(}{\b DWORD} {\i dwFlags}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the mode of the {\b IVariantIO} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIO_ISLOADING\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Set the {\b IVariantIO} object to loading 
mode, so that {\b IVariantIO::Persist}
 and 
{\b IVariantIO::PersistList}
 copy data from properties 
to variables.  If this flag is not spacified, then 
the {\b IVariantIO} object will be set to saving mode, 
so that {\b IVariantIO::Persist}
 and {\b IVariantIO::PersistList}
 
copy data from variables to properties.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIO_ZEROISDEFAULT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Inform the {\b IVariantIO} object that 
0 is the default values for properties and that 0-valued 
properties should not be saved via {\b IVariantIO::Persist}
 and 
{\b IVariantIO::PersistList}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When a {\b VariantIO} object is created, its initial mode is such that 
none of the flags in {\i dwFlags} are specified.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 InitHelpAdvise\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b InitHelpAdvise(}{\b HelpAdviseInfo *} {\i pha}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes a {\b HelpAdviseInfo} structure, used to help implement 
{\b IViewObject::SetAdvise}
 and {\b IViewObject::GetAdvise}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/ADVISE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pha}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Caller-allocated structure that contains 
information used to help implement {\b IViewObject::SetAdvise}
 and 
{\b IViewObject::GetAdvise}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You must call {\b InitHelpAdvise} before calling {\b HelpSetAdvise} 
and {\b HelpGetAdvise}, and {\b UninitHelpAdvise} when the object 
that contains the {\b HelpAdviseInfo} structure is deleted.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IPersistVariantIO Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads or saves properties from/to a given {\b IVariantIO} object 
(control).  Used by {\b PropertyHelper} to help an object implement 
{\b IPersistpropertyBag}, {\b IPersistStream}, {\b IPersistStreamInit}, 
and a simplified implementation of {\b IDispatch}, for any object which 
implements {\b IPersistVariantIO}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT InitNew}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the control that it has been created 
in a "new" state, so it should initialize its state data (if not 
done already).  If the control is being loaded from a stream, 
{\b DoPersist} will be called instead of {\b InitNew}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsDirty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns S_OK if the object has changed since it 
was last saved, S_FALSE otherwise.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT DoPersist}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Instructs the object to load or save its 
properties to a gieven {\b IVariantIO} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IPersistVariantIO::DoPersist Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT DoPersist(}{\b IVariantIO *} {\i pvio}{\b , DWORD} {\i dwFlags}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Instructs the object to load or save its properties to a gieven 
{\b IVariantIO} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\b IVariantIO} object to save to or load from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PVIO_PROPNAMESONLY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The caller is calling {\b DoPersist} 
purely to get a list of the names of properties from the 
control.  The control can safely ignore this flag, unless 
it wishes to use this information for optimization purposes.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PVIO_CLEARDIRTY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The control should clear its dirty flag 
(so that the next call to {\b IsDirty} should return S_FALSE).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PVIO_NOKIDS\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The control need not persist any child controls that 
it may contain.  For example, this flag is used by the property 
helper object when it calls DoPersist inside its 
IDispatch::GetIDsOfNames and IDispatch::Invoke.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how a control might implement 
{\b DoPersist}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::DoPersist(IVariantIO* pvio, DWORD dwFlags)\par 

\{\par 

\tab // load or save control properties to/from <info>\par 

\tab HRESULT hr;\par 

\tab if (FAILED(hr = pvio->Persist(0,\par 

\tab \tab \tab "BorderWidth", VT_INT, &m_iWidth,\par 

\tab \tab \tab "BorderColor", VT_INT, &m_rgb,\par 

\tab \tab \tab "X1", VT_INT, &m_iX1,\par 

\tab \tab \tab "Y1", VT_INT, &m_iY1,\par 

\tab \tab \tab "X2", VT_INT, &m_iX2,\par 

\tab \tab \tab "Y2", VT_INT, &m_iY2,\par 

\tab \tab \tab NULL)))\par 

\tab \tab return hr;\par 

\tab if (hr == S_OK)\par 

\tab \tab ...one or more properties changed, so repaint etc. control...\par 

\par 

\tab // clear the dirty bit if requested\par 

\tab if (dwFlags & PVIO_CLEARDIRTY)\par 

\tab \tab m_fDirty = FALSE;\par 

\par 

\tab return S_OK;\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IPersistVariantIO::InitNew Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT InitNew(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the control that it has been created in a "new" state, so it 
should initialize its state data (if not done already).  If the 
control is being loaded from a stream, {\b DoPersist} will be called 
instead of {\b InitNew}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell The control does not implement this method.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The control can safely return E_NOTIMPL from this method if it 
initializes its data when it is created.  In this case, if the control 
needs to be re-initialized, the container will simply destroy and 
re-create it (which is what almost every container does anyway).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IPersistVariantIO::IsDirty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsDirty(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if the object has changed since it was last saved, 
S_FALSE otherwise.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The object has changed since it was last saved.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The object has not changed since it was last saved.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The control should maintain an internal "dirty flag" (e.g. a BOOL 
{\i m_fDirty} class member), which should be initialized to FALSE, 
but set to TRUE whenever the control's data changes and set to 
FALSE in {\b DoPersist} when the PVIO_CLEARDIRTY flag is specified.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how a control might implement 
{\b IsDirty}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::IsDirty()\par 

\{\par 

\tab return (m_fDirty ? S_OK : S_FALSE);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Interface to a {\b SiteLW} object, which implements an ActiveX 
windowed control that hosts an ActiveX lightweight windowless control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetSiteWindow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the site HWND of the {\b SiteLW} object.  This is an alternative 
to providing the HWND to {\b AllocSiteLW}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetSiteWindowParameters}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets parameters of the {\b SiteLW} site window.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetDefaultPalette}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides the site window with a default palette, to be used as the 
palette of the off-screen compositing bitmap if the 
SSWP_NOCUSTOMPALETTE is specified.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetControlColorSet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a LOGPALETTE containing the colors of the embedded control's 
preferred palette (if any).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetServiceProvider}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides the site window with a pointer to an implementation of 
{\b IServiceProvider} that the site should forward calls to 
{\b IServiceProvider::QueryService}
 to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetAdvise}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identical to {\b IViewObject::SetAdvise}
.  {\b IAdviseSink::OnViewChange}
 
is called when the palette of the embedded control changes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetAdvise}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identical to {\b IViewObject::GetAdvise}
.  See {\b SetAdvise}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT NewControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Creates an instance of a control and embeds the control in the 
{\b SiteLW} control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CloseControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Disconnects the loaded control (if any) from the site and releases it.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ControlIsLoaded}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns S_OK if there is control loaded, S_FALSE otherwise.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ControlQueryInterface}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an {\b AddRef}d pointer to a specific interface on the loaded 
control (if any).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetDesignMode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Put the {\b SiteLW} object into either design mode or run mode.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetDesignMode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns S_OK if the site is in design mode, S_FALSE if the site is in 
run mode.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanShowProperties}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns S_OK if there is a control loaded and it has one or more 
property sheets, S_FALSE otherwise.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ShowProperties}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Show the property sheet for the currently loaded control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ShowContextMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Displays the context menu that contains menu items from both 
the {\b SiteLW} object and, optionally, the embedded control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowResized}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a WM_SIZE message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowQueryNewPalette}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a WM_QUERYNEWPALETTE 
message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowPaletteChanged}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a WM_PALETTECHANGED 
message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowPaintRequest}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a WM_PAINT request.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowMouseMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a mouse message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowCursorMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a WM_CURSOR message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowKeyboardMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a keyboard 
message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LRESULT OnSiteWindowCommand}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site window has received a WM_COMMAND message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b void OnSiteWindowTick}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Tells the site window to tell the loaded control to advance one step in 
its animation (if applicable).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b void OnSiteWindowRewind}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Tells the site window to tell the loaded control to rewind its 
animation (if applicable).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnTranslateAccelerator}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs the site that the site's container has requested translation 
of an accelerator.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The owner of the site window is responsible for forwarding various 
window messages to the {\b SiteLW} object.  See each OnSiteWindowXXX 
method for more information.\par 

Note that the site window will also receive various following 
WM_COMMAND commands which need to be interpreted in particular ways. 
See {\b OnSiteWindowCommand} for more information.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::CanShowProperties Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanShowProperties(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if there is a control loaded and it has one or more 
property sheets, S_FALSE otherwise.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The {\b SiteLW} object can show a property sheet using 
{\b ShowProperties}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The {\b SiteLW} object cannot currently show a property sheet 
using {\b ShowProperties}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::CloseControl Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CloseControl(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Disconnects the loaded control (if any) from the site and releases it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::ControlIsLoaded Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ControlIsLoaded(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if there is control loaded, S_FALSE otherwise.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell A control is loaded.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell No control is loaded.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::ControlQueryInterface Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ControlQueryInterface(}{\b REFIID} {\i riid}{\b , LPVOID *} {\i ppv}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b AddRef}d pointer to a specific interface on the loaded 
control (if any).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell No control is loaded.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOINTERFACE\cell The control doesn't support interface {\i riid}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The requested interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store an {\b AddRef}d pointer to interface 
{\i riid}.  NULL is stored in *{\i ppv} on error.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::GetAdvise Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetAdvise(}{\b DWORD *} {\i pdwAspects}{\b , DWORD *} {\i pdwAdvf}
{\b , IAdviseSink * *} {\i ppAdvSink}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Identical to {\b IViewObject::GetAdvise}
.  See {\b SetAdvise}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwAspects}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwAdvf}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppAdvSink}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::GetAdvise}
.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::GetControlColorSet Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetControlColorSet(}{\b LOGPALETTE * *} {\i pplp}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a LOGPALETTE containing the colors of the embedded control's 
preferred palette (if any).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pplp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the allocated 
LOGPALETTE which is allocated by the {\b ISiteLW} object and freed 
by the caller using {\b CoTaskMemFree}.  NULL is stored in *{\i pplp} 
on error.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::GetDesignMode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetDesignMode(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if the site is in design mode, S_FALSE if the site is in 
run mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The site is in design mode.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The site is in run mode.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::NewControl Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT NewControl(}{\b IUnknown *} {\i punk}{\b , DWORD} {\i dwFlags}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates an instance of a control and embeds the control in the 
{\b SiteLW} control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The control to embed.  This pointer is {\b AddRef}d 
by {\b NewControl}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NC_DONTSETSITE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Don't call {\b IOleObject::SetClientSite}
 
on {\i punk} (presumably because SetClientSite was already 
called on {\i punk} before {\i punk} was depersisted (loaded).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowCommand Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowCommand(}{\b UINT} {\i uiMsg}{\b , WPARAM} {\i wParam}
{\b , LPARAM} {\i lParam}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a WM_COMMAND message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uiMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The message that was received.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The WPARAM parameter of the message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The LPARAM parameter of the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_COMMAND message that the site window owner doesn't otherwise 
handle.\par 

Note that the site window will also receive the following WM_COMMAND 
commands in certain circumstances:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SITELW_ID_NEW\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The user chose "New..." from the context menu. 
The site window should display a dialog box to allow the user 
to select a new control to create, and then call 
{\b NewControl}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SITELW_ID_OPEN\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The user chose "Open..." from the context menu. 
The site window should display a dialog box to allow the user 
to choose a control data file to open, and then call 
{\b OpenControl}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SITELW_ID_CLOSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The user chose "Close" from the context menu. 
The site window should call {\b CloseControl}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SITELW_ID_SAVE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The user chose "Save" from the context menu. 
The site window should display a dialog box to allow the user 
to choose a control data file to save to, and then call 
{\b SaveControl}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SITELW_ID_PROPERTIES\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The user chose "Properties..." from the 
context menu.  The site window should call {\b ShowProperties}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowCursorMessage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowCursorMessage(}{\b UINT} {\i uiMsg}{\b , WPARAM} {\i wParam}
{\b , LPARAM} {\i lParam}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a WM_SETCURSOR 
message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uiMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The message that was received.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The WPARAM parameter of the message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The LPARAM parameter of the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_SETCURSOR message.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowKeyboardMessage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowKeyboardMessage(}{\b UINT} {\i uiMsg}{\b , WPARAM} {\i wParam}
{\b , LPARAM} {\i lParam}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a keyboard 
message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uiMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The message that was received.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The WPARAM parameter of the message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The LPARAM parameter of the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_KEYDOWN, WM_KEYUP, WM_CHAR, WM_DEADCHAR, WM_SYSKEYDOWN, 
WM_SYSKEYUP, WM_SYSDEADCHAR, WM_IME_xxx, WM_HELP, or WM_CANCELMODE 
message.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowMouseMessage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowMouseMessage(}{\b UINT} {\i uiMsg}{\b , WPARAM} {\i wParam}
{\b , LPARAM} {\i lParam}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a mouse message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uiMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The message that was received.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The WPARAM parameter of the message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The LPARAM parameter of the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_LBUTTONDOWN, WM_RBUTTONDOWN, WM_LBUTTONUP, WM_RBUTTONUP, 
WM_LBUTTONDBLCLK, WM_RBUTTONDBLCLK, or WM_MOUSEMOVE message.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowPaintRequest Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowPaintRequest(}{\b WPARAM} {\i wParam}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a WM_PAINT request.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The WPARAM parameter of the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_PAINT message.\par 

Important: when the site window owner receives WM_ERASEBKGND, 
0 should be returned (i.e. {\b DefWindowProc} should not be called).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowPaletteChanged Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowPaletteChanged(}{\b WPARAM} {\i wParam}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a WM_PALETTECHANGED 
message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The WPARAM parameter of the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_PALETTECHANGED message.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowQueryNewPalette Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowQueryNewPalette(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a WM_QUERYNEWPALETTE 
message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_QUERYNEWPALETTE message.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowResized Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT OnSiteWindowResized(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site window has received a WM_SIZE message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value to return from the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function should be called when the site window owner receives 
a WM_SIZE message.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowRewind Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void OnSiteWindowRewind(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Tells the site window to tell the loaded control to rewind its 
animation (if applicable).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnSiteWindowTick Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void OnSiteWindowTick(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Tells the site window to tell the loaded control to advance one step in 
its animation (if applicable).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::OnTranslateAccelerator Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnTranslateAccelerator(}{\b LPMSG} {\i lpMsg}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs the site that the site's container has requested translation 
of an accelerator.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Return values are the same as for 
IOleInPlaceActiveObject::TranslateAccelerator:  S_OK if the 
accelerator was processed, S_FALSE if not.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to message structure that needs translation.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::SetAdvise Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetAdvise(}{\b DWORD} {\i dwAspects}{\b , DWORD} {\i dwAdvf}
{\b , IAdviseSink *} {\i pAdvSink}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Identical to {\b IViewObject::SetAdvise}
.  {\b IAdviseSink::OnViewChange}
 
is called when the palette of the embedded control changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwAspects}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwAdvf}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAdvSink}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b IViewObject::SetAdvise}
.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::SetDefaultPalette Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetDefaultPalette(}{\b HPALETTE} {\i hpal}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Provides the site window with a default palette, to be used as the 
palette of the off-screen compositing bitmap if the 
SSWP_NOCUSTOMPALETTE is specified.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hpal}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The palette to use as the default palette. 
{\b SiteLW} takes over ownership of this palette and will 
be responsible for calling {\b DeleteObject} on it to free it. 
{\i hpal} can be NULL to specify no default palette.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::SetDesignMode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetDesignMode(}{\b BOOL} {\i f}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Put the {\b SiteLW} object into either design mode or run mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i f}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, the {\b SiteLW} object is put into design mode. 
If FALSE, the {\b SiteLW} object is put into run mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::SetServiceProvider Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetServiceProvider(}{\b IServiceProvider *} {\i psp}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Provides the site window with a pointer to an implementation of 
{\b IServiceProvider} that the site should forward calls to 
{\b IServiceProvider::QueryService}
 to.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i psp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 When the embedded control calls 
{\b IServiceProvider} on the site, the site forwards the calls 
to {\i psp}.  If {\i psp} is NULL then calls to {\b IServiceProvider} 
on the site return E_FAIL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The caller should call this function with {\i psp}==NULL before 
freeing the site object, to release the reference count to the site.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::SetSiteWindow Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetSiteWindow(}{\b HWND} {\i hwnd}{\b , DWORD} {\i dwFlags}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the site HWND of the {\b SiteLW} object.  This is an alternative 
to providing the HWND to {\b AllocSiteLW}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Window into which the site object will display the 
loaded control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to zero.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::SetSiteWindowParameters Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetSiteWindowParameters(}{\b DWORD} {\i dwFlags}{\b , IMKBitmap *} {\i pbmBkgnd}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets parameters of the {\b SiteLW} site window.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SSWP_OFFSCREEN\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The loaded control is drawn into an 
off-screen bitmap (after filling the bitmap with the 
background brush) which is then blitted to the screen. 
This reduces flicker at the cost of speed and temporary 
memory.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SSWP_HATCHEDBKGND\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The background is drawn with a hatched 
brush.  If this flag is not specified, the background is drawn 
with the user's window color (COLOR_WINDOW).\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SSWP_STRETCHTOWINDOW\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The loaded control is drawn large 
enough to fill the entire site window client area; requests 
by the control to set its bounding rectangle are denied.  If 
this flag is not specified, then the control is drawn at its 
natural size (determined by calling {\b IViewObject2::GetExtent}
 
on the control) and {\b IOleInPlaceSite::OnPosRectChange}
 
requests are honored.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SSWP_CONTEXTNOFILEIO\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The context menu displayed when the 
user right-clicks does not include file I/O menu items 
("Open...", "Save").\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SSWP_NOCUSTOMPALETTE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 SiteLW will not query the loaded 
control for a custom palette.  Instead, SiteLW will simply 
use the container's ambient palette, or the halftone palette 
if no ambient palette exists.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 SSWP_STATICPALETTE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Once the ambient palette has been 
specified, it will never change for the lifetime of the 
loaded object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbmBkgnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Background bitmap to display in the site 
window (behind the loaded control, if any).  If {\i pbmBkgnd} is NULL, 
then the background brush (see SSWP_HATCHEDBKGND) is used instead.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::ShowContextMenu Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ShowContextMenu(}{\b POINT} {\i pt}{\b , BOOL} {\i fIncludeEmbeddedControl}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Displays the context menu that contains menu items from both 
the {\b SiteLW} object and, optionally, the embedded control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to display the context menu (in client 
coordinates).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fIncludeEmbeddedControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, add menu items from 
the embedded control to the context menu.  If FALSE, only 
use menu items for the {\b SiteLW} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISiteLW::ShowProperties Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ShowProperties(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Show the property sheet for the currently loaded control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISprite Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Provides low-level efficient access to the properties of a {\b Sprite} 
control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieves control properties.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets control properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This interface is defined in "isprite.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISprite::GetInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetInfo(}{\b {\b SpriteBitmapInfo}*} {\i pBitmapInfo}{\b , UINT} {\i cbBitmapInfo}
{\b , {\b SpriteTranslucencyInfo}*} {\i pTranslucencyInfo}
{\b , UINT} {\i cbTranslucencyInfo}
{\b , {\b SpriteRotationInfo}*} {\i pRotationInfo}
{\b , UINT} {\i cbRotationInfo}
{\b , {\b SpriteQuadrangleInfo}*} {\i pQuadrangleInfo}
{\b , UINT} {\i cbQuadrangleInfo}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves control properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell This object supports an earlier version of the desired structure.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pBitmapInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer.  Information about the Sprite's 
bitmap will be stored in this buffer.  If NULL, no bitmap information 
will be retrieved.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbBitmapInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pBitmapInfo} 
(used for version checking).  Ignored if {\i pBitmapInfo} is NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pTranslucencyInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer.  Information about the Sprite's 
translucency will be stored in this buffer.  If NULL, no translucency 
information will be retrieved.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbTranslucencyInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pTranslucencyInfo} 
(used for version checking).  Ignored if {\i pTranslucencyInfo} is NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRotationInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer.  Information about the Sprite's 
rotation will be stored in this buffer.  If NULL, no rotation 
information will be retrieved.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbRotationInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pRotationInfo} 
(used for version checking).  Ignored if {\i pRotationInfo} is NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pQuadrangleInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer into which information about the 
Sprite's BLT-ing quadrangle will be stored.  If NULL, no information 
about the Sprite's BLT-ing quadrangle will be retrieved.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbQuadrangleInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pQuadrangleInfo} 
(used for version checking).  Ignored if {\i pQuadrangleInfo} is NULL.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ISprite::SetInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetInfo(}{\b {\b SpriteBitmapInfo}*} {\i pBitmapInfo}{\b , UINT} {\i cbBitmapInfo}
{\b , IMKBitmap*} {\i pMKBitmap}
{\b , {\b SpriteTranslucencyInfo}*} {\i pTranslucencyInfo}
{\b , UINT} {\i cbTranslucencyInfo}
{\b , {\b SpriteRotationInfo}*} {\i pRotationInfo}
{\b , UINT} {\i cbRotationInfo}
{\b , {\b SpriteQuadrangleInfo}*} {\i pQuadrangleInfo}
{\b , UINT} {\i cbQuadrangleInfo}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets control properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell This object supports an earlier version of the provided structure.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pBitmapInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer containing information about the 
Sprite's bitmap that is to be stored.  If NULL, the Sprite's bitmap 
information won't be altered.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbBitmapInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pBitmapInfo} 
(used for version checking).  Ignored if {\i pBitmapInfo} is NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMKBitmap}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If non-NULL, the Sprite will AddRef and use this bitmap, assuming it is the 
bitmap referred to in {\i pBitmapInfo}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pTranslucencyInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer containing information about the Sprite's 
translucency.  If NULL, the Sprite's translucency characteristics won't be 
altered.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbTranslucencyInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pTranslucencyInfo} 
(used for version checking).  Ignored if {\i pTranslucencyInfo} is NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRotationInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer containing information about the Sprite's 
rotation.  If NULL, the Sprite's rotation characteristics won't be altered.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbRotationInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pRotationInfo} 
(used for version checking).  Ignored if {\i pRotationInfo} is NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pQuadrangleInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a caller-provided buffer containing information about the Sprite's 
BLT-ing quadrangle.  If NULL, Sprite's BLT-ing quadrangle won't be altered.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbQuadrangleInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size (in bytes) of the structure pointed to by {\i pQuadrangleInfo} 
(used for version checking).  Ignored if {\i pQuadrangleInfo} is NULL.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IVariantIO Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allows property name/value pairs to be loaded or saved.  {\b IVariantIO} 
is an alternative to {\b IPropertyBag} which allows the caller to 
implement property-based persistence with less code.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT PersistList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads or saves a list of property name/value 
pairs, specified as a va_list array.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Persist}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads or saves a list of property name/value 
pairs, specified as a variable-length list of arguments.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsLoading}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Return S_OK if the {\b IVariantIO} object is 
being used to load properties, S_FALSE if it is being used to save 
properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IVariantIO::IsLoading Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsLoading(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Return S_OK if the {\b IVariantIO} object is being used to load 
properties, S_FALSE if it is being used to save\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The {\b IVariantIO} object is in loading mode, so 
{\b Persist} and {\b PersistList} will 
copy data from properties to variables.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The {\b IVariantIO} object is in saving mode, so that 
{\b Persist} and {\b PersistList} will copy 
data from variables to properties.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IVariantIO::Persist Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Persist(}{\b DWORD} {\i dwFlags}{\b , (varying)} {\i (arguments)}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads or saves a list of property name/value pairs, specified as a 
variable-length list of arguments.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.  At least one of the variables listed in 
{\i (arguments)} was written to, so the control may want to update 
itself accordingly.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell None of the variables listed in {\i (arguments)} were 
written to (either because the {\b IVariantIO} object is in 
saving mode or because none of the properties named in 
{\i (arguments)} exist in the {\b IVariantIO} object.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADVARTYPE\cell One of the VARTYPE values in {\i (arguments)} is invalid.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_TYPEMISMATCH\cell One of the variables in {\i (arguments)} could not be coerced to the 
type of the corresponding property in the {\b IVariantIO} object, or 
vice versa.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Optional flags.  See {\b IManageVariantIO::SetMode}
 for 
possible values.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i (arguments)}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The names, types, and pointers to variables 
containing the properties to persist.  These must consist of a series 
of argument triples (sets of 3 arguments) followed by a NULL. 
In each triplet, the first argument is an LPSTR which contains the 
name of the property; the second argument is a VARTYPE value that 
indicates the type of the property; the third argument is a pointer 
to a variable (typically a member variable of the control's C++ class) 
that holds the value of the property.  This variable will be read 
from or written to depending on the mode of the {\b VariantIO} object 
(see {\b IsLoading}) -- therefore the variables should 
contain valid values before {\b Persist} is called.  The following 
VARTYPE values are supported:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_INT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an int *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_I2\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a short *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_I4\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a long *.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_BOOL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a BOOL * ({\i not}
 a 
VARIANT_BOOL *).  Note that this behavior differs 
slightly from the usual definition of VT_BOOL.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_BSTR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is a BSTR *.  If 
{\b Persist} changes the value of this BSTR, the previous 
BSTR is automatically freed using {\b SysFreeString}.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_LPSTR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an LPSTR that points 
to a char array capable of holding at least _MAX_PATH 
characters including the terminating NULL.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_UNKNOWN\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an LPUNKNOWN *.  If 
{\b Persist} changes the value of this LPUNKNOWN, the previous 
LPUNKNOWN is automatically freed using {\b Release}, and the 
new value is automatically {\b AddRef}d.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_DISPATCH\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following argument is an LPDISPATCH *.  If 
{\b Persist} changes the value of this LPDISPATCH, the previous 
LPDISPATCH is automatically freed using {\b Release}, and the 
new value is automatically {\b AddRef}d.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VT_VARIANT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The following arguement is a VARIANT *. 
This allows arbitrary parameters to be passed using this 
function.  Note that this behavior differs from the usual 
definition of VT_VARIANT.  If {\b Persist} changes the value 
of this VARIANT, the previous VARIANT value is automatically 
cleared using {\b VariantClear}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example persists two properties (which in BASIC would 
be a Long and a String, respectively) named "Foo" and "Bar", 
respectively.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 pvio->Persist(0, "Foo", VT_INT, &m_iFoo, "Bar", VT_LPSTR, &m_achBar,\par 

\tab NULL);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IVariantIO::PersistList Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT PersistList(}{\b DWORD} {\i dwFlags}{\b , va_list} {\i args}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads or saves a list of property name/value pairs, specified as a 
va_list array.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.  At least one of the variables listed in 
{\i args} was written to, so the control may want to update 
itself accordingly.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell None of the variables listed in {\i args} were 
written to (either because the {\b IVariantIO} object is in 
saving mode or because none of the properties named in 
{\i args} exist in the {\b IVariantIO} object).\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADVARTYPE\cell One of the VARTYPE values in {\i args} is invalid.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_TYPEMISMATCH\cell One of the variables in {\i args} could not be 
coerced to the type of the corresponding property in the {\b IVariantIO} 
object, or vice versa.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Optional flags.  See {\b IManageVariantIO::SetMode}
 for 
possible values.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i args}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The arguments to pass.  See {\b Persist} 
for information about the organization of these arguments.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Line Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowless ActiveX control which displays as a 
single line segment of adjustable width and 24-bpp color.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long BorderColor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The color of the line, expressed as a standard 
24-bit RGB value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long BorderWidth}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The width of the line, in pixels.  This value 
is between 1 and 4 inclusive; if {\i BorderWidth} is set to a number 
outside this range it is changed to 1 or 4, whichever is closer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long X1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the head end of the line.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long Y1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the head end of the line.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long X2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the tail end of the line.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long Y2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the tail end of the line.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\i X1}, {\i Y1}, {\i X2}, and {\i Y2} are measured in pixels relative 
to the origin of the container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control cannot be directly embedded in IE3, since IE3 does 
not support windowless controls.  Instead, embed the {\b HostLW} 
control in IE3, and then embed this control into the {\b HostLW} 
control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control is packaged in both design-time and run-time versions. 
The design time version allows the control to be dragged at 
either end (to move an endpoint) or in the middle (to move the 
entire line).  The line draws its own grab handles and provides 
cursor-change feedback.  A property page is provided for editing 
all properties.  A "Straighten" verb (typically accessed via the 
right mouse) is provided to make the line horizontal or vertical.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 The run-time version drops editing features (most notably the 
property page) in order to reduce code size.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the design-time version of this control is 
"BA6B5D20-8614-11CF-B8ED-0020AF344E0A".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the run-time version of this control is 
"TBD".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CLineOC in 
"LineOC.h".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "Line.Line.1".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports 
aggregation\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ILineOC}: Provides low-level efficient access to the 
properties of a {\b Line} control.  See that interface 
for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IViewObjectEx} subset (based on {\b IViewObject} and 
{\b IViewObject2}): Used to display the object. 
DVASPECT_CONTENT is the only supported aspect.  {\b Freeze}, 
{\b Unfreeze}, {\b GetRect}, {\b GetViewStatus}, {\b QueryHitRect}, 
and {\b GetNaturalExtent} are not implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide 
the client site pointer, invoke control verbs, and get control 
state.  Only {\b SetClientSite}, {\b DoVerb}, {\b EnumVerbs} 
(design time version only), and {\b GetMiscStatus} are 
implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObjectWindowless} subset (based on {\b IOleWindow} 
and {\b IOleInPlaceObject}): Used to change control state and 
pass window messages to the control.  Only {\b UIDeactivate}, 
{\b SetObjectRects}, and {\b OnWindowmessage}, are implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of 
ambient property changes.  Only {\b OnAmbientPropertyChange} 
is implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages}: Used to retrieve information about 
the control's property page.  {\b GetPages} is implemented 
only in the design time version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}): 
Used to persist the control's data to/from an {\b IStream}. 
The file format is compatible with past and future versions 
of this control (i.e. adding and removing properties won't 
break the control).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data 
to/from an {\b IPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}:  Provides access to the control's properties. 
Does not provide type information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if 
available) on the container-provided site object:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by 
the container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceSiteWindowless}: Used to request that the 
control's position be changed, acquire mouse capture, 
invalidate and update the display of the control, and 
(at design time only) draw XOR'd image of the control during 
dragging.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently 
DISPID_AMBIENT_USERMODE).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAdviseSink} (provided via {\b IViewObject::SetAdvise}
: 
Used to advise the container that the palette of the 
control changed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LoadFromCSV\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b LoadFromCSV(}{\b IOleClientSite *} {\i psite}{\b , IStream *} {\i pstream}{\b , LPUNKNOWN} {\i punkOuter}{\b , DWORD} {\i dwClsContext}{\b , LPUNKNOWN *} {\i ppunk}{\b , CLSID *} {\i pclsid}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Read a CSV (Excel-readable comma-delimited) format stream and 
create an object that contains the data from that stream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/LFCSV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i psite}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The site of the new object.  If {\i psite} 
is not NULL, then {\b IOleObject::SetClientSite}
({\i psite}) is called 
on the newly-created object before {\b IPersistPropertyBag::Load}
 
is called.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The controlling unknown to use for the 
new object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwClsContext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the context in which the executable 
is to be run. The values are taken from the enumeration CLSCTX. 
A typical value is CLSCTX_INPROC_SERVER.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the pointer to the loaded object. 
NULL is stored in *{\i ppunk} on error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the class ID of the loaded object. 
If {\i pclsid} is NULL then this information is not returned.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LoadFromHTML\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b LoadFromHTML(}{\b IOleClientSite *} {\i psite}{\b , IStream *} {\i pstream}{\b , LPUNKNOWN} {\i punkOuter}{\b , DWORD} {\i dwClsContext}{\b , LPUNKNOWN *} {\i ppunk}{\b , CLSID *} {\i pclsid}{\b , LPSTR *} {\i ppchPage}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads an HTML format stream and creates an object specified by an 
<OBJECT> tag in that stream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/LFHTML.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i psite}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The site of the new object.  If {\i psite} 
is not NULL, then {\b IOleObject::SetClientSite}
({\i psite}) is called 
on the newly-created object before {\b IPersistPropertyBag::Load}
 
is called.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The controlling unknown to use for the 
new object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwClsContext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the context in which the executable 
is to be run. The values are taken from the enumeration CLSCTX. 
A typical value is CLSCTX_INPROC_SERVER.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the pointer to the loaded object. 
NULL is stored in *{\i ppunk} on error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the class ID of the loaded object. 
If {\i pclsid} is NULL then this information is not returned.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppchPage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to a null-terminated 
memory buffer (allocated by {\b LoadFromHTML}) into which the HTML 
file is read.  The caller is responsible for freeing this buffer 
using {\b CoTaskMemFree}.  This buffer may be used in subsequent calls 
to {\b SaveToHTML} to serve as a "template" -- {\b SaveToHTML} will 
write out the same HTML file that was read in (except for the 
<OBJECT> tag itself).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i pstream} contains multiple <OBJECT> tags, the following 
rules are used to determine which <OBJECT> tag is replaced 
by {\i pppb}:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If {\i pstream} contains a <object> tag with the word 
"object" spelled in lowercase, the first such tag is used.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Otherwise, the first <OBJECT> tag is used; in this case 
the case of the word "object" does not matter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 So, if you want to allow a specific object in an HTML file to be 
edited, spell its <object> tag in lowercase and spell other 
<OBJECT> tags in uppercase (or mixed case).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LoadFromStream\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b LoadFromStream(}{\b IOleClientSite *} {\i psite}{\b , IStream *} {\i pstream}{\b , LPUNKNOWN} {\i punkOuter}{\b , DWORD} {\i dwClsContext}{\b , LPUNKNOWN *} {\i ppunk}{\b , CLSID *} {\i pclsid}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Read a stream that contains the class ID and data of an object 
previously saved using {\b IPersistStream::Save}
, and create an object 
that contains the data from the stream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/LFS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i psite}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The site of the new object.  If {\i psite} 
is not NULL, then {\b IOleObject::SetClientSite}
({\i psite}) is called 
on the newly-created object before {\b IPersistPropertyBag::Load}
 
is called.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The controlling unknown to use for the 
new object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwClsContext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the context in which the executable 
is to be run. The values are taken from the enumeration CLSCTX. 
A typical value is CLSCTX_INPROC_SERVER.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the pointer to the loaded object. 
NULL is stored in *{\i ppunk} on error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the class ID of the loaded object. 
If {\i pclsid} is NULL then this information is not returned.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LoadPropertyBagFromCSV\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b LoadPropertyBagFromCSV(}{\b IStream *} {\i pstream}{\b , int} {\i cch}{\b , IPropertyBag *} {\i ppb}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Load properties that are stored in an {\b IStream} in CSV 
(Excel-readable comma-delimited) format into a given 
{\b IPropertyBag} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/LPBFCSV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes to read in {\i pstream}.  If {\i cch} 
is -1, then {\i pstream} is read to its end.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property bag to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that this function does not (cannot, in fact) empty {\i ppb} 
prior to loading property name/value pairs from {\i pstream}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell I/O error.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LoadPropertyBagFromHTML\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b LoadPropertyBagFromHTML(}{\b IStream *} {\i pstream}{\b , int} {\i cch}{\b , IPropertyBag *} {\i ppb}{\b , LPSTR *} {\i ppchPage}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Load properties that are stored in a <OBJECT> tag in an 
{\b IStream} in HTML format into a given {\b IPropertyBag} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/LPBFHTML.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes to read in {\i pstream}.  If {\i cch} 
is -1, then {\i pstream} is read to its end.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property bag to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppchPage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to a null-terminated 
memory buffer (allocated by this function) into which the HTML 
file is read.  The caller is responsible for freeing this buffer 
using {\b CoTaskMemFree}.  See {\b LoadFromHTML} for more information 
about {\i ppchPage}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i pstream} contains multiple <OBJECT> tags, the same 
rules specified in {\b LoadFromHTML} are used to determine which 
<OBJECT> tag is replaced by {\i pppb}.\par 

Note that this function does not (cannot, in fact) empty {\i ppb} 
prior to loading property name/value pairs from {\i pstream}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell I/O error.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LoadPropertyBagFromStream\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b LoadPropertyBagFromStream(}{\b IStream *} {\i pstream}{\b , IPropertyBag *} {\i ppb}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Load properties that are stored in an {\b IStream} (in the simple 
tagged binary format written by {\b WriteVariantProperty}) into an 
{\b IPropertyBag} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/LPBFS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property bag to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that this function does not (cannot, in fact) empty {\i ppb} 
prior to loading property name/value pairs from {\i pstream}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell I/O error.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MapMRUListToMenu\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b MapMRUListToMenu(}{\b HMRULIST} {\i hMRUList}{\b , HMENU} {\i hMenu}{\b , UINT} {\i cBaseMenuItems}{\b , UINT} {\i iItemAfterMRUList}{\b , UINT} {\i iFirstMRUItem}{\b , const TCHAR*} {\i pszEmptyListMenuItem}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maps an MRU list into an application's menu.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The handle of the menu to modify.  Can't be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cBaseMenuItems}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The size (i.e., number of items) in the menu excluding the MRU 
list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iItemAfterMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The {\b relative}
, 0-based index of the item in the menu immediately 
following the MRU list.  Typically the index of a separator.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iFirstMRUItem}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The {\b absolute}
 resource ID of the first MRU menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszEmptyListMenuItem}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the grayed menu item to insert if the MRU list is 
empty.  If NULL, "File List" will be used.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The algorithm is...\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The menu item at relative offset {\i iItemAfterMRUList} - 1 
is repeatedly deleted until the number of items in the 
menu is less than or equal to {\i cBaseMenuItems}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If the receiver MRU list is empty, then the 
{\i pszEmptyListMenuItem} is inserted into the menu 
as a grayed item with ID {\i iFirstMRUItem}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Otherwise, all the entries from the MRU list are inserted 
into the menu before {\i iItemAfterMRUList}.  The entries 
are preceeded by a 1-based index.  The ID of the first 
MRU item is set to {\i iFirstMRUItem}, the second MRU 
item is {\i iFirstMRUItem}+1, etc. 
---------------------------------------------------------------------------\par 
\pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MsgWndCreate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b MsgWndCreate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates the hidden message-passing window (if it doesn't exist). 
This window is used by {\b MsgWndSendToCallback}, 
{\b MsgWndPostToCallback}, and {\b MsgWndTrackPopupMenuEx}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/MSGWND.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the handle of the message-passing window.  Returns NULL on 
error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You should call {\b MsgWndCreate} in the constructor of your 
control to ensure that the window gets created on the same thread 
as the thread which created your control.\par 

You should call {\b MsgWndDestroy} in the destructor of your control.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MsgWndDestroy\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT} {\b MsgWndDestroy(}{\b HWND} {\i hwnd}{\b , DWORD} {\i dwFlags}{\b , STDAPI_(void)} {\i MsgWndDestroy}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Destroys a hidden message-passing window that was previously created 
by calling {\b MsgWndCreate}.  Before the window is destroyed, all 
pending messages are dispatched in it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/MSGWND.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The hidden message-passing window which was created 
by calling {\b MsgWndCreate} (usually in the constructor of the 
control, to ensure that the window is created in the same thread 
that created the control).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to zero.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MsgWndDestroy}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\b MsgWndDestroy} is typically called in the destructor of a control.\par 

{\b MsgWndDestroy} should only be called in the thread that called 
{\b MsgWndCreate}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MsgWndPostToCallback\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT} {\b MsgWndPostToCallback(}{\b HWND} {\i hwnd}{\b , MsgWndCallback *} {\i pproc}{\b , UINT} {\i uiMsg}{\b , LPARAM} {\i lParam}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Posts a message to the control's hidden message-passing window 
(typically created by calling {\b MsgWndCreate} in the control's 
constructor).  When the window receives the message, it calls a given 
callback function.  This can be used to safely pass information 
between threads.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/MSGWND.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value returned by {\b PostMessage} (-1 on error).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The hidden message-passing window which was created 
by calling {\b MsgWndCreate} (usually in the constructor of the 
control, to ensure that the window is created in the same thread 
that created the control).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pproc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The callback function that is to receive 
the message.  This function will be called on whatever thread 
calls {\b DispatchMessage}.  The {\i wParam} parameter of this function 
should be ignored by the callback function.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uiMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A message number to pass to {\i pproc}.  This is a 
window message number, so it must be in the range WM_USER through 
0x7FFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A parameter to pass to {\i pproc}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Message {\i uiMsg} is posted (via {\b PostMessage}) to the hidden 
message-passing window {\i hwnd}.  When the window receives the 
message, it calls {\i pproc}({\i uiMsg}, {\i lParam}).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example declares a callback function and calls it 
via {\b MsgWndPostToCallback}.  Note that {\i wParam} is for internal 
use by {\b MsgWndPostToCallback} and should be ignored by the 
callback function.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 void CALLBACK MyMsgWndCallback(UINT uiMsg, WPARAM wParam, LPARAM lParam)\par 

\{\par 

\tab TRACE("got the callback: uiMsg=%u, lParam=%d\\n", uiMsg, lParam);\par 

\}\par 

\par 

...\par 

MsgWndPostToCallback(MyMsgWndCallback, WM_USER, 42);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MsgWndSendToCallback\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT} {\b MsgWndSendToCallback(}{\b HWND} {\i hwnd}{\b , MsgWndCallback *} {\i pproc}{\b , UINT} {\i uiMsg}{\b , LPARAM} {\i lParam}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sends a message to the control's hidden message-passing window 
(typically created by calling {\b MsgWndCreate} in the control's 
constructor).  When the window receives the message, it calls a given 
callback function.  This can be used to safely pass information 
between threads.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/MSGWND.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value returned by {\b SendMessage} (-1 on error).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The hidden message-passing window which was created 
by calling {\b MsgWndCreate} (usually in the constructor of the 
control, to ensure that the window is created in the same thread 
that created the control).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pproc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The callback function that is to receive 
the message.  This function will be called on whatever thread 
calls {\b DispatchMessage}.  The {\i wParam} parameter of this function 
should be ignored by the callback function.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uiMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A message number to pass to {\i pproc}.  This is a 
window message number, so it must be in the range WM_USER through 
0x7FFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A parameter to pass to {\i pproc}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Message {\i uiMsg} is sended (via {\b SendMessage}) to the hidden 
message-passing window {\i hwnd}.  When the window receives the 
message, it calls {\i pproc}({\i uiMsg}, {\i lParam}).\par 

Note that the calling thread blocks until the message is processed 
by the receiving thread.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example declares a callback function and calls it 
via {\b MsgWndSendToCallback}.  Note that {\i wParam} is for internal 
use by {\b MsgWndPostToCallback} and should be ignored by the 
callback function.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 void CALLBACK MyMsgWndCallback(UINT uiMsg, WPARAM wParam, LPARAM lParam)\par 

\{\par 

\tab TRACE("got the callback: uiMsg=%u, lParam=%d\\n", uiMsg, lParam);\par 

\}\par 

\par 

...\par 

MsgWndSendToCallback(MyMsgWndCallback, WM_USER, 42);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MsgWndSetTimer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT} {\b MsgWndSetTimer(}{\b HWND} {\i hwnd}{\b , MsgWndCallback *} {\i pproc}{\b , UINT} {\i nIDEvent}{\b , UINT} {\i uElapse}{\b , LPARAM} {\i lParam}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Calls {\b SetTimer} to cause WM_TIMER messages to be sent to the 
the control's hidden message-passing window (typically created 
by calling {\b MsgWndCreate} in the control's constructor). 
When the window receives the message, it calls a given 
callback function.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/MSGWND.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value returned by {\b SetTimer} (0 on error).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The hidden message-passing window which was created 
by calling {\b MsgWndCreate} (usually in the constructor of the 
control, to ensure that the window is created in the same thread 
that created the control).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pproc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The callback function that is called 
when the timer fires.  This function will be called on whatever thread 
calls {\b DispatchMessage}.  When {\i pproc} receives WM_TIMER, {\i wParam} 
is {\i nIDEvent} and {\i lParam} is the value of {\i lParam} passed 
to {\b MsgWndSetTimer}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nIDEvent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See WM_TIMER.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uElapse}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See WM_TIMER.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A parameter to pass to {\i pproc}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that only one callback function {\i pproc} can be used per 
message-passing HWND.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MsgWndTrackPopupMenuEx\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LRESULT} {\b MsgWndTrackPopupMenuEx(}{\b HWND} {\i hwnd}{\b , HMENU} {\i hmenu}{\b , UINT} {\i fuFlags}{\b , int} {\i x}{\b , int} {\i y}{\b , LPTPMPARAMS} {\i lptpm}{\b , MsgWndCallback *} {\i pproc}{\b , LPARAM} {\i lParam}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Calls {\b TrackPopupMenuEx} to display a popup menu, and directs 
WM_COMMAND messages to a given callback function.  Can be used by 
a windowless control to display a popup context menu.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/MSGWND.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the value returned by {\b TrackPopupMenuEx} (FALSE on error). 
Returns FALSE if the message window is currently being used for 
another popup menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The hidden message-passing window which was created 
by calling {\b MsgWndCreate} (usually in the constructor of the 
control, to ensure that the window is created in the same thread 
that created the control).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hmenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b TrackPopupMenuEx}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fuFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b TrackPopupMenuEx}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i x}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b TrackPopupMenuEx}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i y}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b TrackPopupMenuEx}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lptpm}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See {\b TrackPopupMenuEx}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pproc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The callback function that is to receive 
WM_COMMAND messages.  The {\i wParam} parameter of this function 
is the {\i wParam} of the WM_COMMAND message.  The {\i lParam} parameter 
of this function is the {\i lParam} of {\b MsgWndTrackPopupMenuEx}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A parameter to pass to {\i pproc}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function calls {\b TrackPopupMenuEx}.  Any WM_COMMAND messages 
from {\b TrackPopupMenuEx} are passed to {\i pproc}.\par 

The hidden message-passing window is used to receive WM_COMMAND 
messages; this window is created if it doesn't yet exist.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A heavyweight ActiveX control which can be used in a Visual Basic 
application to implement a simple ActiveX Control editor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b String {\b OCEdit::AppTitle}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets or gets the title of the application, as defined by the 
application, for use in message boxes etc.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b String {\b OCEdit::Version}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the version of the OCEdit control, as a string. 
Read-only.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean {\b OCEdit::DesignMode}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the OCEdit control to be in either design or run mode, or 
gets the current mode.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean {\b OCEdit::IsControlLoaded}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns True if there is a control loaded into the {\b OCEdit} control, 
False otherwise.  Read-only.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Object {\b OCEdit::Control}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the loaded control, if any.  (More precisely, this property 
returns an object (IDispatch) reference to the currently-loaded 
control.)  This can be used to access the properties and methods 
of the control.  Read-only.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b String {\b OCEdit::ControlType}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the name of the class of the loaded control, if any. 
Read-only.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean {\b OCEdit::IsControlDirty}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns True if the embedded control has been changed since it was 
last saved, or False otherwise.  Returns False if no control is 
loaded.  Read-only.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b String {\b OCEdit::ControlFileName}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the name of the data file (.htm, .csv, .stm) associated with 
the current control, if any.  Read-only.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b String {\b OCEdit::ControlFileTitle}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the title of the data file (.htm, .csv, .stm) associated with 
the current control, if any.  Read-only.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean {\b OCEdit::CanShowControlProperties}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns True if {\b OCEdit::ShowControlProperties}
 can be called at 
this time to display the control's property page(s), False otherwise. 
Read-only.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b OCEdit::NewControl}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Closes the currently-loaded control, if any, and creates a new 
instance of a control which is embedded in the OCEdit control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b OCEdit::OpenControl}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Closes the currently-loaded control, if any, and loads a new control 
from a given file (.htm, .csv, or .stm).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b OCEdit::CloseControl}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Closes the currently-loaded control, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b OCEdit::SaveControl}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Saves the currently-loaded control into a given file 
(.htm, .csv, or .stm).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b OCEdit::PromptToSaveControl}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Prompts the user to save the currently-loaded control (if the control 
was modified since it was last saved).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long {\b OCEdit::ShowControlProperties}
}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Displays a property frame containing the property pages of the 
loaded control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 OCEdit is designed for use in VB4 (not IE3).  OCEdit can be used 
to implement, in a Visual Basic application, a simple OLE Control 
(i.e. ActiveX Control) editor similar to OCTest.\par 

The following events are fired by OCEdit:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b ControlFileNameChanged}
: Fired when the {\b OCEdit::ControlFileName}
 
and/or {\b OCEdit::ControlFileTitle}
 properties change.  No parameters. 
Can be used to update application UI (e.g. caption).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b ControlTypeChanged}
: Fired when the {\b OCEdit::ControlType}
 
property changes.  No parameters.  Can be used to update application 
UI (e.g. caption).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b ControlEvent}
: Fired when the loaded control fires an event. 
ControlEvent is currently under construction; at the moment the 
only parameter is a Long which indicates the ID (1, 2, ...) of the 
event being fired.  Coming soon: event name and parameters.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::AppTitle Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b String}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Sets or gets the title of the application, as defined by the 
application, for use in message boxes etc.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The value of the AppTitle property is used whenever {\b OCEdit} needs 
to refer to the name of the application.  For example, when 
{\b PromptToSaveControl} is called, the AppTitle property is 
used in the title of the message box.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::CanShowControlProperties Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Boolean}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns True if {\b ShowControlProperties} can be called at 
this time to display the control's property page(s), False otherwise. 
Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::CloseControl Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b Long CloseControl(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Closes the currently-loaded control, if any.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a non-negative HRESULT code on success, or a negative HRESULT 
error code on error.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::Control Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Object}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the loaded control, if any.  (More precisely, this property 
returns an object (IDispatch) reference to the currently-loaded 
control.)  This can be used to access the properties and methods 
of the control.  Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example sets the {\i BorderWidth} property of the control 
loaded into {\b OCEdit} control {\i oced} to 1, assuming the loaded 
control supports the {\i BorderWidth} property (e.g. if the loaded 
control is a {\b Line}).\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 oced.Control.BorderWidth = 1\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::ControlFileName Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b String}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the name of the data file (.htm, .csv, .stm) associated with 
the current control, if any.  Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::ControlFileTitle Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b String}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the title of the data file (.htm, .csv, .stm) associated with 
the current control, if any.  Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::ControlType Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b String}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the name of the class of the loaded control, if any. 
Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\b oced} is an {\b OCEdit} control that currently contains a 
{\b Line} control, then the following will set {\i str} to "Line".\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Dim str As String\par 

str = oced.ControlType\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::DesignMode Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Boolean}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the OCEdit control to be in either design or run mode, or 
gets the current mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\b DesignMode} is True, then the OCEdit control is in design 
mode, which means that editing is enabled.  If {\b DesignMode} 
is False, then OCEdit is in Run mode, which means that editing 
features are disabled.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::Flags Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Long}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Sets or gets the current OCEdit flags.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The flag values are the same as those described in 
{\b ISiteLW::SetSiteWindowParameters}
.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::IsControlDirty Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Boolean}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns True if the embedded control has been changed since it was 
last saved, or False otherwise.  Returns False if no control is 
loaded.  Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::IsControlLoaded Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b Object}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns True if there is a control loaded into the {\b OCEdit} control, 
False otherwise.  Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::NewControl Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b Long NewControl(}{\b String} {\i Type}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Closes the currently-loaded control, if any, and creates a new 
instance of a control which is embedded in the OCEdit control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns 1 if the user presses the Cancel button (if prompted). 
Otherwise returns a nonnegative HRESULT value on success, or a 
negative HRESULT on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Type}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type of control to create.  This is either a 
class ID in braces (e.g. "\{4E1F2E00-BD85-11CF-B705-00AA00BF27FD\}") 
or a ProgID (e.g. "HostLW.HostLW.1").  Alternatively, {\i Type} 
may be "" to prompt the user for a control to load.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 This example loads a {\b HostLW} control into the {\b OCEdit} control 
named {\i oced}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Dim hr As Long\par 

hr = oced.NewControl("HostLW.HostLW.1")\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::OpenControl Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b Long OpenControl(}{\b String} {\i FileName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Closes the currently-loaded control, if any, and loads a new control 
from a given file (.htm, .csv, or .stm).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns 1 if the user presses the Cancel button (if prompted). 
Otherwise returns a nonnegative HRESULT value on success, or a 
negative HRESULT on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i FileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the file to load, or "" to prompt 
for the name of a file to load.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 This example loads "c:\\foo.htm" into the {\b OCEdit} control named 
{\i oced}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Dim hr As Long\par 

hr = oced.OpenControl("c:\\foo.htm")\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::PromptToSaveControl Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b Long PromptToSaveControl(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Prompts the user to save the currently-loaded control (if the control 
was modified since it was last saved).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns 1 if the user presses the Cancel button.  Returns another 
nonnegative HRESULT success code if the loaded control didn't need 
saving, or if it did need saving but was successfully saved.  Returns 
a negative HRESULT on error.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::SaveControl Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b Long SaveControl(}{\b String} {\i FileName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Saves the currently-loaded control into a given file 
(.htm, .csv, or .stm).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns 1 if the user presses the Cancel button (if prompted). 
Otherwise returns a nonnegative HRESULT value on success, or a 
negative HRESULT on error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i FileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the file to save to, or "" to prompt 
for the name of a file to save to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 This example saves the control loaded into the {\b OCEdit} named 
{\i oced} into "c:\\foo.htm".\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Dim hr As Long\par 

hr = oced.SaveControl("c:\\foo.htm")\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::ShowControlProperties Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b Long ShowControlProperties(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Displays a property frame containing the property pages of the 
loaded control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a non-negative HRESULT code on success, or a negative HRESULT 
error code on error.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OCEdit::Version Property\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Data Type\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b String}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the version of the OCEdit control, as a string. 
Read-only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCEDIT/OCEDCTL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Example of the value returned by the {\b Version} property: 
"1.00.0042", which indicates that the version of the OCEdit control 
is build 42 of version 1.0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OpenMRUList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b OpenMRUList(}{\b int} {\i cMaxEntries}{\b , HKEY} {\i hKey}{\b , LPCTSTR} {\i pszSubkey}{\b , LPCTSTR} {\i pszListName}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Opens a new or existing registry-based MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the open MRU list if successful.  Returns 
NULL on failure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cMaxEntries}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The maximum number of entries in the list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The list will be opened at the registry path, 
{\i hKey}\\{\i pszSubkey}\\{\i pszListName}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszSubkey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] (See {\i hKey}.)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszListName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] (See {\i hKey}.)\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If the registry key contains more than {\i cMaxEntries}, it will 
be truncated to {\i cMaxEntries}. 
---------------------------------------------------------------------------\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PersistChild\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b PersistChild(}{\b IVariantIO *} {\i pvio}{\b , LPCSTR} {\i szCollection}{\b , int} {\i iChild}{\b , LPUNKNOWN} {\i punkOuter}{\b , DWORD} {\i dwClsContext}{\b , LPUNKNOWN *} {\i ppunk}{\b , CLSID *} {\i pclsid}{\b , BOOL *} {\i pfSafeForScripting}{\b , BOOL *} {\i pfSafeForInitializing}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads or saves a child of a given container object from/to a given. 
{\b IVariantIO} object.  Used to help implement persistence in control 
containers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/PC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The {\b IVariantIO} object to read properties from 
or write properties to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szCollection}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the collection that the child 
object belongs to.  See {\b PersistSiteProperties} for more information 
about collections.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iChild}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The index (into the collection named by {\i szCollection}) 
of the child object whose site properties are being persisted by this 
call to {\b PersistSiteProperties}.  Conventionally, indices are 1-based 
(i.e. the first child object in the collection is numbered 1, not 0). 
See {\b PersistSiteProperties} for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The controlling unknown to use for the 
new child object, if the child object is loaded (i.e. if {\i pvio} 
is in loading mode and if a child object is successfully loaded).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwClsContext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the context in which the executable 
is to be run. The values are taken from the enumeration CLSCTX. 
A typical value is CLSCTX_INPROC_SERVER.  This parameter is ignored 
unless if {\i pvio} is in loading mode and a child object is 
successfully loaded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to an LPUNKNOWN variable that currently 
contains (if {\i pvio} is in saving mode) or into which will be stored 
(if {\i pvio} is in loading mode) the pointer to the child control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the class ID of the child object, 
if {\i pvio} is in loading mode.  If {\i pclsid} is NULL then this 
information is not returned.  If {\i pvio} is in saving mode and 
{\i pclsid} is not NULL, then on entry *{\i pclsid} is assumed to contain 
the class ID of the child object (useful if the child object does not 
implement {\b IPersist}); if not specified, the class ID of the child 
is obtained by calling {\b IPersist} on the child.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfSafeForScripting}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If non-NULL, *{\i pfSafeForScripting} is 
set to TRUE or FALSE depending on whether the control is safe-for-scripting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfSafeForInitializing}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If non-NULL, *{\i pfSafeForInitializing} is 
set to TRUE or FALSE depending on whether the control is safe-for-initializing.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b PersistSiteProperties} for an example of how {\b PersistChild} 
is used.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell {\i pvio} is in loading mode, and collection {\i szCollection} 
does not contain a child numbered {\i iChild}.  (This typically tells 
the container that it can stop trying to load children.)\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PersistSiteProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b PersistSiteProperties(}{\b IVariantIO *} {\i pvio}{\b , LPCSTR} {\i szCollection}{\b , int} {\i iChild}{\b , DWORD} {\i dwFlags}{\b , (varying)} {\i (arguments)}{\b , HRESULT __cdecl} {\i PersistSiteProperties}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads or saves a list of property name/value pairs associated with 
the site of the child of a given object from/to a given {\b IVariantIO} 
object.  Used to help implement persistence in control containers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/PSP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The {\b IVariantIO} object to read properties from 
or write properties to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szCollection}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the collection that the child 
object belongs to.  The parent object may contain one or more 
collections of children; when children are accessed via {\b IDispatch}, 
they are conventionally addressed by indexing into the property array 
named by this index.  For example, if the parent contains a collection 
named "Mailboxes" (that contains a collection of child "Mailbox" 
objects), a VB script writer might access the first child in the 
collection using code like "parent.Mailboxes(1).NumLetters".  See 
Comments for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iChild}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The index (into the collection named by {\i szCollection} 
of the child object whose site properties are being persisted by this 
call to {\b PersistSiteProperties}.  Conventionally, indices are 1-based 
(i.e. the first child object in the collection is numbered 1, not 0).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i (arguments)}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The names, types, and pointers to variables 
containing the properties to persist.  These must consist of a series 
of argument triples (sets of 3 arguments) followed by a NULL. 
See {\b IVariantIO::Persist}
 for more information about the format 
of {\i (arguments)}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i PersistSiteProperties}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The site of a child object is the object maintained by the container 
that's associated with that specific child.  The site may have its 
own properties, logically associated with the child's properties 
by the user (or script writer), but implemented separatedly.  For 
example, the site may maintain a "Visible" property indicating whether 
or not the child is visible.\par 

Note that {\b PropertyHelper} does not automatically implement 
{\b IDispatch} access to collections, but {\b PersistSiteProperties} 
will name the site properties according to a similer naming convention: 
e.g. if "NumLetters" is a site property of a "Mailbox" object, 
{\b PersistSiteProperties} saves the property under the name 
"Mailboxes(1).NumLetters".\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example persists two site properties (which in BASIC 
would be a Long and a String, respectively) named "Foo" and "Bar", 
respectively.  These site properties belong to the first child 
of the collection named "Controls".\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 PersistSiteProperties(pvio, "Controls", 1, 0,\par 

\tab "Foo", VT_INT, &m_iFoo, "Bar", VT_LPSTR, &m_achBar, NULL);\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how a container control might implement 
{\b IPersistVariantIO::DoPersist}
, assuming the container maintains 
an array {\i m_apunkChild} containing {\i m_cChild} {\b IUnknown} pointers 
that each point to a child object.  The array {\i m_afVisible} contains 
one BOOL value for each child object containing the value of the 
site property "Visible" for that child.  (Both arrays are 1-based, 
which means the zeroeth element is not used and the array has an 
extra element allocated at the end.)\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDMETHODIMP CMyControl::DoPersist(IVariantIO* pvio, DWORD dwFlags)\par 

\{\par 

\tab // persist the container's own properties, "BackColor" and\par 

\tab // "Rectangular"\par 

\tab HRESULT hr;\par 

\tab if (FAILED(hr = pvio->Persist(0,\par 

\tab \tab \tab "BackColor", VT_INT, &m_rgb,\par 

\tab \tab \tab "Rectangular", VT_BOOL, &m_fRect,\par 

\tab \tab \tab NULL)))\par 

\tab \tab return hr;\par 

\tab if (hr == S_OK)\par 

\tab \tab ...one or more properties changed, so repaint etc. container...\par 

\par 

\tab // loop once for each child object in collection "Controls"\par 

\tab // (which is the container's only collection in this example);\par 

\tab // if <pvio> is in loading mode, this loops once for each child\par 

\tab // object whose data is stored in <pvio>\par 

\tab for (iChild = 1;\par 

\tab \tab  (iChild <= m_cChild) || (IsLoading(pvio) == S_OK)\par 

\tab \tab  iChild++)\par 

\tab \{\par 

\tab \tab // persist the site properties of child number <iChild>\par 

\tab \tab if (FAILED(hr = PersistSiteProperties(pvio, "Controls", iChild,\par 

\tab \tab \tab \tab 0, "Visible", VT_BOOL, m_afVisible + iChild, NULL)))\par 

\tab \tab \tab return hr;\par 

\tab \tab if (hr == S_OK)\par 

\tab \tab \tab ...site property changed, so repaint etc. child...\par 

\par 

\tab \tab // persist the child: in saving mode this writes the\par 

\tab \tab // properties of the child to <pvio>; in loading mode this\par 

\tab \tab // loads the child control whose data is in <pvio> and\par 

\tab \tab // stores its IUnknown pointer in m_punkChild[iChild]\par 

\tab \tab if (FAILED(hr = PersistChild(pvio, "Controls", iChild, NULL,\par 

\tab \tab \tab \tab CLSCTX_INPROC_SERVER, m_apunkChild + iChild, NULL, 0)))\par 

\tab \tab \tab return hr;\par 

\tab \tab if (hr == S_FALSE)\par 

\tab \tab \{\par 

\tab \tab \tab // we're in loading mode, but we finished loading the\par 

\tab \tab \tab // last control in the "Controls" collection, so quit\par 

\tab \tab \tab break;\par 

\tab \tab \}\par 

\tab \}\par 

\par 

\tab // clear the dirty bit if requested\par 

\tab if (dwFlags & PVIO_CLEARDIRTY)\par 

\tab \tab m_fDirty = FALSE;\par 

\par 

\tab return S_OK;\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.  At least one of the variables listed in 
{\i (arguments)} was written to, so the control may want to update 
itself accordingly.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell None of the variables listed in {\i (arguments)} were 
written to (either because the {\b IVariantIO} object is in 
saving mode or because none of the properties named in 
{\i (arguments)} exist in the {\b IVariantIO} object.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADVARTYPE\cell One of the VARTYPE values in {\i (arguments)} is invalid.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_TYPEMISMATCH\cell One of the variables in {\i (arguments)} could not be coerced to the 
type of the corresponding property in the {\b IVariantIO} object, or 
vice versa.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PersistVariantIO\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b PersistVariantIO(}{\b DWORD} {\i dwFlags}{\b , (varying)} {\i (arguments)}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads or saves a list of property name/value pairs, specified as a 
variable-length list of arguments that's formatted in the same way as 
{\b IVariantIO::Persist}
, to/from an {\b IPropertyBag} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/PVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the same flags passed to 
{\b IManageVariantIO::SetMode}
 (e.g. VIO_ISLOADING).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i (arguments)}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The names, types, and pointers to variables 
containing the properties to persist.  These must consist of a series 
of argument triples (sets of 3 arguments) followed by a NULL. 
See {\b IVariantIO::Persist}
 for information about the format of 
these arguments.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.  At least one of the variables listed in 
{\i (arguments)} was written to, so the control may want to update 
itself accordingly.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell None of the variables listed in {\i (arguments)} were 
written to (either because the {\b IVariantIO} object is in 
saving mode or because none of the properties named in 
{\i (arguments)} exist in the {\b IVariantIO} object.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADVARTYPE\cell One of the VARTYPE values in {\i (arguments)} is invalid.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_TYPEMISMATCH\cell One of the variables in {\i (arguments)} could not be coerced to the 
type of the corresponding property in the {\b IVariantIO} object, or 
vice versa.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PersistVariantIOList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b PersistVariantIOList(}{\b DWORD} {\i dwFlags}{\b , va_list} {\i args}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads or saves a list of property name/value pairs, specified as a 
va_list array that's formatted in the same way as 
{\b IVariantIO::Persist}
, to/from an {\b IPropertyBag} object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/PVIOL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the same flags passed to 
{\b IManageVariantIO::SetMode}
 (e.g. VIO_ISLOADING).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i args}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The arguments to pass.  See {\b IVariantIO::Persist}
 
for information about the organization of these arguments.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.  At least one of the variables listed in 
{\i args} was written to, so the control may want to update 
itself accordingly.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell None of the variables listed in {\i args} were 
written to (either because the {\b IVariantIO} object is in 
saving mode or because none of the properties named in 
{\i args} exist in the {\b IVariantIO} object).\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_BADVARTYPE\cell One of the VARTYPE values in {\i args} is invalid.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DISP_E_TYPEMISMATCH\cell One of the variables in {\i args} could not be 
coerced to the type of the corresponding property in the {\b IVariantIO} 
object, or vice versa.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PickClass\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b PickClass(}{\b HINSTANCE} {\i hInstance}{\b , UINT} {\i residDialogTitle}{\b , UINT} {\i cCategories}{\b , const CATID[]} {\i rgCategories}{\b , CLSID*} {\i pclsid}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Displays a modal "class picker" dialog which lists all the 
registered classes which support a given set of component 
categories and lets the user choose one, returning its CLSID.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/PICKCLS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hInstance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The handle of the instance which owns {\i residDialogTitle}. 
May be NULL only if {\i residDialogTitle} is 0.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i residDialogTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The ID of a string resource to be used as the the dialog 
box's title.  If 0, the default title, "Insert Object", is 
displayed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cCategories}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The number of categories in {\i rgCategories}.  Must be 
non-zero.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rgCategories}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] An array of {\i cCategories} component category IDs.  The 
dialog will display the friendly names of all registered classes 
which implement all of the categories.  May not be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] If the function is successful, {\i pclsid} is set to the 
class ID of the selected class.  On entry, {\i pclsid} may not 
be NULL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 To make use of this function, you must include ochelp.rc into your 
project\\'s resource file.  To do this from within Developer Studio, 
select the menu item, View | "Resource Includes", and add 
#include "..\\ocmisc\\ocmisc.rc" to the "Compile-time directives". 
(The path may be different depending on where your project is located 
relative to ocmisc.)\par 

This functions makes the following assumptions about the state of the 
system registry:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab A registered class might have one or more keys 
of the form: HKEY_CLASSES_ROOT\\CLSID\\\{clsid\}\\Implemented Categories\\\{catid\}. 
If a class has this key it signifies that the class with 
CLSID \{clsid\} implements the component category with CATID \{catid\}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Such a class will also have a key: HKEY_CLASSES_ROOT\\CLSID\\\{clsid\}\\ProgID, 
the value of which is the class' programmatic identifier.  There will also 
be a key: HKEY_CLASSES_ROOT\\\{progid\} matching the class' ProgID, the 
value of which is the "friendly name" for the class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Each class that implements all the {\i rgCategories} must also have a ProgID 
and a friendly name or else it will not be displayed in the class picker dialog.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 Here's a typical usage scenario:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 const int c_cCategories = 3;\par 

CLSID clsid;\par 

HRESULT hResult;\par 

LPUNKNOWN pUnknown;\par 

CATID rgCategories[c_cCategories];\par 

rgCategories[0] = CATID_Insertable;\par 

rgCategories[1] = CATID_Control;\par 

rgCategories[2] = CATID_MMControl;\par 

\par 

if (SUCCEEDED(PickClass(hInstance,\par 

\tab \tab \tab \tab \tab \tab IDS_CLASS_PICKER_TITLE,\par 

\tab \tab \tab \tab \tab \tab c_cCategories,\par 

\tab \tab \tab \tab \tab \tab rgCategories,\par 

\tab \tab \tab \tab \tab \tab &clsid)))\par 

\{\par 

\tab hResult = CoCreateInstance(clsid,\par 

\tab \tab \tab \tab \tab \tab \tab    NULL,\par 

\tab \tab \tab \tab \tab \tab \tab    CLSCTX_INPROC_SERVER,\par 

\tab \tab \tab \tab \tab \tab \tab    IID_IUnknown,\par 

\tab \tab \tab \tab \tab \tab \tab    (void**)pUnknown);\par 

\tab if (SUCCEEDED(hResult))\par 

\tab \{\par 

\tab \tab //...\par 

\tab \}\par 

\}\par 

---------------------------------------------------------------------------\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.  {\i pclsid} is set to the selected class ID.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.  A variety of failures are possible: 
the user did not select a class, no registered classes 
implemented all specified categories, out of memory, 
etc.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PixelsToHIMETRIC\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b PixelsToHIMETRIC(}{\b int} {\i cx}{\b , int} {\i cy}{\b , SIZE *} {\i psize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a width and height from pixels (on the default monitor) 
to HIMETRIC units.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HIMETRIC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cx}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input width in pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cy}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input height in pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i psize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The output size in HIMETRIC units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PrintableANSIToUNICODE\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b PrintableANSIToUNICODE(}{\b LPWSTR} {\i pwchDst}{\b , LPCSTR} {\i pchSrc}{\b , int} {\i cwchDstMax}{\b , LPCSTR *} {\i ppchSrcEnd}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a printable ANSI string to UNICODE.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/PATU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the function succeeds, and {\i cwchDstMax} is nonzero, the return 
value is the number of wide characters (including the terminating null 
wide character) written to the buffer pointed to by {\i pwchDst}.  If 
the function succeeds, and {\i cwchDstMax} is zero, the return value is 
the required size, in wide characters, for a buffer that can receive 
the translated string.  If the function fails, the return value is 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwchDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The buffer that will hold the output UNICODE string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input ANSI string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cwchDstMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The capacity of {\i pwchDst} (in wide characters).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppchSrcEnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the first character 
past the end of the printable ANSI string in {\i pchSrc}.  This 
character will be either a a carriage return, a line feed, 
a terminating null character, or one of the delimiter characters 
(see {\i dwFlags}).  If {\i ppchSrcEnd} is NULL, then this information 
is not returned.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PA_CSV\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The string being read is a CSV (comma-separated 
variable) token.  The only delimiter character is ",".\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PA_HTML\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The string being read is an HTML token.  The 
delimiter characters are "=", " ", tab, "<", and ">".\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b UNICODEToPrintableANSI} for a definition of "printable ANSI 
string".  {\b PrintableANSIToUNICODE} reads a single string starting 
at location {\i pchSrc}, performing decoding as needed (e.g. ignoring 
surrounding quotation marks, un-doubling doubled quotation and 
percent characters, and converting hexadecimal escape sequences to 
binary values); the resulting string (which may contain embedded 
null characters) is stored in {\i pwchDst}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropertyBagCompactor Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Implements an {\b IPropertyBag} that reads and writes its data in a 
more compact way in a second {\b IPropertyBag} by "folding" multiple 
properties with the same period-terminated prefix (e.g. "Foo.X = 42, 
Foo.Y = 'Hello'") into a single property (e.g. "Foo = 'X=42,Y=Hello'").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/APBC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to use to access the uncompacted 
properties.  When writing into this property bag, write a property 
with name and value equal to NULL in order to "flush" the compacted 
property bag (i.e. complete writing its contents).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocPropertyBagCompactor} to create a {\b PropertyBagCompactor} 
object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropertyBagOnStream Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Implements {\b IPropertyBag} whose properties are contained in 
a given {\b IStream}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APBOS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to use to access the properties 
stored in the given {\b IStream}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocPropertyBagOnStream} to create a {\b PropertyBagOnStream} 
object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 See {\b VariantPropertyHeader} for a description of the format of 
the data in the {\b IStream}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropertyBagOnVariantProperty Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Implements {\b IPropertyBag} whose only property is contained in 
a given {\b VariantProperty}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APBOVP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to use to access the single property 
stored in the given {\b VariantProperty}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocPropertyBagOnVariantProperty} to create a 
{\b PropertyBagOnVariantProperty} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropertyHelper Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Provides an implementation of {\b Persist}, {\b IPersistPropertyBag}, 
{\b IPersistStream}, {\b IPersistStreamInit}, and a simplified 
implementation of {\b IDispatch}, for any object which implements 
{\b IPersistVariantIO}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/APH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPersistPropertyBag}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads or saves properties from/to a given 
{\b IPropertyBag} object.  Used to provide a textual representation of 
the data of the object that implements {\b IPersistVariantIO}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPersistStream}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads or saves the data of the object that 
implements {\b IPersistVariantIO} as a stream of bytes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPersistStreamInit}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Like {\b IPersistStream}, but with an extra 
method that allows the object to be created in a "newly initialized" 
state.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IDispatch}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides script engines etc. access to the properties 
exposed by the {\b IPersistVariantIO}.  This {\b IDispatch} 
implementation isn't particularly fast, but it's an inexpensive way 
for a control to provide a rudimentary {\b IDispatch} implementation.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocPropertyHelper} to create a {\b PropertyHelper} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropPageHelper Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Implements {\b IPropertyPage}.  Designed to be aggregated by an 
object that wants to provide a specific propery page implementation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/PROPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IPropertyPage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Standard OLE property page implementation.  The 
information about the property page is maintained in a 
{\b PropPageHelperInfo} structure that's allocated by the 
aggregator and shared with {\b PropPageHelper}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b AllocPropPageHelper} for more information.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ReadHTMLTagToVariantIO\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b ReadHTMLTagToVariantIO(}{\b LPSTR *} {\i ppchTag}{\b , IManageVariantIO * *} {\i ppmvio}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads an HTML tag from a memory buffer and returns an {\b VariantIO} 
object that contains the contents of that tag.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/RHTMLTAG.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppchTag}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a variable to read the HTML tag from. 
On entry, *{\i ppchTag} should point to the "<" character that 
starts the tag.  On exit, *{\i ppchTag} will point to the character 
after the ">" character that ends the tag.  (Or, *{\i ppchTag} will 
point to a null character if a null is encountered before the closing 
">" character.)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppmvio}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the 
allocated {\b VariantIO} object.  NULL is stored in *{\i ppmvio} on 
error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ReadHTMLToken\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b ReadHTMLToken(}{\b LPCSTR} {\i pchSrc}{\b , LPCSTR *} {\i ppchSrcEnd}{\b , BSTR *} {\i pbstr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads an HTML token (word, quoted string, etc.) from an ANSI buffer 
and returns it as a BSTR.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/RHTMLTOK.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input ANSI string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppchSrcEnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the first character 
past the end of the printable ANSI string in {\i pchSrc}.  If 
{\i ppchSrcEnd} is NULL, then this information is not returned.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the allocated string 
containing the token's value.  The string is allocated by this 
function, but must be freed by the caller using {\b SysFreeString}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 An HTML token is defined as a sequence of nonblank characters not 
including "=", ">", or white space (except that the token may 
be surrounded by double quotation marks).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ReadStreamToMemory\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b ReadStreamToMemory(}{\b IStream *} {\i pstream}{\b , int} {\i cch}{\b , char * *} {\i ppchBuf}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Read bytes from a stream into memory (which is allocated by this 
function).  Reads either a given number of bytes or until the end 
of the stream.  The returned block of memory is null-terminated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/RSTM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes to read in {\i pstream}.  If {\i cch} 
is -1, then {\i pstream} is read to its end.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppchBuf}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store a pointer to the returned block 
of memory.  NULL is stored in *{\i ppchBuf} on error.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ReadVariantProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b ReadVariantProperty(}{\b IStream *} {\i pstream}{\b , VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads a {\b VariantProperty} from an {\b IStream} in a simple tagged 
binary format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/RVP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the property name/value pair 
that's read in.  Any unknown records in {\i pstream} are automatically 
skipped.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b VariantPropertyHeader} for a description of the format of 
the data read from {\i pstream} by this function.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The end-of-stream marker was read in.  (This is the data 
that's written using {\b WriteVariantProperty} with NULL {\i pvp}.)\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ReadVariantPropertyFromCSV\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b ReadVariantPropertyFromCSV(}{\b LPCSTR} {\i pch}{\b , VariantProperty *} {\i pvp}{\b , LPCSTR *} {\i ppchEnd}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads a {\b VariantProperty} that's stored in CSV (Excel-readable 
comma-delimited) format in a memory buffer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/RVPFCSV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The buffer to read from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the property name/value pair. 
*{\i pvp} need not be initialized on entry.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppchEnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to store the pointer to the end of the 
line (that begins with {\i pch}).  On exit, *{\i ppchEnd} will point 
to the character past the carriage return and/or line feed, to 
the beginning of the next line (or the terminating null).  If 
{\i ppchEnd} is NULL then this information is not returned.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 RegDeleteTree\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LONG} {\b RegDeleteTree(}{\b HKEY} {\i hParentKey}{\b , LPCTSTR} {\i szKeyName}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Delete a registry key and all its subkeys (i.e., its "tree").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/REG.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hParentKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The parent key of the the key to delete.  May not be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szKeyName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the key at the top of the tree to delete.  May not 
be NULL.  Assumed to be a subkey of {\i hParentKey}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function is almost identical to the Win32 API, 
{\b RegDeleteKey}.  However, {\b RegDeleteKey} only deletes the 
key and its subkeys under Win95, not WinNT. 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 ERROR_SUCCESS\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 ERROR_CANTOPEN\cell Failure.  The key {\i hParentKey}\\{\i szKeyName} 
couldn't be opened (probably because it doesn't exist).\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.  An error occurred while deleting keys.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 RegisterControls\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b RegisterControls(}{\b ICatRegister*} {\i pCatReg}{\b , ControlInfo *} {\i pctlinfo}{\b , DWORD} {\i dwAction}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Registers or unregisters one or more controls.  Helps implement 
{\b DllRegisterServer} and {\b DllUnregisterServer}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/REG.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCatReg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A component category registration 
manager.  Used to register or unregister the various component 
categories specified for the control via {\i pctlinfo}.  Can't 
be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pctlinfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Information about the control that's 
being registered or unregistered.  See {\b ControlInfo} for more 
information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwAction}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May be one of the following:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 RC_REGISTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Registers the control.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 RC_UNREGISTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unregisters the control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You can register more than one control by making a linked list 
out of your {\b ControlInfo} structures -- set each {\i pNext} 
field to the next structure, and set the last {\i pNext} to NULL.\par 

All controls which are registered by this function are registered 
as "safe for scripting" and "safe for initializing".\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows how to implement {\b DllRegisterServer} 
and {\b DllUnregisterServer} using {\b RegisterControls}.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 STDAPI DllRegisterServer(void)\par 

\{\par 

\tab return RegisterControls(&g_ctlinfo, RC_REGISTER);\par 

\}\par 

\par 

STDAPI DllUnregisterServer(void)\par 

\{\par 

\tab return RegisterControls(&g_ctlinfo, RC_UNREGISTER);\par 

\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The operation failed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 RemoveAllMRUListEntries\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b RemoveAllMRUListEntries(}{\b HMRULIST} {\i hMRUList}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes all the entries in an MRU list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Removes all the registry entries.  Automatically calls 
{\b ResetMRUList}. 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 RemoveIthMRUListEntry\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b RemoveIthMRUListEntry(}{\b HMRULIST} {\i hMRUList}{\b , int} {\i iEntry}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes an MRU list entry by index.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iEntry}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The 0-based index of the entry to remove.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure. 
---------------------------------------------------------------------------\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 RemoveMRUListEntry\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b RemoveMRUListEntry(}{\b HMRULIST} {\i hMRUList}{\b , const TCHAR*} {\i szEntry}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes an MRU list entry by name.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szEntry}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the entry to remove.  If NULL, nothing happens.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 (other)\cell Failure. 
---------------------------------------------------------------------------\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ResetMRUList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b ResetMRUList(}{\b HMRULIST} {\i hMRUList}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resets an MRU list so that the next call to 
{\b GetNextMRUListEntry} will retrieve the first entry.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success. 
---------------------------------------------------------------------------\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SaveToCSV\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b SaveToCSV(}{\b IStream *} {\i pstream}{\b , CLSID *} {\i pclsid}{\b , IPersistPropertyBag *} {\i pppb}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Save an object that supports {\b IPersistPropertyBag} to an 
{\b IStream} in CSV (Excel-readable comma-delimited) format. 
Can also be used to save just a class ID to a stream (which is 
useful for saving an object that doesn't support any persistence 
interface).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/STCSV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The class ID to save to the stream. 
If {\i pclsid} is NULL then the class ID is obtained from {\i pppb} 
(by calling {\b IPerist::GetClassID}
, assuming {\i pppb} is not also 
NULL).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The object to save.  If {\i pppb} is 
NULL, then only the class ID *{\i pclsid} (if {\i pclsid} is not NULL) 
is saved to the stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SaveToHTML\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b SaveToHTML(}{\b IStream *} {\i pstream}{\b , CLSID *} {\i pclsid}{\b , IPersistPropertyBag *} {\i pppb}{\b , LPCSTR} {\i szPage}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Saves an object that supports {\b IPersistPropertyBag} to an 
{\b IStream} in HTML format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/STHTML.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The class ID to save to the stream. 
If {\i pclsid} is NULL then the class ID is obtained from {\i pppb} 
(by calling {\b IPerist::GetClassID}
, assuming {\i pppb} is not also 
NULL).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pppb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The object to save.  If {\i pppb} is 
NULL, then only the class ID *{\i pclsid} (if {\i pclsid} is not NULL)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szPage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An HTML file (perhaps returned by a previous call 
to {\b LoadFromHTML}) to use as a "template".  The HTML file that 
is written to {\i pstream} is the same as this file, except that 
the <OBJECT> tag is replaced by the object specified by {\i pppb}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i szPage} contains multiple <OBJECT> tags, the same 
rules specified in {\b LoadFromHTML} are used to determine which 
<OBJECT> tag is replaced by {\i pppb}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SaveToStream\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b SaveToStream(}{\b IStream *} {\i pstream}{\b , CLSID *} {\i pclsid}{\b , IPersistStream *} {\i pps}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Save an object that supports {\b IPersistStream} to an 
{\b IStream} in a simple binary tagged file format. 
Can also be used to save just a class ID to a stream (which is 
useful for saving an object that doesn't support any persistence 
interface).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/STS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The class ID to save to the stream. 
If {\i pclsid} is NULL then the class ID is obtained from {\i pps} 
(by calling {\b IPerist::GetClassID}
, assuming {\i pps} is not also 
NULL).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pps}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The object to save.  If {\i pps} is 
NULL, then only the class ID *{\i pclsid} (if {\i pclsid} is not NULL) 
is saved to the stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SaveVariantPropertiesToCSV\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b SaveVariantPropertiesToCSV(}{\b IStream *} {\i pstream}{\b , IEnumVariantProperty *} {\i pevp}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Save an {\b IEnumVariantProperty} object to an {\b IStream} in 
CSV (Excel-readable comma-delimited) format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/SVPTCSV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pevp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property bag to save.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell I/O error.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SaveVariantPropertiesToHTML\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b SaveVariantPropertiesToHTML(}{\b IStream *} {\i pstream}{\b , IEnumVariantProperty *} {\i pevp}{\b , LPCSTR} {\i szPage}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Saves an {\b IEnumVariantProperty} object to an {\b IStream} in 
HTML format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/SVPTHTML.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pevp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property bag to save.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szPage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An HTML file (perhaps returned by a previous call 
to {\b LoadFromHTML}) to use as a "template".  See {\b SaveToHTML} 
for more information about this parameter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell I/O error.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SetMRUListMaxEntries\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b SetMRUListMaxEntries(}{\b HMRULIST} {\i hMRUList}{\b , int} {\i cMaxEntries}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the maximum number of entries in an MRU list, possibly 
truncating the list.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/MRU.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMRUList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A handle to a previously opened MRU list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cMaxEntries}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The maximum number of entries allowed in the list.  Must be 
greater than 0 and less than 999.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i cMaxEntries} is less than the number of entries currently 
in the list, any excess entries will be removed from the list. 
---------------------------------------------------------------------------\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SiteLW Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Implements {\b ISiteLW}, which implements an ActiveX windowed control 
that hosts an ActiveX lightweight windowless control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/ASLW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b ISiteLW}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides functions to manipulate the site object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocSiteLW} to create a {\b SiteLW} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SiteWL Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 For each embedded control, the {\b Stage} control maintains a {\b SiteWL} 
object ("Site WindowLess" that provides additional properties and 
methods for the embedded control.  {\b SiteWL} is not directly 
accessible. {\b SiteWL} should not be confused with {\b SiteLW}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SITEWL.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Width}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Width of the control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Height}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Height of the control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Left}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 X offset of the top left corner of the control from the 
top left corner of the {\b Stage}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Top}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Y offset of the top left corner of the control from the 
top left corner of the {\b Stage}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Z}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Z order of the control.  Higher Zs are further toward the 
back.  Z can be negative.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BOOL Visible}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Whether the control is visible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LPSTR Name}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Name of the control.  New controls are automatically 
assigned unique names.  The current limit on name length is 31 
characters, not including a terminating NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BSTR Tag}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Control tag.  The tag can be used to store user data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Cursor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of the cursor that is shown when the mouse is over 
the object.  The ID can be any of the OCR_* values in winuser.h.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b SiteWL} currently supports many other animation-related 
properties and methods for demonstration purposes only. 
The functionality provided by these properties will eventually 
be moved to a separate control.  If you wish to use these 
properties before then, please see the demos in the mmctl\\demo 
directory or contact MikeVK.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Sprite Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowless ActiveX control which displays a 
bitmap.  The bitmap may contain multiple "frames", in which 
case the Sprite can "animate" by cycling between its frames.\par 

The Sprite may be transparent, translucent, or entirely 
opaque.  If translucent, the Sprite translucency can also 
be made to cycle as the Sprite steps from frame to frame.\par 

The Sprite can also be made to rotate.  If a Sprite is set to rotate, 
only the first frame of its bitmap is displayed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer NumFrames}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The total number of frames in the bitmap. 
Must be at least 1.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer FramesAcross}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames in each row of bitmap frames. 
Must be at least 1.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer FramesDown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames in each row of bitmap frames. 
Must be at least 1.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b String BitmapPath}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The file system path to the bitmap file. 
May be absolute or relative.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean NotTransparent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Whether or not the Sprite is transparent.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 True\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The Sprite has no transparent sections.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 False\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The Sprite is transparent in those areas where it is colored with 
its 0th palette entry.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitTranslucency}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The initial translucency value.  Must be between 
{\b SPRITE_MIN_TRANS}
 (transparent) and 
{\b SPRITE_MAX_TRANS}
 (opaque), and between 
{\b MinTranslucency}
 and {\b MaxTranslucency}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MinTranslucency}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum translucency value.  Must be between 
{\b SPRITE_MIN_TRANS}
 (transparent) and 
{\b SPRITE_MAX_TRANS}
 (opaque).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MaxTranslucency}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum translucency value.  Must be between 
{\b SPRITE_MIN_TRANS}
 (transparent) and 
{\b SPRITE_MAX_TRANS}
 (opaque).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyStep}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in translucency which occurs with every call to the Sprite's 
{\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_TRANSSTEP}
 (slowest) and 
{\b SPRITE_MAX_TRANSSTEP}
 (fastest).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyBoundaryAction}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the Sprite's translucency hits {\b MinTranslucency}
 or 
{\b MaxTranslucency}
.  See {\b SPRITE_BOUNDARYACTION} for possible values.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitTranslucencyDelay}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite first appears. 
Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}
 method. 
Must be between 
{\b SPRITE_MIN_TRANSDELAY}
 (no delay) and 
{\b SPRITE_MAX_TRANSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyDelayAtMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its 
minimum translucency.  Measured in terms of the number of calls to the 
Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_TRANSDELAY}
 (no delay) and 
{\b SPRITE_MAX_TRANSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer TranslucencyDelayAtMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its 
maximum translucency.  Measured in terms of the number of calls to the 
Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_TRANSDELAY}
 (no delay) and 
{\b SPRITE_MAX_TRANSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 How the Sprite will rotate when animated.  See {\b SPRITE_ROTATION_TYPE} 
for possible values.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitRotation}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The Sprite's initial rotation.  Ignored if {\b RotationType} is 
{\b SPRITE_ROT_NONE}
.  Must be between 
{\b SPRITE_MIN_ROT}
 and {\b SPRITE_MAX_ROT}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MinRotation}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The Sprite's minimum rotation.  Ignored if {\b RotationType} is 
{\b SPRITE_ROT_NONE}
.  Must be between 
{\b SPRITE_MIN_ROT}
 and {\b SPRITE_MAX_ROT}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer MaxRotation}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The Sprite's maximum rotation.  Ignored if {\b RotationType} is 
{\b SPRITE_ROT_NONE}
.  Must be between 
{\b SPRITE_MIN_ROT}
 and {\b SPRITE_MAX_ROT}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationStep}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in rotation which occurs with every call to the Sprite's 
{\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_ROTSTEP}
 (slowest) and 
{\b SPRITE_MAX_ROTSTEP}
 (fastest).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationBoundaryAction}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the Sprite's rotation hits {\b MinRotation}
 or 
{\b MaxRotation}
.  See {\b SPRITE_BOUNDARYACTION} for possible values.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer InitRotationDelay}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite first appears. 
Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}
 method. 
Must be between 
{\b SPRITE_MIN_ROTDELAY}
 (no delay) and 
{\b SPRITE_MAX_ROTSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationDelayAtMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its 
minimum rotation.  Measured in terms of the number of calls to the 
Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_ROTDELAY}
 (no delay) and 
{\b SPRITE_MAX_ROTSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer RotationDelayAtMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its 
maximum rotation.  Measured in terms of the number of calls to the 
Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_ROTDELAY}
 (no delay) and 
{\b SPRITE_MAX_ROTSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the first vertex of an arbitrary quadrangle 
in which to draw the Sprite.  If any of the coordinates in the four 
quadrangle vertices (X1,Y1), (X2,Y2), (X3,Y3), or (X4,Y4) is non-zero, 
the Sprite will be drawn using quadrangle BLT-ing, ignoring any 
translucency or rotation settings.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the first vertex of an arbitrary quadrangle 
in which to draw the Sprite.  See {\b X1} for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the second vertex of an arbitrary quadrangle 
in which to draw the Sprite.  See {\b X1} for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the second vertex of an arbitrary quadrangle 
in which to draw the Sprite.  See {\b X1} for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X3}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the third vertex of an arbitrary quadrangle 
in which to draw the Sprite.  See {\b X1} for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y3}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the third vertex of an arbitrary quadrangle 
in which to draw the Sprite.  See {\b X1} for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer X4}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The x-coordinate of the fourth vertex of an arbitrary quadrangle 
in which to draw the Sprite.  See {\b X1} for more information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Integer Y4}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The y-coordinate of the fourth vertex of an arbitrary quadrangle 
in which to draw the Sprite.  See {\b X1} for more information.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b  SizeToContent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set the Sprite's bounding rectangle to the same size as any frame 
in the Sprite's underlying bitmap.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control cannot be directly embedded in IE3, since IE3 does 
not support windowless controls.  Instead, embed the {\b HostLW} 
control in IE3, and then embed this control into the {\b HostLW} 
control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control is packaged in both design-time and run-time versions. 
The design time version provides a property page for editing all 
the control's properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 The run-time version eliminates the property pages (in order to reduce 
code size).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the design-time version of this control is 
"40DA82E1-70FE-11CF-92F8-00AA00613BF1".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the run-time version of this control is 
"TBD (currently the same as the design-time version)".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CSpriteControl in 
"csprite.h".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "Sprite.Sprite.3".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports 
aggregation\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISprite}: Provides low-level efficient access to the 
properties of a {\b Sprite} control.  See that interface 
for more information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IViewObjectEx} subset (based on {\b IViewObject} and 
{\b IViewObject2}): Used to display the object. 
DVASPECT_CONTENT is the only supported aspect.  {\b Freeze}, 
{\b Unfreeze}, {\b GetRect}, {\b GetViewStatus}, {\b QueryHitRect}, 
and {\b GetNaturalExtent} are not implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide 
the client site pointer, invoke control verbs, and get control 
state.  Only {\b SetClientSite}, {\b DoVerb}, {\b EnumVerbs} 
(design time version only), and {\b GetMiscStatus} are 
implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObjectWindowless} subset (based on {\b IOleWindow} 
and {\b IOleInPlaceObject}): Used to change control state and 
pass window messages to the control.  Only {\b UIDeactivate}, 
{\b SetObjectRects}, and {\b OnWindowMessage} are implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of 
ambient property changes.  Only {\b OnAmbientPropertyChange} 
is implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages}: Used to retrieve information about 
the control's property page.  {\b GetPages} is implemented 
only in the design time version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}): 
Used to persist the control's data to/from an {\b IStream}. 
The file format is compatible with past and future versions 
of this control (i.e. adding and removing properties won't 
break the control).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data 
to/from an {\b IPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAnimate}: Used to control which frame of the bitmap is 
displayed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISprite}: Provides a vtable mechanism for getting and setting 
Sprite properties.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistVariantIO}: Used to persist Sprite properties and to 
get and set persistable properties via OLE automation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IServiceProvider}: Used to pass service requests (via 
{\b QueryService} to Sprite's client site.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleCommandTarget}: Used to stop the Sprite if it is in the 
middle of loading.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to implement non-persistable properties 
and methods.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if 
available) on the container-provided site object:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by 
the container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceSiteWindowless}: Used to request that the 
control's position be changed, acquire mouse capture, 
invalidate and update the display of the control, and 
(at design time only) draw XOR'd image of the control during 
dragging.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently 
DISPID_AMBIENT_USERMODE).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAdviseSink} (provided via {\b IViewObject::SetAdvise}
: 
Used to advise the container that the palette of the 
control changed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Stage Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowless ActiveX control which is itself a container 
for lightweight windowless controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/STAGE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Boolean Transparent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 True if the stage is transparent (i.e. you 
can see through it to any controls or background underneath), 
False if the stage is opaque (in which case the color is {\i BackColor}). 
This doesn't affect the controls within the stage.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long BorderColor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The background color of the stage, expressed as a 
standard 24-bit RGB value.  {\i BorderColor} is ignored if 
{\i Transparent} is True.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Long Count}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of "Players" (controls) contained in the 
{\b Stage}.  Read-only.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The controls contained within the {\b Stage} are accessible via 
OLE Automation.  See the "For VBS Users" section for details.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Currently {\b Stage} provides animation functionality for 
demonstration purposes only\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control cannot be directly embedded in IE3, since IE3 does 
not support windowless controls.  Instead, embed the {\b HostLW} 
control in IE3, and then embed this control into the {\b HostLW} 
control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b Stage} is packaged in both design-time and run-time versions. 
The design time version allows controls to be embedded in 
{\b Stage} using the right-click context menu.  Various property 
pages are provided for editing most properties, including "site" 
properties which are implemented by {\b Stage} but maintained 
separately by {\b SiteWL} for each embedded control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab To change the background color while authoring, select 
the control and press "c".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Stage fires an event to the container whenever a contained 
control is clicked.  The event parameters include object-relative 
X and Y coordinates of the click location.  See the notify.htm 
sample in the mmctl\\demo directory for details.  Stage also 
supports MouseEnter, MouseLeave, MouseUp, and MouseDown events. 
See input.htm for examples.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Stage also supports Tick and EdgeAction events; see notify.htm, 
and note that the way these events are supported may change.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 The run-time version drops editing features (most notably the 
property page) in order to reduce code size.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the design-time version of this control is 
"2E0E7F00-6F81-11CF-AB13-00AA00A437B1".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab The class ID of the run-time version of this control is 
"TBD" (currently the same as the design-time version).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For VBS users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Use the Players method to access a control by name; for example, 
"Stage1.Players("Sprite 2").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Use the Count property with the PlayerNum method to loop through 
all the controls in a Stage.  For an example, see vbstest.htm in 
the MM Controls demo directory. 
If you want to change the Z order of 
all controls, use a variation on that method:  Loop through the 
controls and assign each one to an object variable (probably in an 
array), and then loop through the array and set Z.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The numerical arguments to the PlayerNum method refer to Stage's 
own internal numbering of the controls.  This numbering may not 
be the same as the numbering you see in the HTML file when Stage 
writes out the properties of its embedded controls -- for example, 
"Players(1).Name=Tiny".  In this example, do not expect that you 
can use "PlayerNum(1)" to refer to the control named "Tiny". 
When you want to refer to a particular control, use the Players 
method with the control name, e.g. "Stage1.Players("Tiny").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab You can use identical names at different levels of the containment 
hierarchy and distinguish them by providing a complete "path" to 
the name. For example, if you have one Stage nested inside another 
inside another, and all are named "Stage1", you can access the 
innermost one as "Stage1.Players("Stage 1").Players.("Stage 1"). 
If a name at a lower level of the hierarchy is unambiguous, you 
can access it directly from the top level.  For example, if a 
deeply nested control named "Banner Text" is uniquely named, you 
can access it as Stage1.Players("Banner Text").\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CStageOC in 
"Stage.h".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "Stage.Stage.1".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports 
aggregation\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IStage}: Provides low-level efficient access to the 
properties of a {\b Stage} control.  See that interface 
for more information.  [TBD]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IViewObjectEx} subset (based on {\b IViewObject} and 
{\b IViewObject2}): Used to display the object. 
DVASPECT_CONTENT is the only supported aspect.  {\b Freeze}, 
{\b Unfreeze}, {\b GetRect}, {\b GetViewStatus}, {\b QueryHitRect}, 
and {\b GetNaturalExtent} are not implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide 
the client site pointer, invoke control verbs, and get control 
state.  Only {\b SetClientSite}, {\b DoVerb}, {\b EnumVerbs} 
(design time version only), and {\b GetMiscStatus} are 
implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObjectWindowless} subset (based on {\b IOleWindow} 
and {\b IOleInPlaceObject}): Used to change control state and 
pass window messages to the control.  Only {\b UIDeactivate}, 
{\b SetObjectRects}, and {\b OnWindowmessage}, are implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of 
ambient property changes.  Only {\b OnAmbientPropertyChange} 
is implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages}: Used to retrieve information about 
the control's property page.  {\b GetPages} is implemented 
only in the design time version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}): 
Used to persist the control's data to/from an {\b IStream}. 
The file format is compatible with past and future versions 
of this control (i.e. adding and removing properties won't 
break the control).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data 
to/from an {\b IPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}:  Provides access to the control's properties. 
Does not provide type information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if 
available) on the container-provided site object:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by 
the container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceSiteWindowless}: Used to request that the 
control's position be changed, acquire mouse capture, 
invalidate and update the display of the control, and 
(at design time only) draw XOR'd image of the control during 
dragging.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently 
DISPID_AMBIENT_USERMODE).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAdviseSink} (provided via {\b IViewObject::SetAdvise}
: 
Used to advise the container that the palette of the 
control changed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TaskMemAlloc\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LPVOID} {\b TaskMemAlloc(}{\b ULONG} {\i cb}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates memory using the task memory allocator (see {\b CoGetMalloc}). 
This is simply a macro that calls {\b HelpMemAlloc} with specific flags.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the allocated block of memory.  Returns NULL on 
error.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes of memory to allocate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TaskMemFree\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b TaskMemFree(}{\b LPVOID} {\i pv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Frees a block of memory previously allocated using {\b TaskMemAlloc}. 
This is simply a macro that calls {\b HelpMemFree} with specific flags.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/HELPMEM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the block of memory to allocate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TCHARFromGUID\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b TCHAR*} {\b TCHARFromGUID(}{\b REFGUID} {\i guid}{\b , TCHAR*} {\i pszGUID}{\b , int} {\i cchMaxGUIDLen}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a GUID to a TCHAR-based string representation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/GUID2TCH.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns an alias to {\i pszGUID}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The GUID to convert.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszGUID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] The string form of the {\i guid}.  Can't be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchMaxGUIDLen}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\i szGUID} is, on entry, assumed to point to a buffer of 
at least {\i cchMaxGUIDLen} characters in length.  Must be 
greater at least 39.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Unlike {\b StringFromGUID2} which always returns an OLECHAR form 
of the GUID string, this function returns a wide or single-byte 
form of the string depending on the build environment.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b CLSIDFromTCHAR} 
---------------------------------------------------------------------------\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TextFX Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A lightweight windowless ActiveX control that displays and 
animates text.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/TEXTFX.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Properties\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b LPSTR Text}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Text displayed by the control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b COLORREF TextColor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Text color.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b COLORREF BackColor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Background color.  Ignored if BackTransparent 
is TRUE.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BOOL BackTransparent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Whether background is transparent.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int BorderWidth}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Border width.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Angle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Angle (in degrees) at which the text is drawn.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DWORD FXFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Flags that determine what effects are used to 
display the text.  The only flag currently supported is FX_USEGUIDES. 
However, other effects such as rotation are available via other 
properties such as Angle.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b (various) Font...}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 See Win32 doc for LOGFONT:  all LOGFONT fields 
are available as properties where "lf" is replaced by "Font" (e.g. 
FontHeight, FontFaceName, and so on).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b int Guide...}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 (Guide[Top | Bot][X | Y][1 | 2 | 3 | 4]Now; 
for example, GuideBotY2Now).  Control points for 
Bezier guidelines that determine where text is drawn, if FX_USEGUIDES 
is set in FXFlags.  For example, GuideTopX1Now is the X coordinate of 
one endpoint of the top guideline.  The first and fourth points on each 
guideline are endpoints, and the second and third points are control 
points of the Bezier curve that defines the guideline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i For all users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab To change the text color while authoring, select the 
control and press "c" (or use the Font dialog available on 
the context menu).  To change the background color, select the 
control and press "C".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab {\b TextFX} currently supports many other animation-related 
properties for demonstration purposes only.  The functionality 
provided by these properties will eventually be moved to a 
separate control.  If you wish to use these 
properties before then, please see the demos in the mmctl\\demo 
directory or contact MikeVK.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\i For C++ users:}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The class ID of this control is defined as CLSID_CTextFXOC in 
"textfx.h".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab The ProgID of this control is "TextFX.TextFX.1".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control implements the following interfaces:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IUnknown}: A delegating {\b IUnknown} that supports 
aggregation\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ITextFX}: Provides low-level efficient access to the 
properties of a {\b TextFX} control.  See that interface 
for more information.  [TBD]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IViewObjectEx} subset (based on {\b IViewObject} and 
{\b IViewObject2}): Used to display the object. 
DVASPECT_CONTENT is the only supported aspect.  {\b Freeze}, 
{\b Unfreeze}, {\b GetRect}, {\b GetViewStatus}, {\b QueryHitRect}, 
and {\b GetNaturalExtent} are not implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleObject} subset: Used to allow the container to provide 
the client site pointer, invoke control verbs, and get control 
state.  Only {\b SetClientSite}, {\b DoVerb}, {\b EnumVerbs} 
(design time version only), and {\b GetMiscStatus} are 
implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceObjectWindowless} subset (based on {\b IOleWindow} 
and {\b IOleInPlaceObject}): Used to change control state and 
pass window messages to the control.  Only {\b UIDeactivate}, 
{\b SetObjectRects}, and {\b OnWindowmessage}, are implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleControl} subset: Used to inform the control of 
ambient property changes.  Only {\b OnAmbientPropertyChange} 
is implemented.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b ISpecifyPropertyPages}: Used to retrieve information about 
the control's property page.  {\b GetPages} is implemented 
only in the design time version.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistStreamInit} (based on {\b IPersistStream}): 
Used to persist the control's data to/from an {\b IStream}. 
The file format is compatible with past and future versions 
of this control (i.e. adding and removing properties won't 
break the control).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IPersistPropertyBag}: Used to persist the control's data 
to/from an {\b IPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}:  Provides access to the control's properties. 
Does not provide type information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab This control sources (calls) the following interfaces (if 
available) on the container-provided site object:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleClientSite}: The client site pointer provided by 
the container.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IOleInPlaceSiteWindowless}: Used to request that the 
control's position be changed, acquire mouse capture, 
invalidate and update the display of the control, and 
(at design time only) draw XOR'd image of the control during 
dragging.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IDispatch}: Used to access ambient properties (currently 
DISPID_AMBIENT_USERMODE).\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\tx1200\fi-360\li1200\emdash\tab {\b IAdviseSink} (provided via {\b IViewObject::SetAdvise}
: 
Used to advise the container that the palette of the 
control changed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODEConcat\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b UNICODEConcat(}{\b wchar_t *} {\i wpchDst}{\b , const wchar_t *} {\i wpchSrc}{\b , int} {\i wcchDstMax}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Concatenates one UNICODE string to another.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/UCAT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to copy {\i wpchSrc} to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 String to copy.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wcchDstMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Capacity of {\i wpchDst} (in wide characters). 
If {\i wcchDstMax} is less than or equal to zero, this function 
does nothing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Provided {\i wcchDstMax} greater than zero, {\i wpchDst} is always 
null-terminated.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODECopy\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b UNICODECopy(}{\b wchar_t *} {\i wpchDst}{\b , const wchar_t *} {\i wpchSrc}{\b , int} {\i wcchDstMax}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Copies one UNICODE string to another.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/UCOPY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where to copy {\i wpchSrc} to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wpchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 String to copy.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wcchDstMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Capacity of {\i wpchDst} (in wide characters). 
If {\i wcchDstMax} is less than or equal to zero, this function 
does nothing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Provided {\i wcchDstMax} greater than zero, {\i wpchDst} is always 
null-terminated.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODEToANSI\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b UNICODEToANSI(}{\b LPSTR} {\i pchDst}{\b , LPCWSTR} {\i pwchSrc}{\b , int} {\i cchDstMax}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a UNICODE string to ANSI.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/UNICODE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The buffer that will hold the output ANSI string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input UNICODE string.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchDstMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The capacity of {\i pchDst} (in characters).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UNICODEToPrintableANSI\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b UNICODEToPrintableANSI(}{\b LPSTR} {\i pchDst}{\b , LPCWSTR} {\i pwchSrc}{\b , int} {\i cchDstMax}{\b , int} {\i cchSrc}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a UNICODE string to a printable ANSI string.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/UTPA.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the function succeeds, and {\i cchDstMax} is nonzero, the return 
value is the number of characters (including the terminating null) 
written to the buffer pointed to by {\i pchDst}.  If the function 
succeeds, and {\i cchDstMax} is zero, the return value is the required 
size, in bytes, for a buffer that can receive the translated string. 
If the function fails, the return value is 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pchDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The buffer that will hold the output ANSI string. 
{\i pchDst} should be NULL if {\i cchDstMax} is zero.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The input UNICODE string.  If {\i cchSrc} is 
specified (i.e. is not -1), then {\i pwchSrc} may contain embedded 
null characters (which are each written out as "%00").\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchDstMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The capacity of {\i pchDst} (in characters).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cchSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The length of {\i pwchSrc} (in wide characters). 
If {\i cchSrc} is -1, then {\i pwchSrc} is assumed to be null-terminated 
and the length is calculated automatically.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 May contain the following flags.  Only one of 
PA_CSV or PA_HTML may be specified.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PA_CSV\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The string being written is a CSV (comma-separated 
variable) token.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 PA_HTML\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The string being written is an HTML token.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The printable ANSI string stored in {\i pchDst} is compatible with 
the CSV (Excel-readable comma-delimited) format, i.e. the output 
string may be used as a field in a CSV file.  The output string 
is the same as the input string (converted to ANSI), but with the 
following processing applied:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab If the string contains a double quotation mark '"', 
then the string is surrounded in double quotation marks. 
If PA_HTML is specified, then the string is quoted if it is empty 
(i.e. "") or contains any characters other than a-z, A-Z, 0-9, 
or dash "-" or underscore "_".  If PA_CSV is specified, then the 
string is quoted if it contains a comma ",".\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Any double quotation mark '"', percent '%', or pipe '|' characters 
in the string are doubled (e.g. "%" becomes "%%").  Exception: 
'%' or '|' characters at the end of the string are not doubled.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Any nonprintable ANSI characters (in the range 0-255) are 
represented in hexadecimal with a percent character prefix 
(e.g. %07 represents character 7).  The hexadecimal number must 
contain exactly two digits.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \tx720\fi-360\li720\emdash\tab Any nonprintable UNICODE characters (in the range 256-65535) are 
represented in hexadecimal with a pipe character prefix 
(e.g. |0123 represents character 0x123).  The hexadecimal number 
must contain exactly four digits.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 UninitHelpAdvise\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b UninitHelpAdvise(}{\b HelpAdviseInfo *} {\i pha}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Peforms final cleanup of a {\b HelpAdviseInfo} structure, including 
releasing the {\b IAdviseSink} pointer if necessary.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/ADVISE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pha}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Caller-allocated structure that was 
previously initialized using {\b InitHelpAdvise}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 You must call {\b InitHelpAdvise} before calling {\b HelpSetAdvise} 
and {\b HelpGetAdvise}, and {\b UninitHelpAdvise} when the object 
that contains the {\b HelpAdviseInfo} structure is deleted.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantFromString\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b VariantFromString(}{\b VARIANT *} {\i pvarDst}{\b , LPCTSTR} {\i szSrc}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes a VARIANT to contain the copy of an LPCTSTR string.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/DISPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A caller-supplied VARIANT structure to 
initialize.  The initial contents of {\i pvarDst} are ignored; 
the caller does not need to call {\b VariantInit} before 
calling {\b VariantFromString}.  Both {\i pvarDst}->{\i vt} and 
{\i pvarDst}->{\i bstrVal} are initialized by this function.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i szSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The string to copy.  Can't be NULL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantIO Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Provides a property bag implementation which supports {\b IPropertyBag} 
as well as {\b IVariantIO}, {\b IManageVariantIO}, and 
{\b IEnumVariantProperty}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows properties to be read from and written to the 
{\b VariantIO} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IVariantIO}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An alternative to {\b IPropertyBag} which allows the 
caller to implement property-based persistence with less code.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IManageVariantIO}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Based on {\b IVariantIO}.  Allows the caller to 
control how the methods of {\b IVariantIO} operate (e.g. whether the 
{\b IVariantIO} is in loading mode or saving mode).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IEnumVariantProperty}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows the caller to enumerate the 
properties that are currently in the {\b VariantIO} object.  Note that 
{\b VariantIO} does not implement {\b IEnumVariantProperty::Clone}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocVariantIO} to create a {\b VariantIO} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantIOOnPropertyBag Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Provides an implementation of {\b IVariantIO} (and {\b IManageVariantIO}) 
that operates on a given {\b IPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/AVIOOPB.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IVariantIO}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An alternative to {\b IPropertyBag} which allows the 
caller to implement property-based persistence with less code.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IManageVariantIO}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Based on {\b IVariantIO}.  Allows the caller to 
control how the methods of {\b IVariantIO} operate (e.g. whether the 
{\b IVariantIO} is in loading mode or saving mode).  Note that 
{\b VariantIOOnPropertyBag} does not implement 
{\b IManageVariantIO::DeleteAllProperties}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IPropertyBag}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides access to the same {\b IPropertyBag} 
object that was given to {\b AllocVariantIOOnPropertyBag} as 
the {\b IPropertyBag} to operate on.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocVariantIOOnPropertyBag} to create a 
{\b VariantIOOnPropertyBag} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantIOToMapDISPID Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Provides an implementation of {\b IVariantIO} which is used to map a 
property name to a DISPID (property number) or vice versa.  Can also 
be used to get or set the value of that property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/AVIOTMD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b {\b IVariantIO}}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Typically used as a parameter to 
{\b IPersistVariantIO::DoPersist}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b AllocVariantIOToMapDISPID} to create a 
{\b VariantIOToMapDISPID} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantPropertyClear\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b VariantPropertyClear(}{\b VariantProperty *} {\i pvp}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Frees data maintained in a {\b VariantProperty} structure.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/VPC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The structure to clear.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function calls {\b SysFreeString} on {\i pvp}->{\i bstrPropName} 
and {\b VariantClear} on {\i pvp}->{\i varValue}.\par 

Unlike {\b VariantPropertyInit}, this function {\b does}
 assume 
that {\i pvp} was correctly initialized before this function 
was called.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantPropertyInit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b VariantPropertyInit(}{\b VariantProperty *} {\i pvp}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes a {\b VariantProperty} structure.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/VPI.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The structure to initialize.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Unlike {\b VariantPropertyClear}, this function does not assume 
that {\i pvp} contained valid data on entry.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantTypeNameToNumber\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b VARTYPE} {\b VariantTypeNameToNumber(}{\b char *} {\i sz}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a VARTYPE string name to a VARTYPE number.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/VTNAME.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the VARTYPE value identified by string name {\i sz}. 
On error, 0 (VT_EMPTY) is returned.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i sz}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The VARTYPE string name.  The case of {\i sz} doesn't 
matter.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i sz} should contain the same string as the VT_ identifier name, 
but without the "VT_" (e.g. "I2" should stored in {\i sz} to indicate 
the type VT_I2).  If {\i sz} starts with a '#' character, then the 
following number is interpreted as a VARTYPE value.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantTypeNumberToName\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b VariantTypeNumberToName(}{\b VARTYPE} {\i vt}{\b , char *} {\i pch}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Converts a VARTYPE value to a string name that can serve as the 
name of the type.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/VTNUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i vt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type number to convert.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A buffer to store the string name in.  This buffer 
should be large enough to hold _MAX_PATH characters.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i vt} isn't a known type, then "#{\i vt}" (e.g "#42") is stored 
in {\i pch}.  Otherwise, what's stored in {\i pch} is the same 
as the VT_ identifier name, but without the "VT_" (e.g. "I2" is stored 
in {\i pch} if {\i vt} is VT_I2).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteHTMLTagFromVariantIO\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteHTMLTagFromVariantIO(}{\b IStream *} {\i pstream}{\b , IEnumVariantProperty *} {\i pevp}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Writes an HTML tag whose attributes are stored in an {\b VariantIO} 
object to an {\b IStream}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WHTMLTAG.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pevp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An interface on the {\b VariantIO} 
object containing the attribute name/value pairs.  The tag name 
should be stored in {\i pevp} as the "_tag" property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteHTMLToken\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteHTMLToken(}{\b IStream *} {\i pstream}{\b , LPLOLESTR} {\i wsz}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Writes an HTML token (given as an LPOLESTR) to an {\b IStream} 
in ANSI format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WHTMLTOK.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wsz}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The token to write.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteVariantProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteVariantProperty(}{\b IStream *} {\i pstream}{\b , VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in a simple tagged 
binary format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/WVP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property name/value pair to write. 
If {\i pvp} is NULL, then this function writes a VariantPropertyHeader 
containing {\i iType}==-1 and {\i cbData}==0 to mark the end of the 
stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b VariantPropertyHeader} for a description of the format of 
the data written to {\i pstream} by this function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteVariantPropertyToCSV\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteVariantPropertyToCSV(}{\b IStream *} {\i pstream}{\b , VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in CSV (Excel-readable 
comma-delimited) format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WVPTCSV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property name/value pair to write.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 *{\i pvp} is written as a single line of text in the following format:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 {\i name}
,{\i type}
,{\i value}
\par 
\pard\plain \sa160\sl240 \fs21\lang1033 ...where {\i name}
 is the property name, {\i type}
 is the type 
(a string returned by {\b VariantTypeNumberToName}), and {\i value}
 
is the value (coerced to a string by {\b VariantChangeType}). 
Each of these three strings is processed by {\b UNICODEToPrintableANSI} 
before being written out.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WriteVariantPropertyToHTML\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b WriteVariantPropertyToHTML(}{\b IStream *} {\i pstream}{\b , VariantProperty *} {\i pvp}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Writes a {\b VariantProperty} to an {\b IStream} in HTML format 
as a "<PARAM>" tag.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/WVPTHTML.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pstream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream to write to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property name/value pair to write.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Currently unused.  Must be set to 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 *{\i pvp} is written as a single line of text in the following format:\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \li720 <PARAM name={\i name}
 value={\i value}
>\par 
\pard\plain \sa160\sl240 \fs21\lang1033 ...where {\i name}
 is the property name and {\i value}
 is the value 
(coerced to a string by {\b VariantChangeType}). 
Each of these three strings is processed by {\b UNICODEToPrintableANSI} 
before being written out.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ControlInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab UINT cbSize;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPCTSTR tszProgID;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPCTSTR tszFriendlyName;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab const CLSID * pclsid;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab HMODULE hmodDLL;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPCTSTR tszVersion;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iToolboxBitmapID;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwMiscStatusDefault;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwMiscStatusContent;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID * pguidTypeLib;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwTypeLibFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab AllocOCProc * pallocproc;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab ULONG * pcLock;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab ControlInfo* pNext;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab UINT uiVerbStrID;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} ControlInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains information used by {\b RegisterControls} to register and 
unregister a control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/REG.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cbSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The size of this structure (used for version 
control).  Must be set to sizeof(ControlInfo).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b tszProgID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ProgID of the object, e.g. 
"MYCTLLIB.TinyCtl.1".\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b tszFriendlyName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The human-readable name of the object 
(at most 40 characters or so), e.g. "My Control".\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to the class ID of the object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b hmodDLL}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The module handle of the DLL implementing the 
object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b tszVersion}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The version number of the object, e.g. "1.0".\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iToolboxBitmapID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The resource ID of the toolbox bitmap of 
the object, if the object is a control.  The resource must be located 
in the same DLL specified by {\i tszDLLPath} and/or {\i hmodDLL}. 
If {\i iToolboxBitmapID} is -1, it is ignored.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwMiscStatusDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The MiscStatus bits (OLEMISC_XXX) 
to use for all display apsects except DVASPECT_CONTENT.  Typically 0.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwMiscStatusContent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The MiscStatus bits (OLEMISC_XXX) 
to use for display aspect DVASPECT_CONTENT.  See the example below.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pguidTypeLib}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The object's type library GUID, or NULL if 
the object doesn't have a type library.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwTypeLibFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Type library flags.  I don't know what these 
are yet (they're registered as TypeLib\\\{guid\}<version>\\Flags), 
but 0 and 2 seem to be common values.  Ignored if {\i pguidTypeLib} 
is NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pallocproc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Function which can allocate an instance 
of the OLE control and return an {\b AddRef}'d {\b IUnknown} pointer 
to it.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pcLock}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a DLL lock count variable defined as a 
global variable in your DLL.  This global variable maintains a count 
of locks used by {\b IClassFactory::LockServer}
.  To increment or 
decrement this lock count, use {\b InterlockedIncrement} and 
{\b InterlockedDecrement} instead of modifying it directly.  This will 
ensure that access to the lock count is synchronized between your 
control's server and the OCHelp-supplied class factory.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero or more of the following:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_INSERTABLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as "Insertable".  Probably 
should not be used for ActiveX controls.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_CONTROL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as a "Control".  Probably 
should not be used for ActiveX controls.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_MMCONTROL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as a "Multimedia Control".\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_SAFEFORSCRIPTING\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as "safe-for-scripting" 
meaning that the object promises that, no matter how malicious a 
script is, the object's automation model does not allow any harm 
to the user, either in the form of data corruption or security leaks. 
If a control is not "safe-for-scripting", the user will receive a warning 
dialog whenever the control is inserted on an untrusted page in 
Internet Explorer (IE), asking whether the object should be visible from scripts. 
(This is only at medium security level, at high security, the object 
is never visible to scripts, and at low, always visible.)  If a 
control, C1, can potentially contain another control, C2, which might 
be unsafe, then C1 should probably not declare itself "safe-for-scripting".\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_SAFEFORINITIALIZING\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Marks the COM object as "safe-for-initializing" 
meaning that it guarantees to do nothing bad regardless of the data with 
which it is initialized.  From IE, the user will be given a warning 
dialog (described above) if an untrusted page attempts to initialize 
a control that is not "safe-for-initializing".\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CI_NOAPARTMENTTHREADING\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 By default, {\b RegisterControls} will register 
a control as "apartment-aware".  If this flag is set, the control will 
*not* be registered as apartment-aware.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pNext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to a {\i ControlInfo} struct for the next 
control that {\b RegisterControls} should register.  Use this field to 
chain together a linked-list of all the controls that {\b RegisterControls} 
should register.  {\i pNext} should set to NULL for the last {\i ControlInfo} 
struct in the list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b uiVerbStrID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A string resource ID.  The string is a definition 
of an OLE verb applicable to the control.  The string is assumed to 
have the following format:\par 

<verb_number>=<name>, <menu_flags>, <verb_flags>\par 

See help on {\b IOleObject::EnumVerbs}
 for a description of each field. 
{\b RegisterControls} will call {\b LoadString} to read all the 
consecutively-numbered string resources beginning with {\i uiVerbStrID} 
until either {\b LoadString} fails (i.e., the resource doesn't exist) or 
an empty string is returned.  {\b RegisterControls} will 
register/unregister each verb string it reads.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This structure is used by {\b RegisterControls} and 
{\b HelpCreateClassObject}.\par 

{\i Important:}
 The objects pointed to by pointer fields of 
{\i ControlInfo} must be defined statically in the DLL, since functions 
that use {\i ControlInfo} holds onto this pointer.  This can be 
accomplished by making {\i ControlInfo} and all the data it points to 
be global variables/literals in your DLL.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 HostLWOCInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} HostLWOCInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains information about a {\b HostLW} control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/HOSTLW.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Flags that modify the behavior of the control. 
These are the same SSWP_ flags specified in 
{\b ISiteLW::SetSiteWindowParameters}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b IHostLWOC::GetInfo}
 and {\b IHostLWOC::SetInfo}
 for more 
information.\par 

This structure is defined in "HostLWOC.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 LineOCInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iWidth;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab COLORREF rgb;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab POINT2 pt2;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} LineOCInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains information about a {\b Line} control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iWidth}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The line's width (in pixels).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b rgb}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The line's color.  This must be an RGB color, 
created using the {\b RGB} macro.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pt2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The line's position.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ILineOC::GetInfo}
 and {\b ILineOC::SetInfo}
 for more 
information.\par 

This structure is defined in "LineOC.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 POINT2 Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab POINT apt[2];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} POINT2;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 An array of two POINT values, used to represent a geometrical element 
such as a line segment.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/LINE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b apt[2]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The two endpoints.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This structure is used by {\b LineOCInfo}, for example.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropPageHelperInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int idDialog;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int idTitle;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab HINSTANCE hinst;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab PropPageHelperProc pproc;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab IID iid;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwUser;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab IPropertyPageSite * psite;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPUNKNOWN * ppunk;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cpunk;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab HWND hwnd;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fDirty;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fLockDirty;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} PropPageHelperInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Maintains information describing a property page.  Used by 
{\b PropPageHelper}, but allocated by the object that aggregates 
{\b PropPageHelper}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/PROPHELP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b idDialog}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of propery page dialog resource.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b idTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of a string resource containing the page's title 
(used on the page tab).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b hinst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The instance of the DLL that contains the 
resources specified by {\i idDialog} and {\i idTitle}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pproc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A callback function that receives property 
page window messages.  {\i pproc} is similar to a DLGPROC but has 
extra parameters: a pointer to this structure, and a pointer to 
an HRESULT to be used when responding to the following special 
messages:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 WM_PPH_APPLY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 {\i pproc} should apply any property page 
changes to the objects {\i ppunk} that the property page 
is operating on.  This is the same as {\b IPropertyPage::Apply}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 WM_PPH_HELP\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Identical to {\b IPropertyPage::Help}
. 
The WPARAM parameter of {\i pproc} contains the 
LPCOLESTR argument of {\b IPropertyPage::Help}
.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 WM_PPH_TRANSLATEACCELERATOR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Identical to 
{\b IPropertyPage::TranslateAccelerator}
. 
The WPARAM parameter of {\i pproc} contains the 
LPMSG argument of {\b IPropertyPage::TranslateAccelerator}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface that will be used to communicate with 
objects that the property page will operate upon.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwUser}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Arbitrary information stored by the caller of 
{\b AllocPropPageHelper}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b psite}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The frame's page site object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b ppunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 An array of {\i cpunk} pointers to the objects 
that this property page will operate upon.  The interface ID of 
each element of {\i ppunk} is actually {\i iid}.  If {\i cpunk}==0, 
then presumably none of the objects that the property page was 
requested to operate upon supports the interface {\i iid}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cpunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of elements in {\i ppunk}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The property page window.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fDirty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 TRUE if changes to the property page have not yet 
been applied to the objects in {\i ppunk}, FALSE otherwise.  (If TRUE, 
the Apply button should be visible.)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fLockDirty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, {\i fDirty} should not be changed. 
{\i fLockDirty} is TRUE during initialization of the property page 
(during which time it's inappropriate to be telling the property 
page that it's dirty).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b AllocPropPageHelper} for more information.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_BOUNDARYACTION\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_BOUNDARYACTION \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_BOUNDARYACTION_BOUNCE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_BOUNDARYACTION_WRAP,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_BOUNDARYACTION_STICK\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 What to do when a {\b Sprite}'s time-varying parameter (e.g., translucency 
or rotation) hits a "boundary" (i.e., a minimum or maximum value).\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_BOUNDARYACTION_BOUNCE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reverse direction.  That is, if at the minimum value, begin stepping toward 
the maximum; if at the maximum, begin stepping toward the minimum. 
(ordinal 0)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_BOUNDARYACTION_WRAP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Wrap around.  That is, if at the minimum value, jump to the maximum; if at 
the maximum, jump to the minimum. 
(ordinal 1)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_BOUNDARYACTION_STICK}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Don't change.  That is, if at the minimum or maximum value, remain stuck 
at that value. 
(ordinal 2)\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_ROT_VALS\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_ROT_VALS \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_ROT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_ROT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_INIT_ROT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_ROTSTEP,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_ROTSTEP,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_INIT_ROTSTEP,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_ROTDELAY,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_ROTDELAY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Possible values for the fields of {\b SpriteRotationInfo} and the various 
rotation-related properties of {\b Sprite}.  All rotation values are 
measured in degrees.  For 2D rotation, rotation values increase in the 
counter-clockwise direction from the positive x-axis.  For 3D rotation, 
rotation values increase out of the plane of the display and decrease 
into the plane of the display.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_ROT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The mimimum possible rotation (in degrees). 
(value = -360)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_ROT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible rotation (in degress). 
(value = 360)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_INIT_ROT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The default initial rotation (in degrees). 
(value = 0)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_ROTSTEP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible rotation step (in degrees). 
(value = -360)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_ROTSTEP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible rotation step (in degrees). 
(value = 360)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_INIT_ROTSTEP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The default initial rotation step (in degrees). 
(value = 0)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_ROTDELAY}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible rotation step delay (in animation ticks). 
(value = 0)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_ROTDELAY}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible rotation step delay (in animation ticks). 
(value = 100)\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_ROTATION_TYPE\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_ROTATION_TYPE \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT_NONE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_CENTER,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_TOPLEFT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_TOPRIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_BOTTOMRIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_BOTTOMLEFT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_TOPMIDPOINT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_RIGHTMIDPOINT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_BOTTOMMIDPOINT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT2D_LEFTMIDPOINT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_TOPEDGE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_LEFTEDGE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_BOTTOMEDGE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_RIGHTEDGE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_VERTICALMIDLINE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_HORIZONTALMIDLINE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_DIAGONALDOWN,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_ROT3D_DIAGONALUP\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Possible types of {\b Sprite} rotation.  Possible values for 
{\b Sprite::RotationType}
 and {\b iType}
.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT_NONE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 No rotation. 
(ordinal 0)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_CENTER}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s center. 
(ordinal 1)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_TOPLEFT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s top-left corner. 
(ordinal 2)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_TOPRIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s top-right corner. 
(ordinal 3)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_BOTTOMRIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s bottom-right corner. 
(ordinal 4)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_BOTTOMLEFT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the {\b Sprite}'s bottom-left corner. 
(ordinal 5)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_TOPMIDPOINT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint of the {\b Sprite}'s top edge. 
(ordinal 6)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_RIGHTMIDPOINT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint the {\b Sprite}'s right edge. 
(ordinal 7)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_BOTTOMMIDPOINT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint of the {\b Sprite}'s bottom edge. 
(ordinal 8)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT2D_LEFTMIDPOINT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 2D rotation about the midpoint of the {\b Sprite}'s left edge. 
(ordinal 9)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_TOPEDGE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the {\b Sprite}'s top edge as the axis of rotation.  (ordinal 10)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_LEFTEDGE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the {\b Sprite}'s left edge as the axis of rotation.  (ordinal 11)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_BOTTOMEDGE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the {\b Sprite}'s bottom edge as the axis of rotation.  (ordinal 12)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_RIGHTEDGE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the {\b Sprite}'s right edge as the axis of rotation.  (ordinal 13)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_VERTICALMIDLINE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the {\b Sprite}'s vertical midline as the axis of rotation. 
(ordinal 14)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_HORIZONTALMIDLINE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the {\b Sprite}'s horizontal midline as the axis of rotation. 
(ordinal 15)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_DIAGONALDOWN}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the diagonal from the {\b Sprite}'s top-left to bottom-right corners 
as the axis of rotation.  Note: This rotation type is not currently 
implemented. 
(ordinal 16)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_ROT3D_DIAGONALUP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pseudo-3D rotation into or out of the plane of the display using 
the diagonal from the {\b Sprite}'s bottom-left to top-right corners 
as the axis of rotation.  Note: This rotation type is not currently 
implemented. 
(ordinal 17)\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SPRITE_TRANS_VALS\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SPRITE_TRANS_VALS \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_TRANS,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_TRANS,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_TRANSSTEP,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_TRANSSTEP,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MIN_TRANSDELAY,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SPRITE_MAX_TRANSDELAY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Possible values for the fields of {\b SpriteTranslucencyInfo} and the 
various translucency-related properties of {\b Sprite}.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_TRANS}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible opacity (i.e., completely translucent). 
(value = 0)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_TRANS}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible opacity (i.e., completely opaque). 
(value = 255)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_TRANSSTEP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible translucency step. 
(value = -255)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_TRANSSTEP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible translucency step. 
(value = 255)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MIN_TRANSDELAY}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum possible translucency step delay (in animation ticks). 
(value = 0)\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SPRITE_MAX_TRANSDELAY}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum possible translucency step delay (in animation ticks). 
(value = 100)\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteBitmapInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TCHAR[MAX_PATH + 1] szBitmapPath;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cFramesTotal;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cFramesAcross;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int cFramesDown;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteBitmapInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains about the bitmap associated with a {\b Sprite} control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b szBitmapPath}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The file system path to the Sprite's bitmap file; if 
szBitmapPath[0] is '\\0', the Sprite isn't currently associated 
with a bitmap.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cFramesTotal}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The total number of frames in the bitmap; less than 
{\b cFramesAcross}
 * {\b cFramesDown}
 if some frames in the last row are 
unused.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cFramesAcross}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames running across the bitmap (i.e., #columns); 
less than {\b cFrames}
 / {\b cFramesDown}
 if some frames in the last 
row are unused.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cFramesDown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of frames running down the bitmap (i.e., #rows); less 
than {\b cFrames}
 / {\b cFramesAcross}
 if some frames in the last 
row are unused.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ISprite::GetInfo}
 and {\b ISprite::SetInfo}
 for more 
information.\par 

This structure is defined in "isprite.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteQuadrangleInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab POINT vertex[4];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LONG coord[8];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteQuadrangleInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Information about a {\b Sprite} control's BLT-ing quadrangle.  Note: this 
data structure is implemented as a union.  Therefore, the coordinates of 
the quadrangle may be accessed as four vertices or as eight individual 
x- and y-coordinates, whichever is most convenient.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b vertex[4]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The four vertices of the quadrangle in the order (x1,y1), (x2,y2), 
(x3,y3), and (x4,y4).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b coord[8]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The eight coordinates of the vertex in the order x1, y1, x2, y2, x3, 
y3, x4, y4.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteRotationInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iSpeed;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab {\b SPRITE_BOUNDARYACTION} edgeAction;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteRotationInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains rotation information about a {\b Sprite} control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The rotation type.  See {\b SPRITE_ROTATION_TYPE} for possible values.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iNow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The initial rotation value. 
Must be between 
{\b SPRITE_MIN_ROT}
 and 
{\b SPRITE_MAX_ROT}
, and between 
{\b iMin}
 and {\b iMax}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum rotation value. 
Must be between {\b SPRITE_MIN_ROT}
 and 
{\b SPRITE_MAX_ROT}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum rotation value. 
Must be between {\b SPRITE_MIN_ROT}
 and 
{\b SPRITE_MAX_ROT}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iSpeed}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in rotation which occurs with every call to the Sprite's 
{\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_ROTSTEP}
 (slowest) and 
{\b SPRITE_MAX_ROTSTEP}
 (fastest).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayNow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite first appears. 
Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}
 method. 
Must be between {\b SPRITE_MIN_ROTDELAY}
 (no delay) and 
{\b SPRITE_MAX_ROTDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its 
minimum rotation.  Measured in terms of the number of calls to 
the Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_ROTDELAY}
 (no delay) and 
{\b SPRITE_MAX_ROTDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite rotation stepping that occurs when the Sprite hits its 
maximum rotation.  Measured in terms of the number of calls to 
the Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_ROTDELAY}
 (no delay) and 
{\b SPRITE_MAX_ROTDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b edgeAction}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the rotation hits {\b iMin}
 or {\b iMax}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ISprite::GetInfo}
 and {\b ISprite::SetInfo}
 for more 
information.\par 

This structure is defined in "isprite.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SpriteTranslucencyInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iSpeed;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayNow;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMin;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iDelayAtMax;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab {\b SPRITE_BOUNDARYACTION} edgeAction;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} SpriteTranslucencyInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains translucency information about a {\b Sprite} control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/AUTODOC/SPRITE.D\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iNow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The initial translucency value.  Must be between 
{\b SPRITE_MIN_TRANS}
 (transparent) and 
{\b SPRITE_MAX_TRANS}
 (opaque), and must be between 
{\b iMin}
 and {\b iMax}
.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The minimum translucency value.  Must be between 
{\b SPRITE_MIN_TRANS}
 (transparent) and 
{\b SPRITE_MAX_TRANS}
 (opaque).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum translucency value.  Must be between 
{\b SPRITE_MIN_TRANS}
 (transparent) and 
{\b SPRITE_MAX_TRANS}
 (opaque).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iSpeed}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The change in translucency which occurs with every call to the Sprite's 
{\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_TRANSSTEP}
 (slowest) and 
{\b SPRITE_MAX_TRANSSTEP}
 (fastest).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayNow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite first appears. 
Measured in terms of the number of calls to the Sprite's {\b IAnimate::Tick}
 method. 
Must be between 
{\b SPRITE_MIN_TRANSDELAY}
 (no delay) and 
{\b SPRITE_MAX_TRANSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its 
minimum translucency.  Measured in terms of the number of calls to 
the Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_TRANSDELAY}
 (no delay) and 
{\b SPRITE_MAX_TRANSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iDelayAtMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The delay in Sprite translucency stepping that occurs when the Sprite hits its 
maximum translucency.  Measured in terms of the number of calls to 
the Sprite's {\b IAnimate::Tick}
 method.  Must be between 
{\b SPRITE_MIN_TRANSDELAY}
 (no delay) and 
{\b SPRITE_MAX_TRANSDELAY}
 (longest delay).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b edgeAction}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 What happens after the translucency hits {\b iMin}
 or {\b iMax}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b ISprite::GetInfo}
 and {\b ISprite::SetInfo}
 for more 
information.\par 

This structure is defined in "isprite.h".\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantProperty Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BSTR bstrPropName;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VARIANT varValue;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VariantProperty;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains the name and value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCMISC/AVIO.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b bstrPropName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The name of the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b varValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The value of the property.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IEnumVariantProperty} uses this structure.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VariantPropertyHeader Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab unsigned int cbData;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VariantPropertyHeader;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The beginning part of a record (in a stream) that contains the 
serialized data of a {\b VariantProperty}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/DEV/MMCTL21/SRC/OCHELP/RVP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type of the record.  If this value is greater than 
or equal to zero, then it represents a VARTYPE, and the record 
represents a property name/value pair, and the type of the value is 
specified by the VARTYPE.  In this case, the data following the 
{\b VariantPropertyHeader} consists of the property name followed by 
the property value (coerced to a string value by {\b VariantChangeType}); 
each string is a non-null-terminated Unicode string preceded by an 
unsigned 32-bit integer count of Unicode characters.  {\i iType} is 
not a known VARTYPE value, then the record should be skipped when read 
(by skipping the {\i cbData} bytes that follow the 
{\b VariantPropertyHeader} rather than generating an error.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b cbData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of bytes of data that follow 
this {\b VariantPropertyHeader}.  In other words, the total length 
of the header is {\i cbData} + sizeof({\b VariantPropertyHeader}).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This structure helps define the file format used by 
{\b WriteVariantProperty} and {\b ReadVariantProperty}.\par 
}
