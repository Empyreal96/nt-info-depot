{\rtf1\ansi \deff0\deflang1033

{\fonttbl
{\f0\froman Times New Roman;}
{\f2\fswiss Arial;}
{\f19\fmodern\fcharset0\fprq1 Courier New;}
}

{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue127;
\red0\green127\blue127;
\red0\green127\blue0;
\red127\green0\blue127;
\red127\green0\blue0;
\red127\green127\blue0;
\red127\green127\blue127;
\red192\green192\blue192;
}


{\stylesheet
{\s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 header;}
{\s251\sb160\sa40\sl-280\keepn \b\f2\lang1033 heading 4;}
{\s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 heading 3;}
{\s253\li-1800\sb160\sa60\sl-380\keepn \b\f0\fs34\lang1033 heading 2;}
{\s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 heading 1;}
{\*\cs10 \additive Default Paragraph Font;}
{\sa160\sl240 \fs21\lang1033 Normal;}
{\s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Ex;}
{\s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 header rule;}
{\s45\li-1800\sa180\sl-440\keepn\tx0 \b\f2\fs40\up8\lang1033 Rh1;}
{\s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Rmh;}
{\s50\sl-240\keepn \f0\fs21\lang1033 Term1;}
{\s53\li280\sl-240\keepn \f0\fs21\lang1033 Term2;}
{\s54\li280\sa80\sl-240 \f0\fs21\lang1033 Def1;}
{\s55\li560\sa80\sl-240 \f0\fs21\lang1033 Def2;}
{\s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 Rule;}
{\s93\sl240 \fs21\lang1033 
Index Link;}
{\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 Table Text;}
}

\paperw12240\paperh15840\margl3330\margr1530\margt-2540\margb-2220\gutter420 
\facingp\deftab280\widowctrl\ftnbj 

\sectd \binfsxn1\binsxn1\linex0\headery1990\footery360\endnhere\titlepg 

{\headerl \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 4}}{\expnd50  }nntpfilt API Reference - 12/15/97\par 
\pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 \par }

{\headerr \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
\tab nntpfilt API Reference - 12/15/97{\expnd50   }
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 3}}
\par \pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 
\par }
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Contents\par 
\pard\plain \s93\sl240 \fs21\lang1033 
Click any of the topics below, or to display an 
alphabetical list of topics, click on the Index button on the toolbar.\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 Overview Topics\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par
\par
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 Event Types\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par
\par
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 GUIDs\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par
\par
\par
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 COM Interfaces\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
IMsg{\v IMsg_int}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
IMsgLog{\v IMsgLog_int}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
INNTPFilter{\v INNTPFilter_int}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
INNTPFilterOnPostFinal{\v INNTPFilterOnPostFinal_int}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CATID_NNTP_ON_POST\par 
\pard\plain \sa160\sl240 \fs21\lang1033 GUID Value = \{C028FD83-F943-11d0-85BD-00C04FB960EA\}\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This is the GUID that is used for the NNTP_ON_POST event.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CATID_NNTP_ON_POST_FINAL\par 
\pard\plain \sa160\sl240 \fs21\lang1033 GUID Value = \{C028FD83-F943-11d0-85BD-00C04FB960EA\}\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This is the GUID that is used for the NNTP_ON_POST_FINAL event.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg Properties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The IMsg object passed into the {\b INNTPFilter::OnPost}
 
and {\b INNTPFilterOnPostFinal::OnPostFinal}
 methods supports the following 
properties:\par 
\trowd \trgaph50 \trleft180 \cellx2000 \cellx3000 \cellx4200 \cellx6600 \cellx10000
\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\b{\fs20 Property Name\cell Type\cell Access\cell Events\cell Description\cell}}\pard \intbl \trhdr\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 \cell \cell \cell \cell \cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 header-*\cell String\cell Read\cell NNTP_ON_POST, NNTP_ON_POST_FINAL\cell Any property name that starts with "header-" can be used to read 
up an article's header.  For instance the property "header-from" 
would get the contents of the From: header, and "header-subject" 
would get the contents of the Subject: header.\cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 \cell \cell \cell \cell \cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 feedid\cell Numeric\cell Read-Only\cell NNTP_ON_POST, NNTP_ON_POST_FINAL\cell Returns the feed id that this message was generated from.  It will 
return -1 if the message is coming from a client, or -2 if the 
message is was picked up from the pickup directory.\cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 \cell \cell \cell \cell \cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 message stream\cell Interface\cell Read-Only\cell NNTP_ON_POST, NNTP_ON_POST_FINAL\cell Returns a read-only IStream pointer with the contents of the message.\cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 \cell \cell \cell \cell \cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 newsgroups\cell String\cell Read/Write\cell NNTP_ON_POST, NNTP_ON_POST_FINAL\cell This returns a comma-delimited list of newsgroups that the message 
will be stored in (which may be different then what is in the 
Newsgroups header).  This is read only during the NNTP_ON_POST_FINAL 
event.\cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 post\cell Numeric\cell Read/Write\cell NNTP_ON_POST\cell If this is 0 then the post will be failed, any other number will 
cause the message to be posted.\cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 \cell \cell \cell \cell \cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 process control\cell Numeric\cell Read/Write\cell NNTP_ON_POST\cell If this is 0 then the server will disable its control message 
logic for this message.  Any other number will cause the server to 
run the control message logic normally.\cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 \cell \cell \cell \cell \cell}\pard \intbl \row\pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs16 process moderator\cell Numeric\cell Read/Write\cell NNTP_ON_POST\cell If this is 0 then the server will disable its moderated posting 
logic for this message.  Any other number will cause the server to 
run the moderated posting logic normally.\cell}\pard \intbl \row\pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 NNTP_ON_POST Event\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The NNTP_ON_POST event is triggered by the NNTP server when a new message 
is being posted (either from a client or from a feed), before the message 
is processed or put into the store.  Filters installed at this point 
can control server processing of the message, alter the newgroups 
that the message will be posted to, or stop the message from being 
posted.\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 Filter Object Interfaces\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filter objects that are bound to the NNTP_ON_POST event must support 
the {\b INNTPFilter} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b INNTPFilter}\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 NNTP_ON_POST_FINAL Event\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The NNTP_ON_POST_FINAL event is triggered by the NNTP server when a new 
message is being posted (either from a client or from a feed) after the 
message has been written into the store.  Filters should install at this 
point if they require notification of message postings.  It is guaranteed 
that if this event is triggered that the message has been added to the 
store.\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 Filter Object Interfaces\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filter objects that are bound to the NNTP_ON_POST_FINAL event must support 
the {\b INNTPFilterOnPostFinal} interface or the {\b INNTPFilter} interface. 
If both interfaces are supported then the server will use the 
{\b INNTPFilterOnPostFinal} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b INNTPFilterOnPostFinal}\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 NNTP_SOURCE_TYPE_GUID\par 
\pard\plain \sa160\sl240 \fs21\lang1033 GUID Value = \{C028FD82-F943-11d0-85BD-00C04FB960EA\}\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This is the source type GUID for NNTP instances.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Rule Engine Behavior\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The NNTP server looks for two properties 
under the SourceProperties property bag for each event binding before calling 
a sink object.  The first is "Rule", which allows headers and metaheaders 
values to be examined.  The second is "NewsgroupList", which is an explicit 
list of newsgroups to act upon.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Rule property\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The rule property is built up from clauses in the 
format "header=value1,value2".  There can be any number of values, each 
separated by commas.  If any of the values matches then the clause passes. 
The values can include wildcards.  If there are no values supplied then just 
having the header exist in the message will cause the rule to pass.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 There can be many of these clauses in one rule.  They 
should be separated by semi-colons.  All of the clauses must 
pass for the rule to pass.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 There are two special pseudo-headers called ":newsgroups" and 
":feedid".  The ":newsgroups" pseudo-header contains the list of newsgroups 
that the message will be stored in (note that this may be different then the 
Newsgroups header, eg. control messages).  With the :newsgroups header each 
value is checked against newsgroup that the message will be stored in.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The ":feedid" pseudo-header contains the feed ID which this message 
originated from.  There are two special feed IDs, -1 and -2.  A feed ID of -1 
means that the message came from a client posting.  A feed ID of -2 means 
that the message was picked up through directory pickup.  You can use the 
:feedid pseudo-header to cause sinks to be called based on where messages 
originated from.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 By default all string comparisons are case-insensitive.  To 
change this behavior the clause "case-sensitive" can be used to turn 
on case-sensitivity.  The clause "case-insensitive" can be used to 
turn off case-sensitivity as well.  These can be mixed in one rule.  The 
rule is processed left-to-right.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Examples\par \pard\plain \sa160\sl240 \fs21\lang1033 This example checks for messages with the header X-testhdr with the 
contents test:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 X-testhdr=test\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks for messages with the header X-testhdr with the 
contents one or two:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 X-testhdr=one,two\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks to see if the message contains a control header:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 control=\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks for messages with the header from containing the 
string "user@company.com" and the header subject containing the string 
"forsale":\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 from=*user@company.com*,forsale\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks for all messages which are being stored in the 
the alt hierarchy:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 :newsgroups=alt.*\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks to see if the from header contains the string "test" 
in any case and the subject header contains the string "test" in any case:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 case-sensitive;from=TEST;case-insensitive;subject=test\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks to see if the from header contains the string "TEST" 
in all upper case and the subject header contains the string "test" in any 
case:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 case-sensitive;from=TEST;case-insensitive;subject=test\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks to see if the message originated from a client 
posting or from a file picked up through directory pickup:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 :feedid=-1,-2\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks to see if the message originated from the feeds 
with IDs 1, 2, or 7:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 :feedid=1,2,7\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 NewsgroupList property\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The NewsgroupList property contains a 
comma delimited list of newsgroups names.  These newsgroup names can not 
contain any wildcards.  If the message is being stored in any of these 
newsgroups then the rule will trigger.  For a large number of newsgroups 
this is faster then using the ":newsgroups" pseudo-header with the "Rule" 
property.  If no groups are listed supplied then this rule will always fail.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Examples\par \pard\plain \sa160\sl240 \fs21\lang1033 This example checks for messages going to group1\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 group1\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 This example checks for messages going to group1 or group2\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 group1,group2\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Mixing Rule Properties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 You can use both the Rule and NewsgroupList 
property in one event.  If both properties are present then they both need to 
pass for the sink object to be called.  If neither property is present 
then the sink object will always be called.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module IMSG.IDL - IDL for the IMsg interface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This interface is used by 
the server events model in the NNTP and SMTP servers.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The message interface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Value [propget]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Get a property value\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Value [propput]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set a property value\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetVariantA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to get a property value as a variant.  This method 
is not automation compatible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetVariantA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to set a property value as a variant.  This method 
is not automation compatible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetStringA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to get a string property value.  This method 
is not automation compatible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetStringA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to set a string property value.  This method 
is not automation compatible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetDwordA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to get a DWORD property value.  This method 
is not automation compatible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetDwordA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to set a DWORD property value.  This method 
is not automation compatible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetInterfaceA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to get a interface property value.  This method 
is not automation compatible.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetInterfaceA}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 High performance method to set a interface property value.  This method 
is not automation compatible.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::GetDwordA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetDwordA(}{\b LPCSTR} {\i pszName}{\b , VARIANT *} {\i pvarResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Get a numeric property using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 TYPE_E_TYPEMISMATCH\cell Failure, property is not a number\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b SetDwordA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::GetInterfaceA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetInterfaceA(}{\b LPCSTR} {\i pszName}{\b , VARIANT *} {\i pvarResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Get a COM interface property using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 TYPE_E_TYPEMISMATCH\cell Failure, property is not an interface pointer\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b SetInterfaceA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::GetStringA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetStringA(}{\b LPCSTR} {\i pszName}{\b , VARIANT *} {\i pvarResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Get a string property as an ANSI string using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 TYPE_E_TYPEMISMATCH\cell Failure, property is not a string\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b SetStringA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::GetVariantA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetVariantA(}{\b LPCSTR} {\i pszName}{\b , VARIANT *} {\i pvarResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Get a variant property using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to get\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b SetVariantA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::SetDwordA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetDwordA(}{\b LPCWSTR} {\i pszName}{\b , VARIANT *} {\i pvarResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set a numeric property using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 TYPE_E_TYPEMISMATCH\cell Failure, property is not a number\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b GetDwordA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::SetInterfaceA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetInterfaceA(}{\b LPCWSTR} {\i pszName}{\b , VARIANT *} {\i varResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set a COM interface property using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 TYPE_E_TYPEMISMATCH\cell Failure, property is not an interface pointer\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i varResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b GetInterfaceA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::SetStringA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetStringA(}{\b LPCWSTR} {\i pszName}{\b , VARIANT *} {\i pvarResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set a string property as an ANSI string using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 TYPE_E_TYPEMISMATCH\cell Failure, property is not a string\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b GetStringA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::SetVariantA Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetVariantA(}{\b LPCWSTR} {\i pszName}{\b , VARIANT *} {\i pvarResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set a variant property using the ANSI property name\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b GetVariantA}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::Value [propget] Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Value [propget](}{\b BSTR} {\i bstrProperty}{\b , VARIANT *} {\i pvarValue}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Get the value of a property\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to retrieve\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out, retval] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propput]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsg::Value [propput] Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Value [propput](}{\b BSTR} {\i bstrProperty}{\b , VARIANT *} {\i pvarValue}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Put the value of a property\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Property doesn't exist\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Failure, out of memory\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Failure, invalid argument or argument type\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell Failure, operation not permitted\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] The name of the property to set\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pvarValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out, retval] The value of the property\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b Value [propget]}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsgLog Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The message logging interface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT WriteToLog}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Write to the log\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IMsgLog::WriteToLog Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT WriteToLog(}{\b LPCWSTR} {\i pszClientHostName}{\b , LPCWSTR} {\i pszClientUserName}
{\b , LPCWSTR} {\i pszServerAddress}
{\b , LPCWSTR} {\i pszOperation}
{\b , LPCWSTR} {\i pszTarget}
{\b , LPCWSTR} {\i pszParameters}
{\b , LPCWSTR} {\i pszVersion}
{\b , DWORD} {\i dwBytesSent}
{\b , DWORD} {\i dwBytesReceived}
{\b , DWORD} {\i dwProcessingTimeMS}
{\b , DWORD} {\i dwWin32Status}
{\b , DWORD} {\i dwProtocolStatus}
{\b , DWORD} {\i dwPort}
{\b , LPCWSTR} {\i pszHTTPHeader}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Write to the log\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/IMSG/IMSG.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Failure.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell Failure, not implemented.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszClientHostName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the Client Host Name.  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszClientUserName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the Client User Name.  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszServerAddress}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the Server Address  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszOperation}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the operation.  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszTarget}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the target.  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszParameters}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the parameters.  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszVersion}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the version.  May be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwBytesSent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the number of bytes sent.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwBytesReceived}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the number of bytes received.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwProcessingTimeMS}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the time spent processing, in milliseconds.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwWin32Status}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the Win32 status code.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwProtocolStatus}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the protocol status code.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwPort}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the port.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszHTTPHeader}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the HTTP header.  May be NULL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsgLog}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 INNTPFilter Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface should be implemented by sink 
objects that want to support the NNTP_ON_POST and NNTP_ON_POST_FINAL 
events.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/NNTPFILT/NNTPFILT.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnPost}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The OnPost method is called by the NNTP server 
when the NNTP_ON_POST or NNTP_ON_POST_FINAL event occurs.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b INNTPFilterOnPostFinal}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 INNTPFilter::OnPost Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnPost(}{\b IMsg *} {\i pMessage}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 The NNTP server calls this 
method when the NNTP_ON_POST or NNTP_ON_POST_FINAL event is triggered 
and passes the rule found in the binding database.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/NNTPFILT/NNTPFILT.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success, call the next installed sink\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Success, don't call any other sink\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 Any COM error code\cell Failure, don't call any other sinks\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the IMsg object for the 
message which is being posted\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b INNTPFilterOnPostFinal::OnPostFinal}
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 INNTPFilterOnPostFinal Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface should be 
implemented by sink objects that want to support the NNTP_ON_POST_FINAL 
event.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/NNTPFILT/NNTPFILT.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnPostFinal}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The OnPostFinal method is called by the 
NNTP server when an NNTP_ON_POST_FINAL event occurs.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b INNTPFilter}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 INNTPFilterOnPostFinal::OnPostFinal Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnPostFinal(}{\b IMsg *} {\i pMessage}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 The NNTP 
server calls this method when the NNTP_ON_POST_FINAL event is 
triggered and the passes the rule found in the binding database.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: C:/EX/STACKS/SRC/CORE/NNTPFILT/NNTPFILT.IDL\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Success, call the next installed sink\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Success, don't call any other sinks\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 Any COM error code\cell Failure, don't call any other sinks\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the IMsg object for the 
message which is being posted.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \s93\sl240 \fs21\lang1033 
{\b IMsg}\par 
\pard\plain \s93\sl240 \fs21\lang1033 
{\b INNTPFilter::OnPost}
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
}
